<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.4.3">Jekyll</generator><link href="https://kevinguo.me/feed.xml" rel="self" type="application/atom+xml" /><link href="https://kevinguo.me/" rel="alternate" type="text/html" /><updated>2017-07-12T09:48:25+08:00</updated><id>https://kevinguo.me/</id><title type="html">KevinGuo</title><subtitle>KevinGuo's blog</subtitle><author><name>KevinGuo</name></author><entry><title type="html">video</title><link href="https://kevinguo.me/2017/07/06/video-test/" rel="alternate" type="text/html" title="video" /><published>2017-07-06T00:00:00+08:00</published><updated>2017-07-06T00:00:00+08:00</updated><id>https://kevinguo.me/2017/07/06/video-test</id><content type="html" xml:base="https://kevinguo.me/2017/07/06/video-test/">&lt;blockquote&gt;
  &lt;p&gt;就是加个视频链接，测试一下看看行不行，代码如下&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!--more--&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;video&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;video&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;controls=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;preload=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;none&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;498&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;510&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;poster=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://media.w3.org/2010/05/sintel/poster.png&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;source&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mp4&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://media.w3.org/2010/05/sintel/trailer.mp4&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;video/mp4&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;source&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;webm&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://media.w3.org/2010/05/sintel/trailer.webm&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;video/webm&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;source&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ogv&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://media.w3.org/2010/05/sintel/trailer.ogv&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;video/ogg&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/video&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h6 id=&quot;效果如下&quot;&gt;效果如下&lt;/h6&gt;
&lt;video id=&quot;video&quot; controls=&quot;&quot; preload=&quot;none&quot;&gt;
      &lt;source id=&quot;mp4&quot; src=&quot;http://media.w3.org/2010/05/sintel/trailer.mp4&quot; type=&quot;video/mp4&quot; /&gt;
      &lt;source id=&quot;webm&quot; src=&quot;http://media.w3.org/2010/05/sintel/trailer.webm&quot; type=&quot;video/webm&quot; /&gt;
      &lt;source id=&quot;ogv&quot; src=&quot;http://media.w3.org/2010/05/sintel/trailer.ogv&quot; type=&quot;video/ogg&quot; /&gt;
    &lt;/video&gt;</content><author><name>KevinGuo</name></author><summary type="html">就是加个视频链接，测试一下看看行不行，代码如下</summary></entry><entry><title type="html">saltstack之pillar</title><link href="https://kevinguo.me/2017/07/06/saltstack%E4%B9%8Bpillar/" rel="alternate" type="text/html" title="saltstack之pillar" /><published>2017-07-06T00:00:00+08:00</published><updated>2017-07-06T00:00:00+08:00</updated><id>https://kevinguo.me/2017/07/06/saltstack%E4%B9%8Bpillar</id><content type="html" xml:base="https://kevinguo.me/2017/07/06/saltstack%E4%B9%8Bpillar/">&lt;h1 id=&quot;pillar&quot;&gt;&lt;strong&gt;Pillar&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;主要作用是存储和定义配置管理中需要的一些变量，比如数据，比如软件版本，用户名密码等信息&lt;/p&gt;

&lt;!--more--&gt;
&lt;h6 id=&quot;1在master上开启pillar_roots&quot;&gt;1.在master上开启pillar_roots&lt;/h6&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;pillar_roots&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/srv/pillar&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;!--more--&gt;
&lt;h6 id=&quot;2在master的srvpillar目录下新建topslspackagesslsservicessls&quot;&gt;2.在master的/srv/pillar目录下新建&lt;em&gt;top.sls&lt;/em&gt;，&lt;em&gt;packages.sls&lt;/em&gt;，&lt;em&gt;services.sls&lt;/em&gt;&lt;/h6&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;root@saltstack-node1 pillar&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# cat top.sls&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;*'&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;packages&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;services&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;root@saltstack-node1 pillar&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# cat packages.sls&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;zabbix&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;package-name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;zabbix&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;2.2.4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;root@saltstack-node1 pillar&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# cat services.sls&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;zabbix&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;10050&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;admin&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h6 id=&quot;3执行pillaritem-zabbix查看指定的信息&quot;&gt;3.执行pillar.item zabbix查看指定的信息&lt;/h6&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;root@saltstack-node1 pillar&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# salt 'saltstack-node2*' pillar.item zabbix&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;saltstack-node2.example.com&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;----------&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;zabbix&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;----------&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;package-name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;zabbix&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;10050&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;admin&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;2.2.4&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content><author><name>KevinGuo</name></author><summary type="html">Pillar 主要作用是存储和定义配置管理中需要的一些变量，比如数据，比如软件版本，用户名密码等信息</summary></entry><entry><title type="html">kargo容器化部署kubernetes高可用集群(3)</title><link href="https://kevinguo.me/2017/07/06/kargo%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2kubernetes%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4(3)/" rel="alternate" type="text/html" title="kargo容器化部署kubernetes高可用集群(3)" /><published>2017-07-06T00:00:00+08:00</published><updated>2017-07-06T00:00:00+08:00</updated><id>https://kevinguo.me/2017/07/06/kargo%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2kubernetes%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4(3)</id><content type="html" xml:base="https://kevinguo.me/2017/07/06/kargo%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2kubernetes%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4(3)/">&lt;blockquote&gt;
  &lt;p&gt;上一篇我们详细的剥析了通过kargo生成的各类服务的配置文件，学会了，如何生成证书，如何配置etcd,calico,kubelet，学会了如何配置一个kubernetes的高可用集群。既然集群已经配好了，那么这一章，我们就来学学如何配置一些常用的插件。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!--more--&gt;
&lt;p&gt;其实这一章好像没什么好讲的，无非就是几个yaml文件，只要你集群搭建成功了，直接去&lt;a href=&quot;https://github.com/chinakevinguo/kubernetes-custom/tree/master/kubernetes%20%E6%8F%92%E4%BB%B6&quot;&gt;这里&lt;/a&gt;下载yml文件运行即可&lt;/p&gt;

&lt;p&gt;目前，我所用到的插件如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ingress&lt;/li&gt;
  &lt;li&gt;kubedns&lt;/li&gt;
  &lt;li&gt;dashboard&lt;/li&gt;
  &lt;li&gt;efk&lt;/li&gt;
  &lt;li&gt;heapster&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;运行结果如下&lt;/p&gt;

&lt;p&gt;Dashboard and heapster
&lt;img src=&quot;/images/posts/dashboard-heapster.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;EFK
&lt;img src=&quot;/images/posts/kibana.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;后期再研究新的东西了再加吧，头疼，下班了&lt;/p&gt;</content><author><name>KevinGuo</name></author><summary type="html">上一篇我们详细的剥析了通过kargo生成的各类服务的配置文件，学会了，如何生成证书，如何配置etcd,calico,kubelet，学会了如何配置一个kubernetes的高可用集群。既然集群已经配好了，那么这一章，我们就来学学如何配置一些常用的插件。</summary></entry><entry><title type="html">kargo容器化部署kubernetes高可用集群(2)</title><link href="https://kevinguo.me/2017/07/06/kargo%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2kubernetes%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4(2)/" rel="alternate" type="text/html" title="kargo容器化部署kubernetes高可用集群(2)" /><published>2017-07-06T00:00:00+08:00</published><updated>2017-07-06T00:00:00+08:00</updated><id>https://kevinguo.me/2017/07/06/kargo%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2kubernetes%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4(2)</id><content type="html" xml:base="https://kevinguo.me/2017/07/06/kargo%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2kubernetes%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4(2)/">&lt;blockquote&gt;
  &lt;p&gt;上一篇已经使用kargo搭建了kubernetes高可用集群，这里重点通过剥析kargo生成的配置文件来更加细化的了解下kubernetes，方便后期对kubernetes的自定义。所有的配置文件，我会放到&lt;a href=&quot;https://github.com/chinakevinguo/kubernetes-custom/tree/master/kubernetes%20%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4%E7%BB%84%E4%BB%B6&quot;&gt;github&lt;/a&gt;上&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!--more--&gt;
&lt;h1 id=&quot;etcd-service&quot;&gt;etcd service&lt;/h1&gt;

&lt;p&gt;kargo中也将etcd以容器的方式运行，不过不是放在manifest中，而是单独用systemd的方式管理起来，然后通过etcd cluster来实现高可用&lt;/p&gt;

&lt;h2 id=&quot;主要文件&quot;&gt;主要文件&lt;/h2&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/usr/local/etcd &lt;span class=&quot;c&quot;&gt;# etcd server启动的shell脚本文件&lt;/span&gt;
/usr/local/etcdctl &lt;span class=&quot;c&quot;&gt;# etcd 命令,使用命令docker cp etcd1:/usr/local/bin/etcdctl /usr/local/bin/etcdctl将命令复制到本地&lt;/span&gt;
/etc/systemd/system/etcd.service &lt;span class=&quot;c&quot;&gt;# etcd 的service文件&lt;/span&gt;
/etc/etcd.env &lt;span class=&quot;c&quot;&gt;# etcd 的环境文件&lt;/span&gt;
/etc/ssl/etcd/ &lt;span class=&quot;c&quot;&gt;# etcd 证书文件存放目录&lt;/span&gt;
/etc/ssl/etcd/openssl.conf &lt;span class=&quot;c&quot;&gt;# 生成etcd证书所需要的openssl文件&lt;/span&gt;
/usr/local/bin/etcd-scripts/ &lt;span class=&quot;c&quot;&gt;# 生成etcd证书的脚本文件&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;etcd-shell脚本&quot;&gt;etcd shell脚本&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;vim /usr/local/etcd
&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
/usr/bin/docker run &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  --restart&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;on-failure:5 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  --env-file&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/etc/etcd.env &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  --net&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;host &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  -v /etc/ssl/certs:/etc/ssl/certs:ro &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  -v /etc/ssl/etcd/ssl:/etc/ssl/etcd/ssl:ro &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  -v /var/lib/etcd:/var/lib/etcd:rw &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    --memory&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;512M &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
      --name&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;etcd1 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  quay.io/coreos/etcd:v3.1.5 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    /usr/local/bin/etcd &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$@&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;etcdservice&quot;&gt;etcd.service&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;vim /etc/systemd/system/etcd.service
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Unit]
&lt;span class=&quot;nv&quot;&gt;Description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;etcd docker wrapper
&lt;span class=&quot;nv&quot;&gt;Wants&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;docker.socket
&lt;span class=&quot;nv&quot;&gt;After&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;docker.service

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Service]
&lt;span class=&quot;nv&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;root
&lt;span class=&quot;nv&quot;&gt;PermissionsStartOnly&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true
&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;EnvironmentFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/etc/etcd.env
&lt;span class=&quot;nv&quot;&gt;ExecStart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/local/bin/etcd
&lt;span class=&quot;nv&quot;&gt;ExecStartPre&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;-/usr/bin/docker rm -f etcd1
&lt;span class=&quot;nv&quot;&gt;ExecStop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/bin/docker stop etcd1
&lt;span class=&quot;nv&quot;&gt;Restart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;always
&lt;span class=&quot;nv&quot;&gt;RestartSec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;15s
&lt;span class=&quot;nv&quot;&gt;TimeoutStartSec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;30s

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Install]
&lt;span class=&quot;nv&quot;&gt;WantedBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;multi-user.target
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;etcdenv&quot;&gt;etcd.env&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;vim /etc/etcd.env
&lt;span class=&quot;nv&quot;&gt;ETCD_DATA_DIR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/var/lib/etcd
&lt;span class=&quot;nv&quot;&gt;ETCD_ADVERTISE_CLIENT_URLS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;https://172.30.33.90:2379
&lt;span class=&quot;nv&quot;&gt;ETCD_INITIAL_ADVERTISE_PEER_URLS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;https://172.30.33.90:2380
&lt;span class=&quot;nv&quot;&gt;ETCD_INITIAL_CLUSTER_STATE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;existing
&lt;span class=&quot;nv&quot;&gt;ETCD_LISTEN_CLIENT_URLS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;https://172.30.33.90:2379,https://127.0.0.1:2379
&lt;span class=&quot;nv&quot;&gt;ETCD_ELECTION_TIMEOUT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;5000
&lt;span class=&quot;nv&quot;&gt;ETCD_HEARTBEAT_INTERVAL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;250
&lt;span class=&quot;nv&quot;&gt;ETCD_INITIAL_CLUSTER_TOKEN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;k8s_etcd
&lt;span class=&quot;nv&quot;&gt;ETCD_LISTEN_PEER_URLS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;https://172.30.33.90:2380
&lt;span class=&quot;nv&quot;&gt;ETCD_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;etcd1
&lt;span class=&quot;nv&quot;&gt;ETCD_PROXY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;off
&lt;span class=&quot;nv&quot;&gt;ETCD_INITIAL_CLUSTER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;etcd1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;https://172.30.33.90:2380,etcd2&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;https://172.30.33.91:2380,etcd3&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;https://172.30.33.92:2380

&lt;span class=&quot;c&quot;&gt;# TLS settings&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ETCD_TRUSTED_CA_FILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/etc/ssl/etcd/ssl/ca.pem
&lt;span class=&quot;nv&quot;&gt;ETCD_CERT_FILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/etc/ssl/etcd/ssl/member-node1.pem
&lt;span class=&quot;nv&quot;&gt;ETCD_KEY_FILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/etc/ssl/etcd/ssl/member-node1-key.pem
&lt;span class=&quot;nv&quot;&gt;ETCD_PEER_TRUSTED_CA_FILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/etc/ssl/etcd/ssl/ca.pem
&lt;span class=&quot;nv&quot;&gt;ETCD_PEER_CERT_FILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/etc/ssl/etcd/ssl/member-node1.pem
&lt;span class=&quot;nv&quot;&gt;ETCD_PEER_KEY_FILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/etc/ssl/etcd
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;安装步骤&quot;&gt;安装步骤&lt;/h2&gt;
&lt;p&gt;安装步骤很简单&lt;/p&gt;

&lt;p&gt;1.按照最后的步骤生成证书
2.在每个etcd server的节点上配置好上面的配置文件
3.将etcd.service配置成系统服务(其实就是将运行docker的shell脚本写到systemd中)&lt;/p&gt;
&lt;h1 id=&quot;calico-service&quot;&gt;calico service&lt;/h1&gt;

&lt;h2 id=&quot;主要文件-1&quot;&gt;主要文件&lt;/h2&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/usr/local/bin/calicoctl &lt;span class=&quot;c&quot;&gt;#calicoctl命令&lt;/span&gt;
/etc/systemd/system/calico-node.service &lt;span class=&quot;c&quot;&gt;#calico-node service文件&lt;/span&gt;
/etc/calico/calico.env &lt;span class=&quot;c&quot;&gt;# calico 环境文件&lt;/span&gt;
/etc/calico/certs/  &lt;span class=&quot;c&quot;&gt;#(将etcd/ssl目录下的ca.pem 复制成cert.crt, node-nodex.pem复制成cert.crt, node-nodex-key.pem复制成key.pem)&lt;/span&gt;
/etc/cni/net.d/10-calico.conf &lt;span class=&quot;c&quot;&gt;# calico cni config&lt;/span&gt;
/etc/kubernetes/node-kubeconfig.yaml &lt;span class=&quot;c&quot;&gt;# 为kubernetes 配置calico网络&lt;/span&gt;
/opt/cni/bin/ &lt;span class=&quot;c&quot;&gt;#(将hyperkube和calico/cni镜像中/opt/cni/bin/目录下的所有插件复制到宿主机的/opt/cni/bin/目录下，可通过-v挂载的方式)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;calicoctl-shell脚本&quot;&gt;calicoctl shell脚本&lt;/h3&gt;
&lt;p&gt;运行这个脚本其实就是运行一个容器来进行查询&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
/usr/bin/docker run -i --privileged --rm &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
--net&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;host --pid&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;host &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
-e &lt;span class=&quot;nv&quot;&gt;ETCD_ENDPOINTS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;https://172.30.33.90:2379,https://172.30.33.91:2379,https://172.30.33.92:2379 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
-e &lt;span class=&quot;nv&quot;&gt;ETCD_CA_CERT_FILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/etc/calico/certs/ca_cert.crt &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
-e &lt;span class=&quot;nv&quot;&gt;ETCD_CERT_FILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/etc/calico/certs/cert.crt &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
-e &lt;span class=&quot;nv&quot;&gt;ETCD_KEY_FILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/etc/calico/certs/key.pem &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
-v /usr/bin/docker:/usr/bin/docker &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
-v /var/run/docker.sock:/var/run/docker.sock &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
-v /var/run/calico:/var/run/calico &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
-v /etc/calico/certs:/etc/calico/certs:ro &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
--memory&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;170M --cpu-shares&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;100 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
calico/ctl:v1.1.0 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$@&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;calico-nodeservice&quot;&gt;calico-node.service&lt;/h3&gt;
&lt;p&gt;这个系统服务，其实就是启动一个容器&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Unit]
&lt;span class=&quot;nv&quot;&gt;Description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;calico-node
&lt;span class=&quot;nv&quot;&gt;After&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;docker.service
&lt;span class=&quot;nv&quot;&gt;Requires&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;docker.service

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Service]
&lt;span class=&quot;nv&quot;&gt;EnvironmentFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/etc/calico/calico.env
&lt;span class=&quot;nv&quot;&gt;ExecStartPre&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;-/usr/bin/docker rm -f calico-node
&lt;span class=&quot;nv&quot;&gt;ExecStart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/bin/docker run --net&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;host --privileged &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 --name&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;calico-node &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 -e &lt;span class=&quot;nv&quot;&gt;HOSTNAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CALICO_HOSTNAME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 -e &lt;span class=&quot;nv&quot;&gt;IP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CALICO_IP&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 -e &lt;span class=&quot;nv&quot;&gt;IP6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CALICO_IP6&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 -e &lt;span class=&quot;nv&quot;&gt;CALICO_NETWORKING_BACKEND&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CALICO_NETWORKING_BACKEND&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 -e &lt;span class=&quot;nv&quot;&gt;FELIX_DEFAULTENDPOINTTOHOSTACTION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;RETURN &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 -e &lt;span class=&quot;nv&quot;&gt;AS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CALICO_AS&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 -e &lt;span class=&quot;nv&quot;&gt;NO_DEFAULT_POOLS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CALICO_NO_DEFAULT_POOLS&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 -e &lt;span class=&quot;nv&quot;&gt;CALICO_LIBNETWORK_ENABLED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CALICO_LIBNETWORK_ENABLED&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 -e &lt;span class=&quot;nv&quot;&gt;ETCD_ENDPOINTS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ETCD_ENDPOINTS&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 -e &lt;span class=&quot;nv&quot;&gt;ETCD_CA_CERT_FILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ETCD_CA_CERT_FILE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 -e &lt;span class=&quot;nv&quot;&gt;ETCD_CERT_FILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ETCD_CERT_FILE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 -e &lt;span class=&quot;nv&quot;&gt;ETCD_KEY_FILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ETCD_KEY_FILE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 -v /var/log/calico:/var/log/calico &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 -v /run/docker/plugins:/run/docker/plugins &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 -v /lib/modules:/lib/modules &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 -v /var/run/calico:/var/run/calico &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 -v /etc/calico/certs:/etc/calico/certs:ro &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 --memory&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;500M --cpu-shares&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;300 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
 calico/node:v1.1.0

&lt;span class=&quot;nv&quot;&gt;Restart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;always
&lt;span class=&quot;nv&quot;&gt;RestartSec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;10s

&lt;span class=&quot;nv&quot;&gt;ExecStop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;-/usr/bin/docker stop calico-node

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Install]
&lt;span class=&quot;nv&quot;&gt;WantedBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;multi-user.target
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;calicoenv-文件&quot;&gt;calico.env 文件&lt;/h3&gt;
&lt;p&gt;系统服务所需的环境变量信息&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;ETCD_ENDPOINTS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://172.30.33.90:2379,https://172.30.33.91:2379,https://172.30.33.92:2379&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ETCD_CA_CERT_FILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/etc/calico/certs/ca_cert.crt&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ETCD_CERT_FILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/etc/calico/certs/cert.crt&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ETCD_KEY_FILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/etc/calico/certs/key.pem&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;CALICO_IP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;172.30.33.90&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;CALICO_IP6&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;CALICO_NO_DEFAULT_POOLS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;true&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;CALICO_LIBNETWORK_ENABLED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;true&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;CALICO_HOSTNAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;k8s-master01&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;10-calicoconf&quot;&gt;10-calico.conf&lt;/h3&gt;
&lt;p&gt;Calico CNI插件需要有一个标准的CNI配置文件&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;calico-k8s-network&quot;&lt;/span&gt;,
  &lt;span class=&quot;s2&quot;&gt;&quot;hostname&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;k8s-master01&quot;&lt;/span&gt;,
  &lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;calico&quot;&lt;/span&gt;,
  &lt;span class=&quot;s2&quot;&gt;&quot;etcd_endpoints&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;https://172.30.33.90:2379,https://172.30.33.91:2379,https://172.30.33.92:2379&quot;&lt;/span&gt;,
  &lt;span class=&quot;s2&quot;&gt;&quot;etcd_cert_file&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;/etc/ssl/etcd/ssl/node-node1.pem&quot;&lt;/span&gt;,
  &lt;span class=&quot;s2&quot;&gt;&quot;etcd_key_file&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;/etc/ssl/etcd/ssl/node-node1-key.pem&quot;&lt;/span&gt;,
  &lt;span class=&quot;s2&quot;&gt;&quot;etcd_ca_cert_file&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;/etc/ssl/etcd/ssl/ca.pem&quot;&lt;/span&gt;,
  &lt;span class=&quot;s2&quot;&gt;&quot;log_level&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;info&quot;&lt;/span&gt;,
  &lt;span class=&quot;s2&quot;&gt;&quot;ipam&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;type&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;calico-ipam&quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;,
  &lt;span class=&quot;s2&quot;&gt;&quot;kubernetes&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;kubeconfig&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;/etc/kubernetes/node-kubeconfig.yaml&quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;安装步骤-1&quot;&gt;安装步骤&lt;/h2&gt;

&lt;p&gt;安装步骤也很简单&lt;/p&gt;

&lt;p&gt;1.首先将hyperkube和calico/cni镜像中的CNI插件拷贝到宿主机本地的/opt/cni/bin/目录下
2.将和etcd通信的证书配置好
3.将calicoctl,calico.env,10-calico.conf文件配置好放到指定的目录
4.将calico-node配置成systemd管理的系统服务
5.配置kubelet和kube-proxy&lt;/p&gt;
&lt;h1 id=&quot;kubelet-service&quot;&gt;kubelet service&lt;/h1&gt;

&lt;h2 id=&quot;主要文件-2&quot;&gt;主要文件&lt;/h2&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/usr/local/bin/kubelet &lt;span class=&quot;c&quot;&gt;# 启动kubelet的shell脚本文件&lt;/span&gt;
/usr/local/bin/kubectl &lt;span class=&quot;c&quot;&gt;# kubectl二进制文件&lt;/span&gt;
/etc/systemd/system/kubelet.service &lt;span class=&quot;c&quot;&gt;# kubelet 的service文件&lt;/span&gt;
/etc/kubernetes/kubelet.env &lt;span class=&quot;c&quot;&gt;# kubelet service相关的环境文件&lt;/span&gt;
/etc/kubernetes/ssl &lt;span class=&quot;c&quot;&gt;# kubernetes证书文件存放目录&lt;/span&gt;
/etc/kubernetes/openssl.conf &lt;span class=&quot;c&quot;&gt;# 生成kubernetes证书所依赖的openssl文件&lt;/span&gt;
/usr/local/bin/kubernetes-scripts/ &lt;span class=&quot;c&quot;&gt;# 生成证书文件的shell脚本&lt;/span&gt;
/etc/kubernetes/node-kubeconfig.yaml &lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;kubelet-shell-脚本&quot;&gt;kubelet shell 脚本&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;vim /usr/local/bin/kubelet
&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
/usr/bin/docker run &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  --net&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;host &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  --pid&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;host &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  --privileged &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  --name&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;kubelet &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  --restart&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;on-failure:5 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  --memory&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;512M &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  --cpu-shares&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;100 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  -v /dev:/dev:rw &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  -v /etc/cni:/etc/cni:ro &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  -v /opt/cni:/opt/cni:ro &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  -v /etc/ssl:/etc/ssl:ro &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  -v /etc/resolv.conf:/etc/resolv.conf &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  -v /etc/pki/tls:/etc/pki/tls:ro &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  -v /etc/pki/ca-trust:/etc/pki/ca-trust:ro &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  -v /sys:/sys:ro &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  -v /var/lib/docker:/var/lib/docker:rw &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  -v /var/log:/var/log:rw &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  -v /var/lib/kubelet:/var/lib/kubelet:shared &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  -v /var/lib/cni:/var/lib/cni:shared &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  -v /var/run:/var/run:rw &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  -v /etc/kubernetes:/etc/kubernetes:ro &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  quay.io/coreos/hyperkube:v1.6.1_coreos.0 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  ./hyperkube kubelet &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$@&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;kubeletservice-文件&quot;&gt;kubelet.service 文件&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;vim /etc/systemd/system/kubelet.service
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Unit]
&lt;span class=&quot;nv&quot;&gt;Description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Kubernetes Kubelet Server
&lt;span class=&quot;nv&quot;&gt;Documentation&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;https://github.com/GoogleCloudPlatform/kubernetes
&lt;span class=&quot;nv&quot;&gt;After&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;docker.service docker.socket calico-node.service
&lt;span class=&quot;nv&quot;&gt;Wants&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;docker.socket calico-node.service

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Service]
&lt;span class=&quot;nv&quot;&gt;EnvironmentFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/etc/kubernetes/kubelet.env
&lt;span class=&quot;nv&quot;&gt;ExecStart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/local/bin/kubelet &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;$KUBE_LOGTOSTDERR&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;$KUBE_LOG_LEVEL&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;$KUBELET_API_SERVER&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;$KUBELET_ADDRESS&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;$KUBELET_PORT&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;$KUBELET_HOSTNAME&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;$KUBE_ALLOW_PRIV&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;$KUBELET_ARGS&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;$DOCKER_SOCKET&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;$KUBELET_NETWORK_PLUGIN&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;$KUBELET_CLOUDPROVIDER&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ExecStartPre&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;-/usr/bin/docker rm -f kubelet
&lt;span class=&quot;nv&quot;&gt;ExecReload&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/bin/docker restart kubelet
&lt;span class=&quot;nv&quot;&gt;Restart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;always
&lt;span class=&quot;nv&quot;&gt;RestartSec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;10s

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Install]
&lt;span class=&quot;nv&quot;&gt;WantedBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;multi-user.target
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;kubeletenv&quot;&gt;kubelet.env&lt;/h3&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;vim /etc/kubernetes/kubelet.env
&lt;span class=&quot;c&quot;&gt;# logging to stderr means we get it in the systemd journal&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;KUBE_LOGGING&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--logtostderr=true&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;KUBE_LOG_LEVEL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--v=2&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# The address for the info server to serve on (set to 0.0.0.0 or &quot;&quot; for all interfaces)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;KUBELET_ADDRESS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--address=172.30.33.90&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# The port for the info server to serve on&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# KUBELET_PORT=&quot;--port=10250&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# You may leave this blank to use the actual hostname&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;KUBELET_HOSTNAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--hostname-override=k8s-master01&quot;&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;KUBELET_ARGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--pod-manifest-path=/etc/kubernetes/manifests &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
--pod-infra-container-image=gcr.io/google_containers/pause-amd64:3.0 &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
--kube-reserved cpu=100m,memory=512M &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
--node-status-update-frequency=10s &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
--enable-cri=False --cgroups-per-qos=False &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
--enforce-node-allocatable=''  --cluster_dns=10.233.0.2 --cluster_domain=cluster.local --resolv-conf=/etc/resolv.conf --kubeconfig=/etc/kubernetes/node-kubeconfig.yaml --require-kubeconfig --node-labels=node-role.kubernetes.io/master=true,node-role.kubernetes.io/node=true&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;KUBELET_NETWORK_PLUGIN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--network-plugin=cni --network-plugin-dir=/etc/cni/net.d --cni-bin-dir=/opt/cni/bin&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Should this cluster be allowed to run privileged docker containers&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;KUBE_ALLOW_PRIV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--allow-privileged=true&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;KUBELET_CLOUDPROVIDER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;node-kubeconfigyaml&quot;&gt;node-kubeconfig.yaml&lt;/h3&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Config&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;clusters&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;local&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;cluster&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;certificate-authority&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/etc/kubernetes/ssl/ca.pem&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;http://127.0.0.1:8080&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;users&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kubelet&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;client-certificate&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/etc/kubernetes/ssl/node-node1.pem&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;client-key&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/etc/kubernetes/ssl/node-node1-key.pem&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;contexts&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;cluster&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;local&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kubelet&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kubelet-cluster.local&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;current-context&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kubelet-cluster.local&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;kubernetes-manifest文件&quot;&gt;kubernetes manifest文件&lt;/h1&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/etc/kubernetes/manifests
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;ls -l
-rw-r--r--. 1 root root 2234 Apr 12 15:26 kube-apiserver.manifest
-rw-r--r--. 1 root root 1331 Apr 12 15:26 kube-controller-manager.manifest
-rw-r--r--. 1 root root 1319 Apr 12 15:23 kube-proxy.manifest
-rw-r--r--. 1 root root  708 Apr 12 15:26 kube-scheduler.manifest
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;我们知道在kubernetes中，/etc/kubernetes/manifests 目录下的文件，会由kubelet来在文件所在的节点生成static pod，下面看看每个文件的详细信息。&lt;/p&gt;

&lt;h2 id=&quot;kube-apiservermanifest&quot;&gt;kube-apiserver.manifest&lt;/h2&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Pod&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kube-apiserver&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kube-system&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;k8s-app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kube-apiserver&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;kargo&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v2&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;hostNetwork&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;dnsPolicy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ClusterFirstWithHostNet&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;containers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kube-apiserver&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;quay.io/coreos/hyperkube:v1.6.1_coreos.0&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;imagePullPolicy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;IfNotPresent&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;resources&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;limits&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;cpu&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;800m&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;memory&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;2000M&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;cpu&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;100m&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;memory&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;256M&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/hyperkube&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;apiserver&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;--advertise-address=172.30.33.90&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;--etcd-servers=https://172.30.33.90:2379,https://172.30.33.91:2379,https://172.30.33.92:2379&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;--etcd-quorum-read=true&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# etcd 证书认证&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;--etcd-cafile=/etc/ssl/etcd/ssl/ca.pem&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;--etcd-certfile=/etc/ssl/etcd/ssl/node-node1.pem&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;--etcd-keyfile=/etc/ssl/etcd/ssl/node-node1-key.pem&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;--insecure-bind-address=127.0.0.1&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;--apiserver-count=3&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;--admission-control=NamespaceLifecycle,LimitRanger,ServiceAccount,DefaultStorageClass,ResourceQuota&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;--service-cluster-ip-range=10.233.0.0/18&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;--service-node-port-range=30000-32767&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# kubernetes apiserver证书认证&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;--client-ca-file=/etc/kubernetes/ssl/ca.pem&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;--tls-cert-file=/etc/kubernetes/ssl/apiserver.pem&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;--tls-private-key-file=/etc/kubernetes/ssl/apiserver-key.pem&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# token auth认证&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;--token-auth-file=/etc/kubernetes/tokens/known_tokens.csv&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;--basic-auth-file=/etc/kubernetes/users/known_users.csv&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# service account&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;--service-account-key-file=/etc/kubernetes/ssl/apiserver-key.pem&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;--secure-port=6443&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;--insecure-port=8080&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;--storage-backend=etcd3&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;--v=2&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;--allow-privileged=true&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;--anonymous-auth=False&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;livenessProbe&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;httpGet&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;127.0.0.1&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/healthz&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;8080&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;initialDelaySeconds&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;30&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;timeoutSeconds&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;10&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;volumeMounts&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mountPath&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/etc/kubernetes&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kubernetes-config&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;readOnly&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mountPath&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/etc/ssl/certs&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ssl-certs-host&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;readOnly&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mountPath&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/etc/ssl/etcd/ssl&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;etcd-certs&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;readOnly&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;hostPath&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/etc/kubernetes&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kubernetes-config&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;hostPath&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/etc/ssl/certs/&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ssl-certs-host&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;hostPath&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/etc/ssl/etcd/ssl&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;etcd-certs&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;kube-controller-managermanifest&quot;&gt;kube-controller-manager.manifest&lt;/h2&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Pod&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kube-controller-manager&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kube-system&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;k8s-app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kube-controller&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;hostNetwork&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;dnsPolicy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ClusterFirstWithHostNet&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;containers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kube-controller-manager&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;quay.io/coreos/hyperkube:v1.6.1_coreos.0&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;imagePullPolicy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;IfNotPresent&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;resources&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;limits&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;cpu&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;250m&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;memory&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;512M&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;cpu&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;100m&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;memory&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;100M&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/hyperkube&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;controller-manager&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# master ip&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;--master=http://127.0.0.1:8080&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;--leader-elect=true&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;--service-account-private-key-file=/etc/kubernetes/ssl/apiserver-key.pem&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 集群范围内的证书&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;--root-ca-file=/etc/kubernetes/ssl/ca.pem&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;--cluster-signing-cert-file=/etc/kubernetes/ssl/ca.pem&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;--cluster-signing-key-file=/etc/kubernetes/ssl/ca-key.pem&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;--enable-hostpath-provisioner=false&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;--node-monitor-grace-period=40s&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;--node-monitor-period=5s&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;--pod-eviction-timeout=5m0s&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;--v=2&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;livenessProbe&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;httpGet&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;127.0.0.1&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/healthz&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;10252&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;initialDelaySeconds&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;30&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;timeoutSeconds&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;10&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;volumeMounts&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mountPath&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/etc/kubernetes/ssl&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ssl-certs-kubernetes&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;readOnly&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mountPath&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/etc/ssl/certs&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ssl-certs-host&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;readOnly&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;hostPath&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/etc/kubernetes/ssl&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ssl-certs-kubernetes&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;hostPath&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/etc/ssl/certs&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ssl-certs-host&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;kube-schedulermanifest&quot;&gt;kube-scheduler.manifest&lt;/h2&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Pod&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kube-scheduler&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kube-system&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;k8s-app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kube-scheduler&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;hostNetwork&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;dnsPolicy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ClusterFirstWithHostNet&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;containers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kube-scheduler&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;quay.io/coreos/hyperkube:v1.6.1_coreos.0&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;imagePullPolicy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;IfNotPresent&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;resources&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;limits&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;cpu&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;250m&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;memory&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;512M&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;cpu&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;80m&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;memory&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;170M&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/hyperkube&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;scheduler&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;--leader-elect=true&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;--master=http://127.0.0.1:8080&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;--v=2&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;livenessProbe&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;httpGet&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;127.0.0.1&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/healthz&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;10251&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;initialDelaySeconds&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;30&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;timeoutSeconds&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;10&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;kube-proxymanifest&quot;&gt;kube-proxy.manifest&lt;/h2&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Pod&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kube-proxy&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kube-system&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;k8s-app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kube-proxy&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;hostNetwork&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;dnsPolicy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ClusterFirstWithHostNet&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;containers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kube-proxy&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;quay.io/coreos/hyperkube:v1.6.1_coreos.0&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;imagePullPolicy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;IfNotPresent&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;resources&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;limits&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;cpu&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;500m&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;memory&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;2000M&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;cpu&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;150m&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;memory&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;64M&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/hyperkube&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;proxy&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;--v=2&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;--master=http://127.0.0.1:8080&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;--bind-address=172.30.33.90&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;--cluster-cidr=10.233.64.0/18&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;--proxy-mode=iptables&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;securityContext&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;privileged&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;volumeMounts&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mountPath&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/etc/ssl/certs&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ssl-certs-host&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;readOnly&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mountPath&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/etc/kubernetes/node-kubeconfig.yaml&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;kubeconfig&quot;&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;readOnly&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mountPath&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/etc/kubernetes/ssl&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;etc-kube-ssl&quot;&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;readOnly&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mountPath&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/var/run/dbus&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;var-run-dbus&quot;&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;readOnly&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;false&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ssl-certs-host&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;hostPath&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/etc/pki/tls&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;kubeconfig&quot;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;hostPath&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/etc/kubernetes/node-kubeconfig.yaml&quot;&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;etc-kube-ssl&quot;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;hostPath&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/etc/kubernetes/ssl&quot;&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;var-run-dbus&quot;&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;hostPath&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/var/run/dbus&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;生成证书&quot;&gt;生成证书&lt;/h1&gt;
&lt;blockquote&gt;
  &lt;p&gt;上面的文件都配置好后，我们就需要生正认证所需的证书了，以前看过漠神的一篇&lt;a href=&quot;https://mritd.me/2016/09/11/kubernetes-%E5%8F%8C%E5%90%91-TLS-%E9%85%8D%E7%BD%AE/&quot;&gt;kubernetes双向TSL认证&lt;/a&gt;，有兴趣的可以去看下，说实话证书这块，我也不是很懂。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;生成etcd证书&quot;&gt;生成etcd证书&lt;/h2&gt;

&lt;h3 id=&quot;修改make-ssl-etcdsh脚本&quot;&gt;修改&lt;code class=&quot;highlighter-rouge&quot;&gt;make-ssl-etcd.sh&lt;/code&gt;脚本&lt;/h3&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 在脚本开头加上&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;MASTERS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=(&lt;/span&gt;node1 node2 node3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;HOSTS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=(&lt;/span&gt;node1 node2 node3 node4 node5&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 修改ETCD member的for循环语句，修改成下面这样&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;host &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;MASTERS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[*]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 修改Node keys的for循环语句，修改成下面这样&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;host &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;HOSTS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[*]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h3 id=&quot;生成证书-1&quot;&gt;生成证书&lt;/h3&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /usr/local/bin/etcd-scripts/
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;./make-ssl-etcd.sh -f /etc/ssl/etcd/openssl.conf -d ~/certs/etcd/
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;chown kube.root ~/certs/etcd/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;chmod 700 ~/certs/etcd/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;生成kubernetes证书&quot;&gt;生成kubernetes证书&lt;/h2&gt;

&lt;h3 id=&quot;修改make-sslsh脚本&quot;&gt;修改&lt;code class=&quot;highlighter-rouge&quot;&gt;make-ssl.sh&lt;/code&gt;脚本&lt;/h3&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 在脚本开头加上&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;MASTERS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=(&lt;/span&gt;node1 node2 node3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;HOSTS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=(&lt;/span&gt;node1 node2 node3 node4 node5&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 修改ETCD member的for循环语句，修改成下面这样&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;host &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;MASTERS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[*]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 修改Node keys的for循环语句，修改成下面这样&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;host &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;HOSTS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[*]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;生成证书-2&quot;&gt;生成证书&lt;/h3&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /usr/local/bin/kubernetes-scripts/
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;./make-ssl.sh -f /etc/kubernetes/openssl.conf -d ~/certs/kubernetes/
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;chown kube.kube-cert ~/certs/kubernetes/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;chmod 600 ~/certs/kubernetes/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;node节点上的主要文件&quot;&gt;node节点上的主要文件&lt;/h1&gt;

&lt;p&gt;以后所有节点就按照这个来改就行了&lt;/p&gt;

&lt;p&gt;/etc/kubernetes/kubelet.env
/etc/kubernetes/node-kubeconfig.yaml
/etc/kubernetes/manifests/kube-proxy.manifest
/etc/kubernetes/manifests/nginx-proxy.yml&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; 最后要重点注意一下，kargo会在node节点上配置单独的nginx反向代理，代理到apiserver集群，而node-kubeconfig.yaml和kube-proxy.manifest文件的内容需要修改一下&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;node-kubeconfigyaml-1&quot;&gt;node-kubeconfig.yaml&lt;/h2&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apiVersion: v1
kind: Config
clusters:
- name: &lt;span class=&quot;nb&quot;&gt;local
  &lt;/span&gt;cluster:
    certificate-authority: /etc/kubernetes/ssl/ca.pem
    &lt;span class=&quot;c&quot;&gt;# server: https://172.30.33.90:6443 默认生成的&lt;/span&gt;
    server: https://127.0.0.1:6443 &lt;span class=&quot;c&quot;&gt;#修改成这样，因为本地节点上的nginx反向代理是监听的这个地址，这样就确保了高可用&lt;/span&gt;
    ...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;kube-proxymanifest-1&quot;&gt;kube-proxy.manifest&lt;/h2&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apiVersion: v1
...
  &lt;span class=&quot;c&quot;&gt;# - --master=https://172.30.33.90:6443 默认生成&lt;/span&gt;
    - --master&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;https://127.0.0.1:6443
    - --kubeconfig&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/etc/kubernetes/node-kubeconfig.yaml
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;至此， 基本上可以搭建一个基础的HA kubernetes 集群了，下一章将主要讲解如何配置一些常用插件&lt;/p&gt;</content><author><name>KevinGuo</name></author><summary type="html">上一篇已经使用kargo搭建了kubernetes高可用集群，这里重点通过剥析kargo生成的配置文件来更加细化的了解下kubernetes，方便后期对kubernetes的自定义。所有的配置文件，我会放到github上</summary></entry><entry><title type="html">kargo容器化部署kubernetes高可用集群(1)</title><link href="https://kevinguo.me/2017/07/06/kargo%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2kubernetes%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4(1)/" rel="alternate" type="text/html" title="kargo容器化部署kubernetes高可用集群(1)" /><published>2017-07-06T00:00:00+08:00</published><updated>2017-07-06T00:00:00+08:00</updated><id>https://kevinguo.me/2017/07/06/kargo%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2kubernetes%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4(1)</id><content type="html" xml:base="https://kevinguo.me/2017/07/06/kargo%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2kubernetes%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A4(1)/">&lt;blockquote&gt;
  &lt;p&gt;捣鼓kubernetes有一段时间了，先后用过&lt;code class=&quot;highlighter-rouge&quot;&gt;yum&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;kubeadm&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;custom&lt;/code&gt;等方式，但都不尽如人意，不是缺胳膊就是短腿，后来有幸翻到&lt;a href=&quot;https://mritd.me/&quot;&gt;漠然&lt;/a&gt;大神的&lt;a href=&quot;https://mritd.me/2017/03/03/set-up-kubernetes-ha-cluster-by-kargo/&quot;&gt;快速部署kubernetes高可用集群&lt;/a&gt;，并且请教了无数次才最终搭建成功，在此，再次膜拜漠然大神，同时该篇blog也参考了漠神的的博客，主要是为了记录下来，方便以后查看。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!--more--&gt;
&lt;h1 id=&quot;一基础环境&quot;&gt;一、基础环境&lt;/h1&gt;

&lt;h2 id=&quot;1准备好要部署的机器&quot;&gt;1.准备好要部署的机器&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;IP&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;ROLE&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;172.30.33.89&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;k8s-registry-lb&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;172.30.33.90&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;k8s-master01-etcd01&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;172.30.33.91&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;k8s-master02-etcd02&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;172.30.33.92&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;k8s-master03-etcd03&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;172.30.33.93&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;k8s-node01-ingress01&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;172.30.33.94&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;k8s-node02-ingress02&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;192.168.1.1&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;ansible-client&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;2准备部署机器-ansible-client&quot;&gt;2.准备部署机器 &lt;a href=&quot;http://www.oo3p.com/2017/04/17/ansible-client/&quot;&gt;ansible-client&lt;/a&gt;&lt;/h2&gt;

&lt;h2 id=&quot;3准备所需要镜像由于被墙所需镜像可以在百度云去下载点击这里&quot;&gt;3.准备所需要镜像,由于被墙，所需镜像可以在百度云去下载，&lt;a href=&quot;http://pan.baidu.com/s/1i5sUzmH&quot;&gt;点击这里&lt;/a&gt;&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;IMAGE&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;VERSION&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;quay.io/coreos/hyperkube&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;v1.6.1_coreos.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;quay.io/coreos/etcd&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;v3.1.5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;calico/ctl&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;v1.1.0-rc8&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;calico/node&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;v1.1.0-rc8&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;calico/cni&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;v1.5.6&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;gcr.io/google_containers/kubernetes-dashboard-amd64&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;v1.6.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;gcr.io/google_containers/nginx-ingress-controller&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;0.9.0-beta.3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;gcr.io/google_containers/defaultbackend&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;1.0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;gcr.io/google_containers/cluster-proportional-autoscaler-amd64&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;1.1.1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;gcr.io/google_containers/fluentd-elasticsearch&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;1.22&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;gcr.io/google_containers/kibana&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;v4.6.1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;gcr.io/google_containers/elasticsearch&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;v2.4.1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;gcr.io/google_containers/kubedns-amd64&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;1.9&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;gcr.io/google_containers/kube-dnsmasq-amd64&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;1.3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;gcr.io/google_containers/exechealthz-amd64&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;1.1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;andyshinn/dnsmasq&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;2.72&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;nginx&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;1.11.4-alpine&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;gcr.io/google_containers/heapster-grafana-amd64&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;v4.0.2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;gcr.io/google_containers/heapster-amd64&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;v1.3.0-beta.1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;gcr.io/google_containers/heapster-influxdb-amd64&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;v1.1.1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;gcr.io/google_containers/pause-amd64&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;3.0&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;4load所有下载的镜像&quot;&gt;4.load所有下载的镜像&lt;/h2&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 在ansible-client上操作&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=(&lt;/span&gt;172.30.33.89 172.30.33.90 172.30.33.91 172.30.33.92 172.30.33.93 172.30.33.94&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;i &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[*]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;do &lt;/span&gt;scp -r kargo_images_v1.6.1 &lt;span class=&quot;nv&quot;&gt;$i&lt;/span&gt;:~/; &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 对所有要部署的节点操作&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;ls -l ~/kargo_images_v1.6.1|awk -F&lt;span class=&quot;s1&quot;&gt;' '&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'{ print $9 }'&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;x &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;images&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[*]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;do &lt;/span&gt;docker load -i &lt;span class=&quot;nv&quot;&gt;$x&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h1 id=&quot;二搭建集群&quot;&gt;二、搭建集群&lt;/h1&gt;

&lt;h2 id=&quot;1获取kargo源码&quot;&gt;1.获取kargo源码&lt;/h2&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;git clone https://github.com/kubernetes-incubator/kargo.git
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;2编辑配置文件&quot;&gt;2.编辑配置文件&lt;/h2&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;vim ~/kargo/inventory/group_vars/k8s-cluster.yml

---
&lt;span class=&quot;c&quot;&gt;# 启动集群的基础系统,支持ubuntu, coreos, centos, none&lt;/span&gt;
bootstrap_os: centos

&lt;span class=&quot;c&quot;&gt;# etcd数据存放位置&lt;/span&gt;
etcd_data_dir: /var/lib/etcd

&lt;span class=&quot;c&quot;&gt;# kubernetes所需二进制文件将要安装的位置&lt;/span&gt;
bin_dir: /usr/local/bin

&lt;span class=&quot;c&quot;&gt;# kubrnetes配置文件存放目录&lt;/span&gt;
kube_config_dir: /etc/kubernetes
&lt;span class=&quot;c&quot;&gt;# 生成证书和token的脚本的存放位置&lt;/span&gt;
kube_script_dir: &lt;span class=&quot;s2&quot;&gt;&quot;{ { bin_dir } }/kubernetes-scripts&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# kubernetes manifest文件存放目录&lt;/span&gt;
kube_manifest_dir: &lt;span class=&quot;s2&quot;&gt;&quot;{ { kube_config_dir } }/manifests&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# kubernetes 命名空间&lt;/span&gt;
system_namespace: kube-system

&lt;span class=&quot;c&quot;&gt;# 日志存放位置&lt;/span&gt;
kube_log_dir: &lt;span class=&quot;s2&quot;&gt;&quot;/var/log/kubernetes&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# kubernetes证书存放位置&lt;/span&gt;
kube_cert_dir: &lt;span class=&quot;s2&quot;&gt;&quot;{ { kube_config_dir } }/ssl&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# kubernetes token存放位置&lt;/span&gt;
kube_token_dir: &lt;span class=&quot;s2&quot;&gt;&quot;{ { kube_config_dir } }/tokens&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# basic auth 认证文件存放位置&lt;/span&gt;
kube_users_dir: &lt;span class=&quot;s2&quot;&gt;&quot;{ { kube_config_dir } }/users&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 关闭匿名授权&lt;/span&gt;
kube_api_anonymous_auth: &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;## kubernetes使用版本&lt;/span&gt;
kube_version: v1.6.1

&lt;span class=&quot;c&quot;&gt;# 安装过程中缓存文件下载位置(最少1G)&lt;/span&gt;
local_release_dir: &lt;span class=&quot;s2&quot;&gt;&quot;/tmp/releases&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 重试次数，比如下载失败等情况&lt;/span&gt;
retry_stagger: 5

&lt;span class=&quot;c&quot;&gt;# 证书组&lt;/span&gt;
kube_cert_group: kube-cert

&lt;span class=&quot;c&quot;&gt;# 集群日志等级&lt;/span&gt;
kube_log_level: 2

&lt;span class=&quot;c&quot;&gt;# HTTP下api server的basic auth认证用户名密码&lt;/span&gt;
kube_api_pwd: &lt;span class=&quot;s2&quot;&gt;&quot;test123&quot;&lt;/span&gt;
kube_users:
  kube:
    pass: &lt;span class=&quot;s2&quot;&gt;&quot;{ {kube_api_pwd} }&quot;&lt;/span&gt;
    role: admin
  root:
    pass: &lt;span class=&quot;s2&quot;&gt;&quot;{ {kube_api_pwd} }&quot;&lt;/span&gt;
    role: admin



&lt;span class=&quot;c&quot;&gt;## 开关认证 (basic auth, static token auth)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#kube_oidc_auth: false&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#kube_basic_auth: false&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#kube_token_auth: false&lt;/span&gt;


&lt;span class=&quot;c&quot;&gt;## Variables for OpenID Connect Configuration https://kubernetes.io/docs/admin/authentication/&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;## To use OpenID you have to deploy additional an OpenID Provider (e.g Dex, Keycloak, ...)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# kube_oidc_url: https:// ...&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# kube_oidc_client_id: kubernetes&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;## Optional settings for OIDC&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# kube_oidc_ca_file: { { kube_cert_dir } }/ca.pem&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# kube_oidc_username_claim: sub&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# kube_oidc_groups_claim: groups&lt;/span&gt;


&lt;span class=&quot;c&quot;&gt;# 网络插件 (calico, weave or flannel)&lt;/span&gt;
kube_network_plugin: calico

&lt;span class=&quot;c&quot;&gt;# 开启 kubernetes network policies&lt;/span&gt;
enable_network_policy: &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Kubernetes 服务的地址范围.&lt;/span&gt;
kube_service_addresses: 10.233.0.0/18

&lt;span class=&quot;c&quot;&gt;# pod 地址范围&lt;/span&gt;
kube_pods_subnet: 10.233.64.0/18

&lt;span class=&quot;c&quot;&gt;# 网络节点大小分配&lt;/span&gt;
kube_network_node_prefix: 24

&lt;span class=&quot;c&quot;&gt;# api server 监听地址及端口&lt;/span&gt;
kube_apiserver_ip: &lt;span class=&quot;s2&quot;&gt;&quot;{ { kube_service_addresses|ipaddr('net')|ipaddr(1)|ipaddr('address') } }&quot;&lt;/span&gt;
kube_apiserver_port: 6443 &lt;span class=&quot;c&quot;&gt;# (https)&lt;/span&gt;
kube_apiserver_insecure_port: 8080 &lt;span class=&quot;c&quot;&gt;# (http)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 默认dns后缀&lt;/span&gt;
cluster_name: cluster.local
&lt;span class=&quot;c&quot;&gt;# 为使用主机网络的pods使用/etc/resolv.conf解析DNS的子域&lt;/span&gt;
ndots: 2
&lt;span class=&quot;c&quot;&gt;# DNS 组件dnsmasq_kubedns/kubedns&lt;/span&gt;
dns_mode: dnsmasq_kubedns
&lt;span class=&quot;c&quot;&gt;# dns模式，可以是 docker_dns, host_resolvconf or none&lt;/span&gt;
resolvconf_mode: docker_dns
&lt;span class=&quot;c&quot;&gt;# 部署netchecker来检测DNS和HTTP状态&lt;/span&gt;
deploy_netchecker: &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# skydns service IP配置&lt;/span&gt;
skydns_server: &lt;span class=&quot;s2&quot;&gt;&quot;{ { kube_service_addresses|ipaddr('net')|ipaddr(3)|ipaddr('address') } }&quot;&lt;/span&gt;
dns_server: &lt;span class=&quot;s2&quot;&gt;&quot;{ { kube_service_addresses|ipaddr('net')|ipaddr(2)|ipaddr('address') } }&quot;&lt;/span&gt;
dns_domain: &lt;span class=&quot;s2&quot;&gt;&quot;{ { cluster_name } }&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# docker 存储目录&lt;/span&gt;
docker_daemon_graph: &lt;span class=&quot;s2&quot;&gt;&quot;/var/lib/docker&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;## A string of extra options to pass to the docker daemon.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;## This string should be exactly as you wish it to appear.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;## An obvious use case is allowing insecure-registry access&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;## to self hosted registries like so:&lt;/span&gt;
docker_options: &lt;span class=&quot;s2&quot;&gt;&quot;--insecure-registry={ { kube_service_addresses } } --graph={ { docker_daemon_graph } } --iptables=false --storage-driver=devicemapper&quot;&lt;/span&gt;
docker_bin_dir: &lt;span class=&quot;s2&quot;&gt;&quot;/usr/bin&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 组件部署方式&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Settings for containerized control plane (etcd/kubelet/secrets)&lt;/span&gt;
etcd_deployment_type: docker
kubelet_deployment_type: docker
cert_management: script
vault_deployment_type: docker

&lt;span class=&quot;c&quot;&gt;# K8s image pull policy (imagePullPolicy)&lt;/span&gt;
k8s_image_pull_policy: IfNotPresent

&lt;span class=&quot;c&quot;&gt;# Monitoring apps for k8s&lt;/span&gt;
efk_enabled: &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Helm deployment&lt;/span&gt;
helm_enabled: &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;3生成集群配置&quot;&gt;3.生成集群配置&lt;/h2&gt;
&lt;p&gt;配置完基本集群参数后，还需要生成一个集群配置文件，用于指定需要在哪几台服务器安装，和指定 master、node 节点分布，以及 etcd 集群等安装在那几台机器上。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 定义集群IP&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;IP&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=(&lt;/span&gt;172.30.33.89 172.30.33.90 172.30.33.91 172.30.33.92 172.30.33.93 172.30.33.94&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 利用kargo自带的python脚本生成配置&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CONFIG_FILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;~/kargo/inventory/inventory.cfg python3 ~/kargo/contrib/inventory_builder/inventory.py &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;p&quot;&gt; IP[*] &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;生成的配置如下，最好是在配置上加上&lt;code class=&quot;highlighter-rouge&quot;&gt;ansible_user=root&lt;/code&gt;,我最开始在搭建的时候没有指定，报错了&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;node1    &lt;span class=&quot;nv&quot;&gt;ansible_user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;root &lt;span class=&quot;nv&quot;&gt;ansible_host&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;172.30.33.90 &lt;span class=&quot;nv&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;172.30.33.90
node2    &lt;span class=&quot;nv&quot;&gt;ansible_user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;root &lt;span class=&quot;nv&quot;&gt;ansible_host&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;172.30.33.91 &lt;span class=&quot;nv&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;172.30.33.91
node3    &lt;span class=&quot;nv&quot;&gt;ansible_user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;root &lt;span class=&quot;nv&quot;&gt;ansible_host&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;172.30.33.92 &lt;span class=&quot;nv&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;172.30.33.92
node4    &lt;span class=&quot;nv&quot;&gt;ansible_user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;root &lt;span class=&quot;nv&quot;&gt;ansible_host&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;172.30.33.93 &lt;span class=&quot;nv&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;172.30.33.93
node5    &lt;span class=&quot;nv&quot;&gt;ansible_user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;root &lt;span class=&quot;nv&quot;&gt;ansible_host&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;172.30.33.94 &lt;span class=&quot;nv&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;172.30.33.94

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;kube-master]
node1
node2
node3

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;kube-node]
node1
node2
node3
node4
node5

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;etcd]
node1
node2
node3

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;k8s-cluster:children]
kube-node
kube-master

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;calico-rr]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;5dockerefketcd配置修改&quot;&gt;5.docker,efk,etcd配置修改&lt;/h2&gt;

&lt;p&gt;提前修改ansbile中有关docker,efk,etcd的配置，因为后面在部署的过程中，ansible会检测docker的版本并下载最新的版本，但是由于墙的原因，导致无法下载，会一直卡在下载的地方，所以这里，我们要提前修改，同时需要升级etcd的版本，默认的3.0.6的版本，存在不稳定因素。&lt;/p&gt;

&lt;p&gt;修改docker配置,将下面关于docker安装的部分全部注释掉&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vim ~/kargo/roles/docker/tasks/main.yml

&lt;span class=&quot;c&quot;&gt;# - name: ensure docker repository public key is installed&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#  action: &quot;{ { docker_repo_key_info.pkg_key } }&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#  args:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#    id: &quot;{ {item} }&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#    keyserver: &quot;{ {docker_repo_key_info.keyserver} }&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#    state: present&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#  register: keyserver_task_result&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#  until: keyserver_task_result|succeeded&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#  retries: 4&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#  delay: &quot;{ { retry_stagger | random + 3 } }&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#  with_items: &quot;{ { docker_repo_key_info.repo_keys } }&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#  when: not (ansible_os_family in [&quot;CoreOS&quot;, &quot;Container Linux by CoreOS&quot;] or is_atomic)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# - name: ensure docker repository is enabled&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#  action: &quot;{ { docker_repo_info.pkg_repo } }&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#  args:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#    repo: &quot;{ {item} }&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#    state: present&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#  with_items: &quot;{ { docker_repo_info.repos } }&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#  when: not (ansible_os_family in [&quot;CoreOS&quot;, &quot;Container Linux by CoreOS&quot;] or is_atomic) and (docker_repo_info.repos|length &amp;gt; 0)&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# - name: Configure docker repository on RedHat/CentOS&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#  template:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#    src: &quot;rh_docker.repo.j2&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#    dest: &quot;/etc/yum.repos.d/docker.repo&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#  when: ansible_distribution in [&quot;CentOS&quot;,&quot;RedHat&quot;] and not is_atomic&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# - name: ensure docker packages are installed&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#  action: &quot;{ { docker_package_info.pkg_mgr } }&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#  args:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#    pkg: &quot;{ {item.name} }&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#    force: &quot;{ {item.force|default(omit)} }&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#    state: present&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#  register: docker_task_result&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#  until: docker_task_result|succeeded&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#  retries: 4&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#  delay: &quot;{ { retry_stagger | random + 3 } }&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#  with_items: &quot;{ { docker_package_info.pkgs } }&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#  notify: restart docker&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#  when: not (ansible_os_family in [&quot;CoreOS&quot;, &quot;Container Linux by CoreOS&quot;] or is_atomic) and (docker_package_info.pkgs|length &amp;gt; 0)&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;修改efk配置，注释掉&lt;code class=&quot;highlighter-rouge&quot;&gt;KIBANA_BASE_URL&lt;/code&gt;这段，否则后面你搭建efk之后，无法访问kibana&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vim ~/kargo/roles/kubernetes-apps/efk/kibana/templates/kibana-deployment.yml.j2

&lt;span class=&quot;c&quot;&gt;#          - name: &quot;KIBANA_BASE_URL&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#            value: &quot;{ { kibana_base_url } }&quot;&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;修改download配置，更改etcd和kubedns版本&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vim ~/kargo/roles/download/defaults/main.yml
etcd_version: v3.1.5
kubedns_version: 1.9
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;6在ansible-client上一键部署&quot;&gt;6.在ansible-client上一键部署&lt;/h2&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;ansible-playbook -i ~/kargo/inventory/inventory.cfg cluster.yml -b -v --private-key&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;~/.ssh/id_rsa
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;部署成功后如下
&lt;img src=&quot;/images/posts/ansible-run.png&quot; alt=&quot;&quot; /&gt;
相关node信息
&lt;img src=&quot;/images/posts/nodes.png&quot; alt=&quot;&quot; /&gt;
相关pod信息
&lt;img src=&quot;/images/posts/pods.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name>KevinGuo</name></author><summary type="html">捣鼓kubernetes有一段时间了，先后用过yum,kubeadm,custom等方式，但都不尽如人意，不是缺胳膊就是短腿，后来有幸翻到漠然大神的快速部署kubernetes高可用集群，并且请教了无数次才最终搭建成功，在此，再次膜拜漠然大神，同时该篇blog也参考了漠神的的博客，主要是为了记录下来，方便以后查看。</summary></entry><entry><title type="html">ansible客户端配置</title><link href="https://kevinguo.me/2017/07/06/ansible-client/" rel="alternate" type="text/html" title="ansible客户端配置" /><published>2017-07-06T00:00:00+08:00</published><updated>2017-07-06T00:00:00+08:00</updated><id>https://kevinguo.me/2017/07/06/ansible-client</id><content type="html" xml:base="https://kevinguo.me/2017/07/06/ansible-client/">&lt;p&gt;为kargo kubernetes准备ansible客户端&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;1.ansible-client 免密钥登录所有要部署的节点&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;ssh-keygen -t rsa -P &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;2.将ansible-client上的id_rsa.pub复制到其他所有节点&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=(&lt;/span&gt;172.30.33.89 172.30.33.90 172.30.33.91 172.30.33.92 172.30.33.93 172.30.33.94&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;x &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[*]&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;do &lt;/span&gt;ssh-copy-id -i ~/.ssh/id_rsa.pub &lt;span class=&quot;nv&quot;&gt;$x&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;2.ansible-client 上安装pip,python,setuptools,最好能先&lt;code class=&quot;highlighter-rouge&quot;&gt;yum update&lt;/code&gt;一下&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# setuptools安装&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;wget https://bootstrap.pypa.io/get-pip.py
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;python get-pip.py

&lt;span class=&quot;c&quot;&gt;# pip安装&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;wget https://pypi.python.org/packages/11/b6/abcb525026a4be042b486df43905d6893fb04f05aac21c32c638e939e447/pip-9.0.1.tar.gz#md5&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;35f01da33009719497f01a4ba69d63c9
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;tar zxvf pip-9.0.1.tar.gz
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;python setup.py install
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;3.ansible安装&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;yum install pycrypto python2-cryptography -y
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;pip install ansible
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content><author><name>KevinGuo</name></author><summary type="html">为kargo kubernetes准备ansible客户端</summary></entry><entry><title type="html">Maven之setting.xml</title><link href="https://kevinguo.me/2017/07/06/Maven-setting.xml/" rel="alternate" type="text/html" title="Maven之setting.xml" /><published>2017-07-06T00:00:00+08:00</published><updated>2017-07-06T00:00:00+08:00</updated><id>https://kevinguo.me/2017/07/06/Maven-setting.xml</id><content type="html" xml:base="https://kevinguo.me/2017/07/06/Maven-setting.xml/">&lt;h3 id=&quot;什么是maven&quot;&gt;什么是Maven&lt;/h3&gt;
&lt;p&gt;Maven是一个项目管理和综合工具，用java编写，能简化和标准化项目建设过程。处理编译，部署，文档，团队协作和其他任务的无缝连接。 Maven增加可重用性并负责建立相关的任务。&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;maven资源库&quot;&gt;Maven资源库&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;Maven本地资源库&lt;/li&gt;
    &lt;li&gt;Maven私服库&lt;/li&gt;
    &lt;li&gt;Maven中央仓库
一般在打包编译的时候，会先从本地仓库中查找，如果本地仓库没有，就会去设定好的私服仓库去查找，私服仓库上如果有就下载下来，没有私服仓库就会去中央仓库查找&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;maven的settingsxml文件&quot;&gt;Maven的settings.xml文件&lt;/h3&gt;
&lt;p&gt;在安装好maven之后，我们首先要做的是根据我们的需求配置maven的settings.xml文件
settings.xml对于maven来说，相当于全局性的配置，用于所有的项目。在Maven2中存在两个settings.xml，一个位于maven2的安装目录conf下面，作为全局性配置。对于团队设置，保持一致的定义是关键，所以conf下的settings.xml就作为团队共同的配置文件。而对于每个单独的成员，如果有特殊的需要自定义的设置，如用户信息之类，就可以在~/.m2/settings.xml中进行设定&lt;/p&gt;

&lt;h3 id=&quot;settingsxml的基本结构如下&quot;&gt;settings.xml的基本结构如下&lt;/h3&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;settings&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://maven.apache.org/POM/4.0.0&quot;&lt;/span&gt;  
          &lt;span class=&quot;na&quot;&gt;xmlns:xsi=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&lt;/span&gt;  
          &lt;span class=&quot;na&quot;&gt;xsi:schemaLocation=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://maven.apache.org/POM/4.0.0&lt;/span&gt;  
                               &lt;span class=&quot;err&quot;&gt;http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;  
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;localRepository/&amp;gt;&lt;/span&gt;  
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;interactiveMode/&amp;gt;&lt;/span&gt;  
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;usePluginRegistry/&amp;gt;&lt;/span&gt;  
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;offline/&amp;gt;&lt;/span&gt;  
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;pluginGroups/&amp;gt;&lt;/span&gt;  
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;servers/&amp;gt;&lt;/span&gt;  
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;mirrors/&amp;gt;&lt;/span&gt;  
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;proxies/&amp;gt;&lt;/span&gt;  
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;profiles/&amp;gt;&lt;/span&gt;  
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;activeProfiles/&amp;gt;&lt;/span&gt;  
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/settings&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#表示本地仓库的位置，默认在~/.m2/repository&lt;/span&gt;
&amp;lt;localRepository&amp;gt;/path/to/local/repo&amp;lt;localRepository/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#如果不想每次编译都去查找中心库，就设置为true，前提是你必须已经下载好了必须的依赖包，默认是false&lt;/span&gt;
&amp;lt;offline&amp;gt;false&amp;lt;offline/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#在POM文件中定义了distributionManagement元素，然而特定的username和password不能用于pom.xml，所以通过此配置来保存server信息，这里的id必须和后面repository中定义的id一致，主要是用来部署到nexus私服&lt;/span&gt;
&amp;lt;server&amp;gt;
  &amp;lt;id&amp;gt;release&amp;lt;/id&amp;gt;
  &amp;lt;username&amp;gt;admin&amp;lt;/username&amp;gt;
  &amp;lt;password&amp;gt;admin123&amp;lt;/password&amp;gt;
&amp;lt;/server&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#表示镜像仓库，指定库的镜像，这里的mirrorOf表示此镜像是那个库的镜像，*表示所有库&lt;/span&gt;
&amp;lt;mirrors&amp;gt;
&amp;lt;mirror&amp;gt;
  &amp;lt;id&amp;gt;nexus&amp;lt;/id&amp;gt;
  &amp;lt;mirrorOf&amp;gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&amp;lt;/mirrorOf&amp;gt;
  &amp;lt;name&amp;gt;Nexus Repository&amp;lt;/name&amp;gt;
  &amp;lt;url&amp;gt;http://192.168.56.22:8081/nexus/content/groups/public/&amp;lt;/url&amp;gt;
&amp;lt;/mirror&amp;gt;
&amp;lt;mirrors/&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#代理服务器设置，主要用于无法直接访问中心的库用户设置&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;lt;proxies&amp;gt;  &lt;/span&gt;
   &amp;lt;proxy&amp;gt;  
     &amp;lt;id&amp;gt;myproxy&amp;lt;/id&amp;gt;  
     &amp;lt;active&amp;gt;true&amp;lt;/active&amp;gt;  
     &amp;lt;protocol&amp;gt;http&amp;lt;/protocol&amp;gt;  
     &amp;lt;host&amp;gt;proxy.somewhere.com&amp;lt;/host&amp;gt;  
     &amp;lt;port&amp;gt;8080&amp;lt;/port&amp;gt;  
     &amp;lt;username&amp;gt;proxyuser&amp;lt;/username&amp;gt;  
     &amp;lt;password&amp;gt;somepassword&amp;lt;/password&amp;gt;  
     &amp;lt;nonProxyHosts&amp;gt;&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.google.com|ibiblio.org&amp;lt;/nonProxyHosts&amp;gt;  
   &amp;lt;/proxy&amp;gt;  
 &amp;lt;/proxies&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#自定义配置，可以指定repositories，properties，pluginRepositories，activation等元素&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#这里的repositories表示，开发团队自己的开发库，定义这个库，一般是为了方便distributionManagement发布&lt;/span&gt;
&amp;lt;profiles&amp;gt;
&amp;lt;profile&amp;gt;
      &amp;lt;id&amp;gt;nexus&amp;lt;/id&amp;gt;
      &amp;lt;repositories&amp;gt;
        &amp;lt;repository&amp;gt;
            &amp;lt;id&amp;gt;public&amp;lt;/id&amp;gt;
            &amp;lt;name&amp;gt;public&amp;lt;/name&amp;gt;
            &amp;lt;url&amp;gt;http://192.168.56.22:8081/nexus/content/groups/public/&amp;lt;/url&amp;gt;
            &amp;lt;releases&amp;gt;&amp;lt;enabled&amp;gt;true&amp;lt;/enabled&amp;gt;&amp;lt;/releases&amp;gt;
            &amp;lt;snapshots&amp;gt;&amp;lt;enabled&amp;gt;false&amp;lt;/enabled&amp;gt;&amp;lt;/snapshots&amp;gt;
        &amp;lt;/repository&amp;gt;
      &amp;lt;/repositories&amp;gt;
&amp;lt;/profile&amp;gt;
&amp;lt;/profiles&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#properties作为maven的占位符之，包括5中类型值：&lt;/span&gt;
env.x：返回当前的环境变量
project.x：返回pom文件中定义的project元素值
settings.x：返回settings.xml中定义的元素
java系统属性：返回经过java.lang.System.getProperties&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;返回的值
x：用户自定义的值
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#激活指定的profile，通过profile id 来指定&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;&amp;lt;activeProfiles&amp;gt;  &lt;/span&gt;
    &amp;lt;activeProfile&amp;gt;env-test&amp;lt;/activeProfile&amp;gt;
&amp;lt;/activeProfiles&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content><author><name>KevinGuo</name></author><summary type="html">什么是Maven Maven是一个项目管理和综合工具，用java编写，能简化和标准化项目建设过程。处理编译，部署，文档，团队协作和其他任务的无缝连接。 Maven增加可重用性并负责建立相关的任务。</summary></entry><entry><title type="html">Docker基础-Dockerfile常用指令</title><link href="https://kevinguo.me/2017/07/06/Dockerfile-reference/" rel="alternate" type="text/html" title="Docker基础-Dockerfile常用指令" /><published>2017-07-06T00:00:00+08:00</published><updated>2017-07-06T00:00:00+08:00</updated><id>https://kevinguo.me/2017/07/06/Dockerfile-reference</id><content type="html" xml:base="https://kevinguo.me/2017/07/06/Dockerfile-reference/">&lt;h1 id=&quot;dockerfile-reference&quot;&gt;Dockerfile reference&lt;/h1&gt;

&lt;h2 id=&quot;format&quot;&gt;Format&lt;/h2&gt;
&lt;p&gt;Dockerfile的指令是不区分大小写的，然而，通常我们约定俗成的都使用大写，为了与Dockerfile中的参数区分开。
&lt;!--more--&gt;&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#Comment&lt;/span&gt;
INSTRUCTION arguments
指令        参数
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Dockerfile的指令在Dockerfile中按照顺序执行，第一条必须是&lt;code class=&quot;highlighter-rouge&quot;&gt;FROM&lt;/code&gt;，指定你要构建的image的base image。
在Dockerfile中以#开头的为注释行，而在其他位置的#通常作为一个参数，比如&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#Comment&lt;/span&gt;
RUN &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;we are running some # of cool things&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;parser-directives&quot;&gt;Parser directives&lt;/h4&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#指定转义字符是什么，默认情况下的转义字符是反斜杠，但是，有时候，我们需要用转义字符来表示windows里面的文件路径分隔符，那么这个时候，我就需要用别的方式来表示转义字符了&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# escape=`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Parser directives，指令解释器，解释某个指令在这个dockerfile中表示什么意思，默认情况下，反斜杠在windows中表示路径分隔符，然而如果在dockerfile中使用反斜杠，则会认为是转义符，那么这个时候，就需要重新指定一个转义符，将某个字符串转换成反斜杠，而默认的反斜杠就可以用来作为路径分隔符&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;
1.解释器指令必须在dockefile的第一行，放在别的地方会被认为是注释
2.解释器不支持单行连续换行
3.必须为正确的解释器指令&lt;/p&gt;

&lt;p&gt;支持指令解释器的有：
escape&lt;/p&gt;

&lt;h4 id=&quot;environment-replacement&quot;&gt;Environment replacement&lt;/h4&gt;
&lt;p&gt;Dockerfile中的如下指令内容支持以变量的形式呈现，同样也可以在变量前面加转义符进行转义，Dockerfile中的变量由ENV定义&lt;/p&gt;
&lt;h4 id=&quot;dockerignore-file&quot;&gt;.dockerignore file&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.dockerignore&lt;/code&gt;用来忽略上下文目录中包含的一些image用不到的文件，它们不会传送到docker daemon。规则使用go语言的匹配语法。如：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;cat .dockerignore
.git
tmp&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h4 id=&quot;from&quot;&gt;FROM&lt;/h4&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM &amp;lt;image&amp;gt;
or
&lt;span class=&quot;c&quot;&gt;#tag和digest是可选项&lt;/span&gt;
FROM &amp;lt;image&amp;gt;:&amp;lt;tag&amp;gt;
FROM &amp;lt;image&amp;gt;@&amp;lt;digest&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;在Dockerfile中第一条非注释INSTRUCTION一定是&lt;code class=&quot;highlighter-rouge&quot;&gt;FROM&lt;/code&gt;，它决定了以哪一个镜像作为基准，&lt;image&gt;首选本地是否存在，如果不存在则会从公共仓库下载（当然也可以使用私有仓库的格式）&lt;/image&gt;&lt;/p&gt;
&lt;h4 id=&quot;maintainer&quot;&gt;MAINTAINER&lt;/h4&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;MAINTAINER &amp;lt;name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;MAINTAINER&lt;/code&gt; 设定构建该镜像的作者的个人信息，包括姓名，邮箱等&lt;/p&gt;
&lt;h4 id=&quot;run&quot;&gt;RUN&lt;/h4&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;RUN &amp;lt;&lt;span class=&quot;nb&quot;&gt;command&lt;/span&gt;&amp;gt;
or
RUN &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;executable&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;param1&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;param2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;RUN&lt;/code&gt;指令会在当前镜像的每个新层的顶部执行命令，每个&lt;code class=&quot;highlighter-rouge&quot;&gt;RUN&lt;/code&gt;指令运行之后都会生成一个新的层，生成的新层会被提交到image,然后在Dockerfile中定义的下一步所用到
上面写的&lt;code class=&quot;highlighter-rouge&quot;&gt;RUN&lt;/code&gt;有两种格式&lt;/p&gt;

&lt;p&gt;shell格式，相当于执行/bin/sh -c “&lt;command /&gt;”&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;RUN apt-get install vim -y
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;exec格式，不会触发shell，主要是为了方便在没有bash的镜像中执行，而且可以避免错误的解析命令字符串：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;RUN &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;apt-get&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;install&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;vim&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;-y&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
or
RUN &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/bin/bash&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;-c&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;apt-get install vim -y&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 与shell风格相同
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;cmd&quot;&gt;CMD&lt;/h4&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CMD &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;executable&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;param1&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;param2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; exec格式
CMD &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;param1&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;param2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 作为ENTRYPOINT的默认参数
CMD &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;param1 param2 shell格式
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;一个Dockerfile中只能有一个&lt;code class=&quot;highlighter-rouge&quot;&gt;CMD&lt;/code&gt;，如果有多个，只有最后一个生效。&lt;code class=&quot;highlighter-rouge&quot;&gt;CMD&lt;/code&gt;指令的主要功能是在build完成后，为了给&lt;code class=&quot;highlighter-rouge&quot;&gt;docker run&lt;/code&gt;启动到容器的时候提供默认命令或者参数，这些默认值可以包含任何可执行的命令，也可只是参数(&lt;strong&gt;只是参数的时候可执行的命令就必须提前在&lt;code class=&quot;highlighter-rouge&quot;&gt;ENTRYPOINT&lt;/code&gt;中指定&lt;/strong&gt;)&lt;/p&gt;

&lt;p&gt;它与&lt;code class=&quot;highlighter-rouge&quot;&gt;ENTRYPOINT&lt;/code&gt;的功能极为相似，区别在于如果使用&lt;code class=&quot;highlighter-rouge&quot;&gt;docker run&lt;/code&gt;启动容器的时候指定了命令或者，那么Dockerfile中指定的&lt;code class=&quot;highlighter-rouge&quot;&gt;CMD&lt;/code&gt;命令会被覆盖，而&lt;code class=&quot;highlighter-rouge&quot;&gt;ENTRYPOINT&lt;/code&gt;则不会覆盖，只会把容器名后面的所有内容都当成参数传递给&lt;code class=&quot;highlighter-rouge&quot;&gt;ENTRYPOINT&lt;/code&gt;指定的命令。另外&lt;code class=&quot;highlighter-rouge&quot;&gt;CMD&lt;/code&gt;还可以单独作为&lt;code class=&quot;highlighter-rouge&quot;&gt;ENTRYPOINT&lt;/code&gt;的所接命令的可选参数&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;CMD&lt;/code&gt;与&lt;code class=&quot;highlighter-rouge&quot;&gt;RUN&lt;/code&gt;的区别在于，&lt;code class=&quot;highlighter-rouge&quot;&gt;RUN&lt;/code&gt;是在&lt;code class=&quot;highlighter-rouge&quot;&gt;build&lt;/code&gt;成镜像时运行的，先于&lt;code class=&quot;highlighter-rouge&quot;&gt;CMD&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;ENTRYPOINT&lt;/code&gt;的，&lt;code class=&quot;highlighter-rouge&quot;&gt;CMD&lt;/code&gt;会在每次启动容器的时候运行，而&lt;code class=&quot;highlighter-rouge&quot;&gt;RUN&lt;/code&gt;只在创建镜像的时候执行一次，固话在image中&lt;/p&gt;

&lt;p&gt;同样exec格式，不会触发shell，所以&lt;code class=&quot;highlighter-rouge&quot;&gt;$HOME&lt;/code&gt;这样的变量无法使用&lt;/p&gt;

&lt;p&gt;举例1：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Dockerfile:
    CMD &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;echo&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;CMD_args&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
运行
    docker run &amp;lt;image&amp;gt;
结果
    输出 CMD_args
运行
    docker run &amp;lt;image&amp;gt; &lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;run_args
结果
    输出 run_args
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;默认会输出&lt;code class=&quot;highlighter-rouge&quot;&gt;CMD_args&lt;/code&gt;，而在运行是输入&lt;code class=&quot;highlighter-rouge&quot;&gt;echo run_args&lt;/code&gt;，则会输出&lt;code class=&quot;highlighter-rouge&quot;&gt;run_args&lt;/code&gt;，因为新输入的命令覆盖了&lt;code class=&quot;highlighter-rouge&quot;&gt;CMD&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;举例2：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Dockerfile:
    ENTRYPOINT &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;echo&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;ENTRYPOINT_args&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
运行
    docker run &amp;lt;image&amp;gt;
结果
    输出 ENTRYPOINT_args
运行
    docker run &amp;lt;image&amp;gt; &lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;run_args
结果
    输出 ENTRYPOINT_args &lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;run_args
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;默认会输出&lt;code class=&quot;highlighter-rouge&quot;&gt;ENTRYPOINT_args&lt;/code&gt;,如果输入&lt;code class=&quot;highlighter-rouge&quot;&gt;echo run_args&lt;/code&gt;,，则会输出&lt;code class=&quot;highlighter-rouge&quot;&gt;ENTRYPOINT_args echo run_args&lt;/code&gt;，因为使用的&lt;code class=&quot;highlighter-rouge&quot;&gt;ENTRYPOINT&lt;/code&gt;,所有&lt;code class=&quot;highlighter-rouge&quot;&gt;docker run&lt;/code&gt;后面的内容都是&lt;code class=&quot;highlighter-rouge&quot;&gt;ENTRYPOINT&lt;/code&gt;的参数&lt;/p&gt;

&lt;p&gt;举例3：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Dockerfile:
    ENTRYPOINT &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;echo&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
    CMD &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;echo&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;CMD_args&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
运行
    docker run &amp;lt;image&amp;gt;
结果
    输出 &lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;CMD_args
运行
    docker run &amp;lt;image&amp;gt; hello world
结果
    输出 hello world
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;默认会输出&lt;code class=&quot;highlighter-rouge&quot;&gt;echo CMD_args&lt;/code&gt;,如果输入&lt;code class=&quot;highlighter-rouge&quot;&gt;hello world&lt;/code&gt;，则会输出&lt;code class=&quot;highlighter-rouge&quot;&gt;hello world&lt;/code&gt;，因为输入的&lt;code class=&quot;highlighter-rouge&quot;&gt;hello world&lt;/code&gt;覆盖了&lt;code class=&quot;highlighter-rouge&quot;&gt;CMD&lt;/code&gt;,当&lt;code class=&quot;highlighter-rouge&quot;&gt;CMD&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;ENTRYPOINT&lt;/code&gt;同时出现的时候，&lt;code class=&quot;highlighter-rouge&quot;&gt;CMD&lt;/code&gt;的内容只能作为&lt;code class=&quot;highlighter-rouge&quot;&gt;ENTRYPOINT&lt;/code&gt;的参数&lt;/p&gt;

&lt;h4 id=&quot;entrypoint&quot;&gt;ENTRYPOINT&lt;/h4&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ENTRYPOINT &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;executable&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;param1&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;param2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; exec格式，首选
ENTRYPOINT &lt;span class=&quot;nb&quot;&gt;command &lt;/span&gt;param1 param2 shell格式
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;ENTRYPOINT 有两种写法，第二种(shell form)会屏蔽掉docker run时后面加的命令和CMD里的参数。
一个Dockerfile中只能有一个&lt;code class=&quot;highlighter-rouge&quot;&gt;ENTRYPOINT&lt;/code&gt;，如果有多个，只有最后一个生效。&lt;code class=&quot;highlighter-rouge&quot;&gt;ENTRYPOINT&lt;/code&gt;命令设置在容器启动时执行的命令
使用exec格式，在&lt;code class=&quot;highlighter-rouge&quot;&gt;docker run &amp;lt;image&amp;gt;&lt;/code&gt;后的所有参数，都会追加到&lt;code class=&quot;highlighter-rouge&quot;&gt;ENTRYPOINT&lt;/code&gt;之后，并且会覆盖所有&lt;code class=&quot;highlighter-rouge&quot;&gt;CMD&lt;/code&gt;指定的参数。当然可以在&lt;code class=&quot;highlighter-rouge&quot;&gt;run&lt;/code&gt;时使用&lt;code class=&quot;highlighter-rouge&quot;&gt;--entrypoint&lt;/code&gt;来覆盖&lt;code class=&quot;highlighter-rouge&quot;&gt;ENTRYPOINT&lt;/code&gt;指令
使用shell格式，&lt;code class=&quot;highlighter-rouge&quot;&gt;ENTRYPOINT&lt;/code&gt;相当于执行&lt;code class=&quot;highlighter-rouge&quot;&gt;/bin/sh -c &amp;lt;command..&amp;gt;&lt;/code&gt;，这种格式会忽略&lt;code class=&quot;highlighter-rouge&quot;&gt;docker run&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;CMD&lt;/code&gt;的所有参数&lt;/p&gt;

&lt;p&gt;同样exec格式，不会触发shell，所以像&lt;code class=&quot;highlighter-rouge&quot;&gt;$HOME&lt;/code&gt;这样的环境变量是无法使用的&lt;/p&gt;

&lt;p&gt;举例1：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Dockerfile:
    FROM ubuntu
    ENTRYPOINT &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;top&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;-b&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
    CMD &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;-c&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
运行
    docker run -ti --rm --name &lt;span class=&quot;nb&quot;&gt;test &lt;/span&gt;chinakevinguo/sinatra:v5
结果
    top -b -c
运行
    docker run -ti --rm --name &lt;span class=&quot;nb&quot;&gt;test &lt;/span&gt;chinakevinguo/sinatra:v5 -H
结果
    top -b -H
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;可以看到&lt;code class=&quot;highlighter-rouge&quot;&gt;CMD&lt;/code&gt;指定的参数&lt;code class=&quot;highlighter-rouge&quot;&gt;-c&lt;/code&gt;已经被覆盖，变成了&lt;code class=&quot;highlighter-rouge&quot;&gt;docker run &amp;lt;image&amp;gt;&lt;/code&gt;所指定的&lt;code class=&quot;highlighter-rouge&quot;&gt;-H&lt;/code&gt;，而&lt;code class=&quot;highlighter-rouge&quot;&gt;ENTRYPOINT&lt;/code&gt;，所指定的&lt;code class=&quot;highlighter-rouge&quot;&gt;-b&lt;/code&gt;参数依然存在&lt;/p&gt;

&lt;h4 id=&quot;label&quot;&gt;LABEL&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;LABEL&lt;/code&gt;主要是给image添加元数据，加上一个标签,通常以&lt;code class=&quot;highlighter-rouge&quot;&gt;KEY=VALUE&lt;/code&gt;的形式添加，要在VALUE中要包含空格， 可使用引号和反斜杠&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;LABEL com.example.vendor&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Kevin Guo&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1.0&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;一个image可能有不止一个label,docker建议将所有的label都组合在一个LABEL中&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;当在Dockerfile中使用&lt;code class=&quot;highlighter-rouge&quot;&gt;LABEL&lt;/code&gt;后,基于该镜像运行容器，使用&lt;code class=&quot;highlighter-rouge&quot;&gt;docker inspect&lt;/code&gt;可看到所有你打好的标签label&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Labels: &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;s2&quot;&gt;&quot;build-date&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;20161102&quot;&lt;/span&gt;,
                &lt;span class=&quot;s2&quot;&gt;&quot;description&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;this text illustrates that label-values can span multiple lines.&quot;&lt;/span&gt;,
                &lt;span class=&quot;s2&quot;&gt;&quot;license&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;GPLv2&quot;&lt;/span&gt;,
                &lt;span class=&quot;s2&quot;&gt;&quot;name&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;centos-test&quot;&lt;/span&gt;,
                &lt;span class=&quot;s2&quot;&gt;&quot;vendor&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;KevinGuo&quot;&lt;/span&gt;,
                &lt;span class=&quot;s2&quot;&gt;&quot;version&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;1.0&quot;&lt;/span&gt;
            &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;expose&quot;&gt;EXPOSE&lt;/h4&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;EXPOSE &amp;lt;port&amp;gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&amp;lt;port&amp;gt;...]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;EXPOSE指令告诉容器在运行时要监听的端口，但是这个端口只是用于多个容器之间通行用的(links),外面的host是无法访问的。要把容器端口暴露给外面的主机，在启动容器时使用-p/-P选项。
示例：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Dockerfile:
EXPOSE 8000 80 90
运行：
  docker run -d -P --name web chinakevinguo/httpd
结果：
  0.0.0.0:32775-&amp;gt;80/tcp, 0.0.0.0:32774-&amp;gt;90/tcp, 0.0.0.0:32773-&amp;gt;8000/tcp
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;可以看到我在Dockerfile中指定要监听的端口都监听了，而且我使用&lt;code class=&quot;highlighter-rouge&quot;&gt;-P&lt;/code&gt;选项，将这些被监听的端口都暴露出来了&lt;/p&gt;

&lt;h4 id=&quot;env&quot;&gt;ENV&lt;/h4&gt;
&lt;p&gt;使用ENV设置环境变量，保持环境一致，另外在Dockerfile同一行中EVN环境变量是保持不替换的，环境变量替换会在下一行中实现&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ENV &amp;lt;key&amp;gt; &amp;lt;value&amp;gt;
ENV &lt;span class=&quot;nv&quot;&gt;abc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;hello
ENV &lt;span class=&quot;nv&quot;&gt;abc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;bye &lt;span class=&quot;nv&quot;&gt;def&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$abc&lt;/span&gt;
ENV &lt;span class=&quot;nv&quot;&gt;ghi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$abc&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#这个时候def=hello，而ghi=bye&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;设置了后，后续的RUN命令都可以使用，当运行生成的镜像时这些环境变量依然有效，如果需要在运行时更改这些环境变量可以在运行docker run时添加-env &lt;key&gt;=&lt;value&gt;参数来修改&lt;/value&gt;&lt;/key&gt;&lt;/p&gt;

&lt;h4 id=&quot;add&quot;&gt;ADD&lt;/h4&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ADD &amp;lt;src&amp;gt;... &amp;lt;dest&amp;gt;
or
ADD &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;src&amp;gt;&quot;&lt;/span&gt;,... &lt;span class=&quot;s2&quot;&gt;&quot;dest&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 路径包含空格的话，就需要这种格式
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;将文件&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;src&amp;gt;&lt;/code&gt;拷贝到container的文件系统对应的路径&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;dest&amp;gt;&lt;/code&gt;下。
&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;src&amp;gt;&lt;/code&gt;可以是文件、文件夹、URL,对于文件和文件夹&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;src&amp;gt;&lt;/code&gt;必须是在Dockerfile的相对路径下，即只能是Dockerfile的相对路径且不能使用类似&lt;code class=&quot;highlighter-rouge&quot;&gt;../path/&lt;/code&gt;的方式
&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;dest&amp;gt;&lt;/code&gt;只能是容器中的绝对路径，如果路径不存在则会自动级联创建，根据你的需要决定&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;dest&amp;gt;&lt;/code&gt;是否需要反斜杠&lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt;，使用&lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt;结尾则是目录，否则就是文件&lt;/p&gt;

&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;支持模糊匹配
ADD home&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; /mydir/   &lt;span class=&quot;c&quot;&gt;# adds all files starting with &quot;hom&quot;&lt;/span&gt;
ADD home?.txt /mydir/ &lt;span class=&quot;c&quot;&gt;# ? is replaced with any aingle character&lt;/span&gt;

ADD requirements.txt /tmp/
RUN pip install /tmp/requirements.txt
ADD . /tmp/
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;另外&lt;code class=&quot;highlighter-rouge&quot;&gt;ADD&lt;/code&gt;还支持从远程URL获取文件，但是官方强烈反对这样做，建议使用&lt;code class=&quot;highlighter-rouge&quot;&gt;wget&lt;/code&gt;或&lt;code class=&quot;highlighter-rouge&quot;&gt;curl&lt;/code&gt;代替
&lt;code class=&quot;highlighter-rouge&quot;&gt;ADD&lt;/code&gt; 还支持自动解压tar文件，这是&lt;code class=&quot;highlighter-rouge&quot;&gt;ADD&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;COPY&lt;/code&gt;最大的区别&lt;/p&gt;

&lt;h4 id=&quot;copy&quot;&gt;COPY&lt;/h4&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ADD &amp;lt;src&amp;gt;... &amp;lt;dest&amp;gt;
or
ADD &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;lt;src&amp;gt;&quot;&lt;/span&gt;,... &lt;span class=&quot;s2&quot;&gt;&quot;dest&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; 路径包含空格的话，就需要这种格式
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;COPY&lt;/code&gt;的语法与功能与&lt;code class=&quot;highlighter-rouge&quot;&gt;ADD&lt;/code&gt;相同，只是不支持上面讲到的&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;src&amp;gt;&lt;/code&gt;
是远程URL、自动解压这两个特性，但是&lt;a href=&quot;https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/&quot;&gt;Best Practices for Writing Dockerfiles&lt;/a&gt;建议&lt;strong&gt;尽量使用&lt;/strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;COPY&lt;/code&gt;,并使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;RUN&lt;/code&gt;与&lt;code class=&quot;highlighter-rouge&quot;&gt;COPY&lt;/code&gt;组合来代替&lt;code class=&quot;highlighter-rouge&quot;&gt;ADD&lt;/code&gt;,建议只有在复制tar文件的时候使用&lt;code class=&quot;highlighter-rouge&quot;&gt;ADD&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;volume&quot;&gt;VOLUME&lt;/h4&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;VOLUME &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/data1&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;/data2&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;VOLUME指令用来在容器中设置一个挂载点，可以用来让其他容器挂载以实现数据共享或对容器数据的备份、恢复或迁移,请参考文章&lt;a href=&quot;https://docs.docker.com/engine/tutorials/dockervolumes/#mount-a-host-directory-as-a-data-volume&quot;&gt;Manage data in containers&lt;/a&gt;
示例：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM ubuntu
RUN mkdir /myvol
RUN &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;hello world&quot;&lt;/span&gt; &amp;gt; /myvol/greeting
VOLUME /myvol
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;这个Dockerfile会导致这个image创建一个挂载点&lt;code class=&quot;highlighter-rouge&quot;&gt;/myvol&lt;/code&gt;，然后将&lt;code class=&quot;highlighter-rouge&quot;&gt;greeting&lt;/code&gt;文件copy到新建的卷组中&lt;/p&gt;

&lt;h4 id=&quot;workdir&quot;&gt;WORKDIR&lt;/h4&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;WORKDIR /path/to/workdir
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;WORKDIR&lt;/code&gt;指令用于设置&lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt;中&lt;code class=&quot;highlighter-rouge&quot;&gt;RUN&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;CMD&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;COPY&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;ADD&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;ENTRYPOINT&lt;/code&gt;指令执行命令的工作目录(默认为/目录)，该指令在&lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt;文件中可以出现多次，如果使用相对路径则为相对于&lt;code class=&quot;highlighter-rouge&quot;&gt;WORKDIR&lt;/code&gt;上一次的值，例如：&lt;code class=&quot;highlighter-rouge&quot;&gt;WORKDDIR /a&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;WORKDIR b/&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;RUN pwd&lt;/code&gt; 最终输出的当前目录是&lt;code class=&quot;highlighter-rouge&quot;&gt;/a/b&lt;/code&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;WORKDIR&lt;/code&gt;还能够解析通过ENV指定的环境变量&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ENV DIRPATH /path
WORKDIR &lt;span class=&quot;nv&quot;&gt;$DIRPATH&lt;/span&gt;/&lt;span class=&quot;nv&quot;&gt;$DIRNAME&lt;/span&gt;
RUN &lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;user&quot;&gt;USER&lt;/h4&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;USER daemon
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;USER&lt;/code&gt;为运行镜像时或者任何接下来的&lt;code class=&quot;highlighter-rouge&quot;&gt;RUN&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;CMD&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;ENTRYPOINT&lt;/code&gt;等指令指定运行用户名或UID&lt;/p&gt;

&lt;h4 id=&quot;arg&quot;&gt;ARG&lt;/h4&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ARG &amp;lt;name&amp;gt;[&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&amp;lt;default value&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;ARG 指令定义一个变量，用户可以在构建的时候使用&lt;code class=&quot;highlighter-rouge&quot;&gt;docker build&lt;/code&gt;命令，并使用–build-arg &lt;varname&gt;=&lt;value&gt;标志传递给构建器，并且`ARG`定义的变量只有在构建image的时候有效，构建完成后就会消失，而`ENV`指定的环境变量则会持续存在
示例：&lt;/value&gt;&lt;/varname&gt;&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM busybox
ARG user1
ARG buildno
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;如果&lt;code class=&quot;highlighter-rouge&quot;&gt;ARG&lt;/code&gt;没有默认值，在构建是就必须指定值，否则会报错&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM busybox
ARG &lt;span class=&quot;nv&quot;&gt;user1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;someuser
ARG &lt;span class=&quot;nv&quot;&gt;buildno&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;如果&lt;code class=&quot;highlighter-rouge&quot;&gt;ARG&lt;/code&gt;有默认值，在构建时没有指定值则使用默认值，在构建时指定了值，则使用指定的值&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ARG&lt;/code&gt;变量从在Dockerfile中定义的时候就开始生效，比如，看如下的Dockerfile：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM busybox
USER &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:-&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;some_user&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
ARG user
USER &lt;span class=&quot;nv&quot;&gt;$user&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker build --build-arg &lt;span class=&quot;nv&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;what_user -t chinakevinguo/web .
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;通过&lt;code class=&quot;highlighter-rouge&quot;&gt;docker inspect image&lt;/code&gt;查看&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s2&quot;&gt;&quot;User&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;what_user&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;第2行的user并没有变量值，所以是默认指定的some_user,而第4行的USER的值则是从ARG传递进来的what_user&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM ubuntu
ARG CONT_IMG_VER
ENV CONT_IMG_VER v1.0.0
RUN &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$CONT_IMG_VER&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;使用&lt;code class=&quot;highlighter-rouge&quot;&gt;ENV&lt;/code&gt;的环境变量总是会覆盖&lt;code class=&quot;highlighter-rouge&quot;&gt;ARG&lt;/code&gt;的环境变量，所以我们可以使用&lt;code class=&quot;highlighter-rouge&quot;&gt;ARG&lt;/code&gt;来传递可变参数，然后通过&lt;code class=&quot;highlighter-rouge&quot;&gt;ENV&lt;/code&gt;来永久保存到IMAGE中
docker中有一组与定义的&lt;code class=&quot;highlighter-rouge&quot;&gt;ARG&lt;/code&gt;变量，你可以在Dockerfile中使用相应的&lt;code class=&quot;highlighter-rouge&quot;&gt;ARG&lt;/code&gt;指令&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;HTTP_PROXY&lt;/li&gt;
  &lt;li&gt;http_proxy&lt;/li&gt;
  &lt;li&gt;HTTPS_PROXY&lt;/li&gt;
  &lt;li&gt;https_proxy&lt;/li&gt;
  &lt;li&gt;FTP_PROXY&lt;/li&gt;
  &lt;li&gt;ftp_proxy&lt;/li&gt;
  &lt;li&gt;NO_PROXY&lt;/li&gt;
  &lt;li&gt;no_proxy&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;onbuild&quot;&gt;ONBUILD&lt;/h4&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ONBUILD&lt;/code&gt;指令用来设置一些触发指令，用于在当该镜像被作为基础镜像来创建其他镜像时(也就是&lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt;中的&lt;code class=&quot;highlighter-rouge&quot;&gt;FROM&lt;/code&gt;为当前镜像时)执行一些操作，&lt;code class=&quot;highlighter-rouge&quot;&gt;ONBUILD&lt;/code&gt;中定义的指令会在用于生成器他镜像的&lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt;文件的&lt;code class=&quot;highlighter-rouge&quot;&gt;FROM&lt;/code&gt;指令之后被执行，上述介绍的任何一个指令都可以用于&lt;code class=&quot;highlighter-rouge&quot;&gt;ONBUILD&lt;/code&gt;指令(除了&lt;code class=&quot;highlighter-rouge&quot;&gt;FROM&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;MAINTAINER&lt;/code&gt;)，可以用来执行一些因环境变化而引起的操作，使镜像更加通用。
&lt;strong&gt;注意：&lt;/strong&gt;
  1.&lt;code class=&quot;highlighter-rouge&quot;&gt;ONBUILD&lt;/code&gt;中定义的指令在当前镜像的build中不会被执行
  2.可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;docker inspect &amp;lt;image&amp;gt;&lt;/code&gt;命令，查看输出的ONBUILD键来查看某个镜像ONBUILD指令指定的内容
  3.&lt;code class=&quot;highlighter-rouge&quot;&gt;ONBUILD&lt;/code&gt;指令会在下游镜像被触发执行，执行顺序会按&lt;code class=&quot;highlighter-rouge&quot;&gt;ONBUILD&lt;/code&gt;定义的先后顺序执行
  4.引用&lt;code class=&quot;highlighter-rouge&quot;&gt;ONBUILD&lt;/code&gt;的镜像创建完成后将会清除所有引用的&lt;code class=&quot;highlighter-rouge&quot;&gt;ONBUILD&lt;/code&gt;指令
  5.ONBUILD指令不允许嵌套，例如：&lt;code class=&quot;highlighter-rouge&quot;&gt;ONBUILD ONBUILD ADD ./data&lt;/code&gt; 是不允许的
  6.ONBUILD指令不会触发&lt;code class=&quot;highlighter-rouge&quot;&gt;FROM&lt;/code&gt;或&lt;code class=&quot;highlighter-rouge&quot;&gt;MAINTAINER&lt;/code&gt;指令&lt;/p&gt;

&lt;p&gt;例如，Dockerfile使用如下内容创建了镜像image-A：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;...]
ONBUILD ADD . /app/src
ONBUILD RUN /usr/local/bin/python-build --dir /app/src
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;...]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;如果基于image-A创建新镜像时，新的Dockerfile中使用&lt;code class=&quot;highlighter-rouge&quot;&gt;FROM image-A&lt;/code&gt;指定基础镜像时，会自动执行&lt;code class=&quot;highlighter-rouge&quot;&gt;ONBUILD&lt;/code&gt;指令内容，等价于在后面添加了两条指令&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM image-A
&lt;span class=&quot;c&quot;&gt;#Automatically run the following&lt;/span&gt;
ADD . /app/src
RUN /usr/local/bin/python-build --dir /app/src
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;stopsignal&quot;&gt;STOPSIGNAL&lt;/h4&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;STOPSIGNAL signal
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;STOPSIGNAL&lt;/code&gt;指令用来设置停止容器时发送什么系统调用信号给容器，这个信号必须是内核系统调用表中合法的数，例如9，或者是&lt;code class=&quot;highlighter-rouge&quot;&gt;SIGNAME&lt;/code&gt;格式的信号名称，例如&lt;code class=&quot;highlighter-rouge&quot;&gt;SIGKILL&lt;/code&gt;&lt;/p&gt;

&lt;h4 id=&quot;healthcheck&quot;&gt;HEALTHCHECK&lt;/h4&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HEALTHCHECK &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;OPTIONS] CMD &lt;span class=&quot;nb&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;通过在容器内运行命令来对容器进行健康检查&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
or
HEALTHCHECK NONE &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;禁用所有从基础镜像继承的健康检查&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;HEALTHCHECK&lt;/code&gt;指令用来告诉Docker怎样去测试一个容器是否还在工作，这可以检测诸如，web服务器卡住了无法处理新的连接，但是服务的进程仍然在运行等情况
当容器指定了&lt;code class=&quot;highlighter-rouge&quot;&gt;HEALTHCHECK&lt;/code&gt;时，其除了正常的状态外，还具有健康状态，这个指定的healthckeck状态是初始状态，每当健康检查通过，就认定这个容器是健康的（无论之前的状态如何），当发生故障后，它就变得不健康了&lt;/p&gt;

&lt;p&gt;可在&lt;code class=&quot;highlighter-rouge&quot;&gt;CMD&lt;/code&gt;前添加的可选项：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;–interval=时长[默认30s] 每隔多久检测一次&lt;/li&gt;
  &lt;li&gt;–timeout=时长[默认30s]  如果在单次检测的时长超过设定值&lt;/li&gt;
  &lt;li&gt;–retries=次数[默认3次]   重复检查多少次后才被视为不健康&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;另外：在一个Dockerfile中只能有一个&lt;code class=&quot;highlighter-rouge&quot;&gt;HEALTHCKECK&lt;/code&gt;，如果存在多个，则最后一个生效
&lt;code class=&quot;highlighter-rouge&quot;&gt;CMD&lt;/code&gt;之后的命令可以是shell命令(HEALTHCHECK CMD /bin/check-running)，也可以是exec格式([“/bin/sh”,”check-running”])
命令的退出状态表示容器的运行状态，可能值为：
0：success - the container is healthy and ready for use
1：unhealthy - the container is not working correctly
2：reserved - do not use this exit code&lt;/p&gt;

&lt;p&gt;示例：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 每隔5分钟检测一次web服务器，如果超过3秒无响应，则视为不健康&lt;/span&gt;
HEALTHCHECK --interval&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;5m --timeout&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;3s CMD curl -f http://localhost/ &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;shell&quot;&gt;SHELL&lt;/h4&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;SHELL &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;executable&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;parameters&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SHELL&lt;/code&gt;指令用于覆盖使用默认shell格式的shell命令，在linux上默认的shell是[“/bin/sh”,”-c”]，在windows上是[“cmd”,”/S”,”/C”]，&lt;code class=&quot;highlighter-rouge&quot;&gt;SHELL&lt;/code&gt;指令在dockerfile中必须以JSON的格式来写
&lt;code class=&quot;highlighter-rouge&quot;&gt;SHELL&lt;/code&gt;指令在windows上尤其有用，因为windows上的&lt;code class=&quot;highlighter-rouge&quot;&gt;powershell&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;cmd&lt;/code&gt;这两种shell
&lt;code class=&quot;highlighter-rouge&quot;&gt;SHELL&lt;/code&gt;指令可以添加多次，买个&lt;code class=&quot;highlighter-rouge&quot;&gt;SHELL&lt;/code&gt;指令都会覆盖前面的&lt;code class=&quot;highlighter-rouge&quot;&gt;SHELL&lt;/code&gt;指令，并影响后面的所有指令，例如：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM windowsservercore

&lt;span class=&quot;c&quot;&gt;# 默认执行使用cmd /S /C echo&lt;/span&gt;
RUN &lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;default

&lt;span class=&quot;c&quot;&gt;# 默认执行使用cmd /S /C powershell -command Write-Host&lt;/span&gt;
RUN powershell -command Write-Host default

&lt;span class=&quot;c&quot;&gt;# 使用SHELL 指定使用的shell是powershell&lt;/span&gt;
SHELL &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;powershell&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;-command&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
RUN Write-Host hello

&lt;span class=&quot;c&quot;&gt;# 使用SHELL 指定使用的shell是cmd /S /C&lt;/span&gt;
SHELL &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cmd&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;/S&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;/C&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
RUN &lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;hello
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;
当使用的&lt;code class=&quot;highlighter-rouge&quot;&gt;SHELL&lt;/code&gt;格式发生变化，那么诸如:&lt;code class=&quot;highlighter-rouge&quot;&gt;RUN&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;CMD&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;ENTRYPOINT&lt;/code&gt;等指令调用命令的方式也会发生变化，比如：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;...
&lt;span class=&quot;c&quot;&gt;# Dockerfile 中定义：&lt;/span&gt;
RUN powershell -command Execute-MyCmdlet -param1 &lt;span class=&quot;s2&quot;&gt;&quot;c:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\f&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;oo.txt&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Docker实际调用的命令是`cmd /S /C powershell -command Execute-MyCmdlet -param1 &quot;c:\foo.txt&quot;`&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;然而上述方法效率很低，因为首先，有一个不必要的&lt;code class=&quot;highlighter-rouge&quot;&gt;cmd.exe&lt;/code&gt;被调用，其次，shell中的每个RUN都需要指定一个额外的&lt;code class=&quot;highlighter-rouge&quot;&gt;powershell -command&lt;/code&gt;
更高效的做法是使用&lt;code class=&quot;highlighter-rouge&quot;&gt;SHELL&lt;/code&gt;指令和shell格式来提供更自然的语法：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# escape=` #这是指令解释器，将`解释成转义符&lt;/span&gt;
FROM windowsservercore
SHELL &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;powershell&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;-command&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
RUN New-Item -ItemType Directory C:&lt;span class=&quot;se&quot;&gt;\E&lt;/span&gt;xample
ADD Execute-MyCmdlet.ps1 c:&lt;span class=&quot;se&quot;&gt;\e&lt;/span&gt;xample&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
RUN C:&lt;span class=&quot;se&quot;&gt;\e&lt;/span&gt;xample&lt;span class=&quot;se&quot;&gt;\E&lt;/span&gt;xecute-MyCmdlet -sample &lt;span class=&quot;s1&quot;&gt;'hello world'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;dockerfile-examples&quot;&gt;Dockerfile examples&lt;/h4&gt;
&lt;p&gt;下面是一些Dockerfile的例子，更多内容请参考&lt;a href=&quot;https://docs.docker.com/engine/examples/&quot;&gt;Dockerization examples&lt;/a&gt;&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Nginx&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# VERSION               0.0.1&lt;/span&gt;

FROM      ubuntu
MAINTAINER Victor Vieux &amp;lt;victor@docker.com&amp;gt;

LABEL &lt;span class=&quot;nv&quot;&gt;Description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;This image is used to start the foobar executable&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Vendor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ACME Products&quot;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;Version&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1.0&quot;&lt;/span&gt;
RUN apt-get update &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get install -y inotify-tools nginx apache2 openssh-server
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Firefox over VNC&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# VERSION               0.3&lt;/span&gt;

FROM ubuntu

&lt;span class=&quot;c&quot;&gt;# Install vnc, xvfb in order to create a 'fake' display and firefox&lt;/span&gt;
RUN apt-get update &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get install -y x11vnc xvfb firefox
RUN mkdir ~/.vnc
&lt;span class=&quot;c&quot;&gt;# Setup a password&lt;/span&gt;
RUN x11vnc -storepasswd 1234 ~/.vnc/passwd
&lt;span class=&quot;c&quot;&gt;# Autostart firefox (might not be the best way, but it does the trick)&lt;/span&gt;
RUN bash -c &lt;span class=&quot;s1&quot;&gt;'echo &quot;firefox&quot; &amp;gt;&amp;gt; /.bashrc'&lt;/span&gt;

EXPOSE 5900
CMD    &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;x11vnc&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;-forever&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;-usepw&quot;&lt;/span&gt;, &lt;span class=&quot;s2&quot;&gt;&quot;-create&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Multiple images example&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# VERSION               0.1&lt;/span&gt;

FROM ubuntu
RUN &lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;foo &amp;gt; bar
&lt;span class=&quot;c&quot;&gt;# Will output something like ===&amp;gt; 907ad6c2736f&lt;/span&gt;

FROM ubuntu
RUN &lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;moo &amp;gt; oink
&lt;span class=&quot;c&quot;&gt;# Will output something like ===&amp;gt; 695d7793cbe4&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# You᾿ll now have two images, 907ad6c2736f with /bar, and 695d7793cbe4 with&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# /oink.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content><author><name>KevinGuo</name></author><summary type="html">Dockerfile reference</summary></entry><entry><title type="html">Docker基础-docker 存储驱动</title><link href="https://kevinguo.me/2017/07/06/Docker-storage-driver/" rel="alternate" type="text/html" title="Docker基础-docker 存储驱动" /><published>2017-07-06T00:00:00+08:00</published><updated>2017-07-06T00:00:00+08:00</updated><id>https://kevinguo.me/2017/07/06/Docker-storage-driver</id><content type="html" xml:base="https://kevinguo.me/2017/07/06/Docker-storage-driver/">&lt;h1 id=&quot;select-a-storage-driver&quot;&gt;Select a storage driver&lt;/h1&gt;

&lt;p&gt;该篇主要介绍Docker的存储驱动，列出了Docker支持的存储驱动以及介绍了用来管理这些存储驱动的命令，同时也提供了在为Docker选择存储驱动的一些建议。
&lt;!--more--&gt;&lt;/p&gt;
&lt;h1 id=&quot;热插拔存储驱动架构&quot;&gt;热插拔存储驱动架构&lt;/h1&gt;

&lt;p&gt;Docker提供了一个可热插拔的存储驱动架构，这意味着，你可以灵活的插入最合适你当前环境的存储驱动程序。每一个Docker存储驱动都是基于Linux文件系统或卷组管理器。
每个存储驱动有自己独特的方式来管理数据层和镜像层，这意味着特定的驱动程序在特定的环境下，运行的会比其他的存储驱动好。&lt;/p&gt;

&lt;p&gt;一旦你决定使用那个存储驱动，那么在启动docker的时候，你就指定该驱动程序，因此，Docker每次只能运行一个存储驱动，并且所有的容器实例都是用该存储驱动。下表列出了所有支持的存储驱动：&lt;/p&gt;

&lt;p&gt;| Technology    | Storage driver name  |
| ———-    | :——————-:|
| &lt;a href=&quot;https://docs.docker.com/engine/userguide/storagedriver/overlayfs-driver/&quot;&gt;OverlayFS&lt;/a&gt;     | overlay or overlay2  |
| &lt;a href=&quot;https://docs.docker.com/engine/userguide/storagedriver/aufs-driver/&quot;&gt;AUFS&lt;/a&gt;          | aufs                 |
| &lt;a href=&quot;https://docs.docker.com/engine/userguide/storagedriver/btrfs-driver/&quot;&gt;Btrfs&lt;/a&gt;         | btrfs                |
| &lt;a href=&quot;https://docs.docker.com/engine/userguide/storagedriver/device-mapper-driver/&quot;&gt;Device Mapper&lt;/a&gt; | devicemapper         |
| VFS           | vfs                  |
| &lt;a href=&quot;https://docs.docker.com/engine/userguide/storagedriver/zfs-driver/&quot;&gt;ZFS&lt;/a&gt;           | zfs                  |
到底使用哪个存储驱动，部分取决于你本地后台的文件系统，比如说，你当前主机的文件系统是btrfs，那么你的存储驱动最好也选择btrfs，下表列出了每个存储驱动和它对应所匹配的后台文件系统：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Storage driver&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Commonly used on&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;Disabled on&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;overlay&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;ext4 xfs&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;btrfs aufs overlay overlay2 zfs eCryptfs&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;overlay2&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;ext4 xfs&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;btrfs aufs overlay overlay2 zfs eCryptfs&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;aufs&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;ext4 xfs&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;btrfs aufs eCryptfs&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;devicemapper&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;direct-lvm&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;N/A&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;btrfs&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;btrfs &lt;em&gt;only&lt;/em&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;N/A&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;vfs&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;debugging &lt;em&gt;only&lt;/em&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;N/A&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;zfs&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;zfs &lt;em&gt;only&lt;/em&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;N/A&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;查看当前Docker使用的存储驱动命令&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker info
Containers: 10
 Running: 1
 Paused: 0
 Stopped: 9
Images: 5
Server Version: 1.12.3
Storage Driver: devicemapper
Backing Filesystem: xfs
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;在启动时Docker时指定存储驱动&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;dockerd --storage-driver&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;overlay
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;共享存储系统和存储驱动&quot;&gt;共享存储系统和存储驱动&lt;/h1&gt;
&lt;p&gt;许多企业使用共享存储（如SAN和NAS等），而Docker存储驱动程序是可以在这些共享存储上操作的，这是Docker在存储上有了更高的性能和可用性，但是目前，Docker还没有与这些共享存储进行集成，虽然没有和共享存储集成，但是，Docker的存储驱动程序是基于Linux文件系统和卷管理器的，所以Docker也能很好的在共享存储上进行使用。&lt;/p&gt;

&lt;h1 id=&quot;选择存储驱动建议&quot;&gt;选择存储驱动建议&lt;/h1&gt;
&lt;p&gt;在选择存储驱动之前，你必须了解到以下两点：
1.没有那个存储驱动最适合于那个用例
2.存储驱动正序正在不停的发展和改进
所以，我们在选择存储驱动的时候要注意：
1.稳定性&lt;/p&gt;
&lt;blockquote&gt;
  &lt;ul&gt;
    &lt;li&gt;使用默认的存储驱动&lt;/li&gt;
    &lt;li&gt;使用Docker指定的稳定版的存储驱动&lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;2.是否有使用该存储驱动的经验
你的开发团队是否有使用该存储驱动的经验，这也是你在选择存储驱动的时候需要考虑的&lt;/p&gt;

&lt;p&gt;3.该存储驱动是否发展成熟
许多人认为&lt;code class=&quot;highlighter-rouge&quot;&gt;OverlayFS&lt;/code&gt;是Docker 存储驱动未来发展的趋势，但是，相对于&lt;code class=&quot;highlighter-rouge&quot;&gt;aufs&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;devicemapper&lt;/code&gt;来说，它还不太成熟，所以在选择存储驱动的时候，要尽可能的选择已经发展成熟的存储驱动&lt;/p&gt;</content><author><name>KevinGuo</name></author><summary type="html">Select a storage driver</summary></entry><entry><title type="html">Docker基础-docker muti-host之overlay在docker swarm安全模式下的使用</title><link href="https://kevinguo.me/2017/07/06/Docker-overlay-security-model/" rel="alternate" type="text/html" title="Docker基础-docker muti-host之overlay在docker swarm安全模式下的使用" /><published>2017-07-06T00:00:00+08:00</published><updated>2017-07-06T00:00:00+08:00</updated><id>https://kevinguo.me/2017/07/06/Docker-overlay-security-model</id><content type="html" xml:base="https://kevinguo.me/2017/07/06/Docker-overlay-security-model/">&lt;h1 id=&quot;docker-swarm-mode-overlay-network-security-model&quot;&gt;Docker swarm mode overlay network security model&lt;/h1&gt;
&lt;p&gt;overlay 网络在docker swarm下的安全模式也是开箱即用的。swarm 节点之间通过&lt;code class=&quot;highlighter-rouge&quot;&gt;gossip&lt;/code&gt;协议来交换overlay 网络信息。节点使用GCM模式下的&lt;a href=&quot;https://en.wikipedia.org/wiki/Galois/Counter_Mode&quot;&gt;AES algorithm&lt;/a&gt;对通过&lt;code class=&quot;highlighter-rouge&quot;&gt;gossip&lt;/code&gt;协议来交换的信息进行加密和认证.管理节点每12小时轮询加密key一次&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;你还可以加密在overlay网路上运行的容器之间的交换数据，你可以通过使用&lt;code class=&quot;highlighter-rouge&quot;&gt;--opt&lt;/code&gt;来开启加密：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker network create --opt encrypted --driver overlay my-multi-host-network
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;当你开启了overlay 加密，docker 会为所有依附overlay网路的服务节点创建一个IPSEC通道，这个IPSEC通道也是使用GCM模式下的AES算法进行加密，并且每12小时轮询一次。&lt;/p&gt;

&lt;h1 id=&quot;swarm-mode-overlay-networks-and-unmanaged-containers&quot;&gt;Swarm mode overlay networks and unmanaged containers&lt;/h1&gt;
&lt;p&gt;因为在swarm 模式下的overlay 网络使用来自管理节点的加密密钥来加密gossip通信，只有作为swarm 中的任务运行的容器才能访问密钥，所以在swarm之外的容器是无法附加到overlay网络的。&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker run --network my-multi-host-network nginx

docker: Error response from daemon: swarm-scoped network
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;my-multi-host-network&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; is not compatible with &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;docker create&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; or &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;docker
run&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;. This network can only be used by a docker service.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;要解决这类问题，你可以将没在集群的容器，迁移到集群即可：&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker service create --network my-multi-host-network my-image
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;因为swarm mode是一个可选功能，docker engine保留了其向后的兼容性，你可以继续key-value的方式来存储overlay网络，但是，我们建议使用集群模式，不仅仅是因为前面所说的安全，swarm模式下还提供了很多API来提供更大的可伸缩性。&lt;/p&gt;</content><author><name>KevinGuo</name></author><summary type="html">Docker swarm mode overlay network security model overlay 网络在docker swarm下的安全模式也是开箱即用的。swarm 节点之间通过gossip协议来交换overlay 网络信息。节点使用GCM模式下的AES algorithm对通过gossip协议来交换的信息进行加密和认证.管理节点每12小时轮询加密key一次</summary></entry></feed>