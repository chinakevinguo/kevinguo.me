<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.4.3">Jekyll</generator><link href="https://kevinguo.me/feed.xml" rel="self" type="application/atom+xml" /><link href="https://kevinguo.me/" rel="alternate" type="text/html" /><updated>2017-09-01T18:03:36+08:00</updated><id>https://kevinguo.me/</id><title type="html">KevinGuo</title><subtitle>KevinGuo's blog</subtitle><author><name>KevinGuo</name></author><entry><title type="html">kubernetes 入门</title><link href="https://kevinguo.me/2017/09/01/kubernetes-one-section/" rel="alternate" type="text/html" title="kubernetes 入门" /><published>2017-09-01T00:00:00+08:00</published><updated>2017-09-01T00:00:00+08:00</updated><id>https://kevinguo.me/2017/09/01/kubernetes-one-section</id><content type="html" xml:base="https://kevinguo.me/2017/09/01/kubernetes-one-section/">&lt;h2 id=&quot;入门概念&quot;&gt;入门概念&lt;/h2&gt;

&lt;p&gt;为什么要使用kubernetes&lt;/p&gt;

&lt;p&gt;1.新技术&lt;/p&gt;

&lt;p&gt;2.精简.只需要一个架构师专注于“服务组件”的提炼，几名开发工程师专注于代码开发，几名系统运维工程师负责kubernetes的部署和运维&lt;/p&gt;

&lt;p&gt;3.kubernetes使用微服务架构&lt;/p&gt;

&lt;p&gt;4.更方便迁移&lt;/p&gt;

&lt;p&gt;5.超强的横向扩容能力&lt;/p&gt;

&lt;h3 id=&quot;master&quot;&gt;master&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;kube-apiserver
提供HTTP RESET接口的关键服务进程，是kubernetes所有资源增删改查的唯一入口，也是集群控制的入口进程&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;kube-controller-manager
kubernetes里所有资源对象的自动化控制中心。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;kube-scheduler
kubernetes里所有资源的调度中心&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;kube-proxy
实现kubernetes service的通信与负载均衡机制的重要组件&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;kubelet
负责pod对应容器的创建，启停等任务，同时与Master节点密切协作，实现集群管理的基本功能&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;etcd
保存kubernetes里所有数据的存储&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;docker
运行kubernetes 里面的容器&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;node&quot;&gt;node&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;kube-proxy
实现kubernetes service的通信与负载均衡机制的重要组件&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;kubelet
负责pod对应容器的创建，启停等任务，同时与Master节点密切协作，实现集群管理的基本功能&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;docker
运行kubernetes 里面的容器&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;pod&quot;&gt;pod&lt;/h3&gt;

&lt;p&gt;一个pause容器和一组业务容器组成，是kubernetes里面最基本的单元。&lt;/p&gt;

&lt;h4 id=&quot;pause-容器&quot;&gt;pause 容器&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;既然pod是一组容器组成，那么如何来判断这个pod的状态呢，是其中一个容器死亡了，就算整个pod死亡了，还是说按照某种N/M的死亡率来算呢？kubernetes里面引入了一个不易死亡又和业务无关的&lt;code class=&quot;highlighter-rouge&quot;&gt;pause&lt;/code&gt;容器，以它的状态来表示整个pod的状态。&lt;/li&gt;
  &lt;li&gt;pod里面的多个容器共享&lt;code class=&quot;highlighter-rouge&quot;&gt;pause&lt;/code&gt;容器里面的网络和volumes。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;普通pod和静态pod&quot;&gt;普通pod和静态pod&lt;/h4&gt;

&lt;p&gt;pod有两种类型：普通pod和静态pod&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;普通pod即是那些通过deployment，replicationcontroller，daemonset等部署的，这些pod一旦创建会被放入到etcd中，然后会被kubernetes master调度到某个node上，通过node上的kubelet进程实例化成一组相关的容器并启动起来。&lt;/li&gt;
  &lt;li&gt;静态pod是通过放在某个node上的一个具体的文件运行起来的。比如我们放在/etc/kubernetes/manifests下的某些静态文件。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;endpoints&quot;&gt;endpoints&lt;/h4&gt;

&lt;p&gt;kubernetes中，每个pod都有一个属于他的IP。&lt;code class=&quot;highlighter-rouge&quot;&gt;Pod IP + 需要暴露出来的ContainerPort&lt;/code&gt; 就组成了endpoint
说到service的endpoint，这里就不得不说下targetPort，targetPort属性用来确定提供该服务的容器所暴露的端口号，如果你不指定targetPort，kubernetes默认使用你提供的port为targetPort&lt;/p&gt;

&lt;p&gt;所以他们的关系应该是如下：&lt;/p&gt;

&lt;p&gt;service 暴露一个提供服务的端口—&amp;gt;{pod IP+targetPort}(容器内部暴露出来提供服务的端口号)
                                         ||
                                     {endpoint}&lt;/p&gt;
&lt;h4 id=&quot;pod-volume&quot;&gt;pod volume&lt;/h4&gt;

&lt;p&gt;pod中的volume能够被pod中的多个容器访问。kubernetes中的volume与pod的生命周期相同，但与容器的生命周期不相关。
通常是声明一个volume，然后在容器中引用这个volume并mount到容器的某个目录上。
常用的类型有：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;emptyDir&lt;/li&gt;
  &lt;li&gt;hostPath&lt;/li&gt;
  &lt;li&gt;Persistent Volume(GCE Persistent Disks、NFS、RBD、ISCSCI、AWS ElasticBlockStore、GlusterFS)，这就设计到分布式存储和外部存储的一些操作了，后续再讲吧&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ReplicationController&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;myweb&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;replicas&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;5&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# selector 如果不指定，默认和.spec.template.labels的值相同&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;myweb&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;myweb&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# 该处声明一个volume&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;datavol&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;emptyDir&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{}&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;containers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;myweb&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kubeguide/tomcat-app:v1&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;containerPort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;8080&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;MYSQL_SERVICE_HOST&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;mysql-service'&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;MYSQL_SERVICE_PORT&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;3306'&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# 该处进行引用并挂在到容器内部&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;volumeMounts&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;datavol&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;mountPath&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/mydata-data&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;pod-资源限制&quot;&gt;pod 资源限制&lt;/h4&gt;

&lt;p&gt;每个pod都能对其能使用的服务器上的资源来进行配额限制，当前能限制的只有CPU和Memory。在kubernetes里面，计算资源的限制主要是设定两个参数&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Limits 资源允许使用的最大值，不能超过&lt;/li&gt;
  &lt;li&gt;Requests 资源允许使用的最小值，最少必须满足这个需求&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我们通常将&lt;code class=&quot;highlighter-rouge&quot;&gt;request&lt;/code&gt; 设置为容器平时正常运行时所需的资源，而将&lt;code class=&quot;highlighter-rouge&quot;&gt;Limits&lt;/code&gt;设置为容器峰值负载情况下的最大使用量&lt;/p&gt;

&lt;h4 id=&quot;label-and-label-selector&quot;&gt;label and label selector&lt;/h4&gt;

&lt;p&gt;label即标签，是Kubernetes系统中另一个核心概念。一个label是一个&lt;code class=&quot;highlighter-rouge&quot;&gt;key=value&lt;/code&gt;的键值对。label可以附加到各种资源对象上，如Node、Pod、RC、Service等，一个资源对象可以附加无数的label，同一个label也可以附加到无数的资源对象上。&lt;/p&gt;

&lt;p&gt;通过指定&lt;code class=&quot;highlighter-rouge&quot;&gt;label selector&lt;/code&gt;来查询和筛选某些拥有label的资源对象，常用到的两种表达式&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;等式 (key=value)&lt;/li&gt;
  &lt;li&gt;集合式 (key in values)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;label selector&lt;/code&gt;在kubernetes中常用的场景如下：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;kub-controller-manager通过在RC上定义的&lt;code class=&quot;highlighter-rouge&quot;&gt;label selector&lt;/code&gt;来监控并控制POD的数量&lt;/li&gt;
  &lt;li&gt;kube-proxy 通过service上的&lt;code class=&quot;highlighter-rouge&quot;&gt;label selector&lt;/code&gt;来选择对应的pod，自动建立每个service到pod的路由请求，从而实现service的智能负载均衡&lt;/li&gt;
  &lt;li&gt;通过NodeSelector，将某些pod调度到指定的node上&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;注意：我们在指定&lt;code class=&quot;highlighter-rouge&quot;&gt;label selector&lt;/code&gt;时，需要和&lt;code class=&quot;highlighter-rouge&quot;&gt;.spec.template.metadata.labels&lt;/code&gt;下的值相同，如果不指定&lt;code class=&quot;highlighter-rouge&quot;&gt;label selector&lt;/code&gt;则默认保持和&lt;code class=&quot;highlighter-rouge&quot;&gt;.spec.template.metadata.labels&lt;/code&gt;的值相同&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;replicationcontrollerrc&quot;&gt;ReplicationController(RC)&lt;/h3&gt;
&lt;p&gt;我们将上面那个例子的yaml文件直接拿来解析&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# api版本，类型，全局唯一名称，这是所有kubernetes yaml文件都需要的&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ReplicationController&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;myweb&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# 定义pod期望数量&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;replicas&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;5&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# 用于筛选目标的selector 如果不指定，默认和.spec.template.labels的值相同&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;myweb&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# 当Pod副本数和期望数不一致时，用于创建新pod的模板&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;myweb&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# 该处声明一个volume&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;datavol&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;emptyDir&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{}&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;containers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;myweb&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kubeguide/tomcat-app:v1&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;containerPort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;8080&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;MYSQL_SERVICE_HOST&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;mysql-service'&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;MYSQL_SERVICE_PORT&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;3306'&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# 该处进行引用并挂在到容器内部&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;volumeMounts&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;datavol&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;mountPath&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/mydata-data&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;我们可以通过命令的形式来动态缩放POD的数量&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl scale rc mysql --replicas&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;2

&lt;span class=&quot;c&quot;&gt;# 删除pod&lt;/span&gt;
kubectl delete -f mysql-rc.yml
kubectl scale rc mysql --replicas&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;replicaset&quot;&gt;ReplicaSet&lt;/h3&gt;

&lt;p&gt;ReplicaSet和ReplicationController唯一的区别就是:ReplicaSet支持集合式的&lt;code class=&quot;highlighter-rouge&quot;&gt;label selector&lt;/code&gt;，我们平时很少单独使用&lt;code class=&quot;highlighter-rouge&quot;&gt;Replica Set&lt;/code&gt;，它主要是被&lt;code class=&quot;highlighter-rouge&quot;&gt;Deployment&lt;/code&gt;这个更高层的资源对象使用。&lt;/p&gt;

&lt;h3 id=&quot;deployment&quot;&gt;Deployment&lt;/h3&gt;
&lt;p&gt;Deployment在内部使用&lt;code class=&quot;highlighter-rouge&quot;&gt;Replica Set&lt;/code&gt;来实现目的，它管理着&lt;code class=&quot;highlighter-rouge&quot;&gt;Replica Set&lt;/code&gt;，而它管理&lt;code class=&quot;highlighter-rouge&quot;&gt;Replica Set&lt;/code&gt;的主要目的是为了支持版本回滚&lt;code class=&quot;highlighter-rouge&quot;&gt;Rollback&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;从下面命令所展示出来的命名规则我们不难发现，&lt;code class=&quot;highlighter-rouge&quot;&gt;Deployment&lt;/code&gt;创建的时候创建了&lt;code class=&quot;highlighter-rouge&quot;&gt;Replica Set&lt;/code&gt;，而&lt;code class=&quot;highlighter-rouge&quot;&gt;Replica Set&lt;/code&gt;创建了&lt;code class=&quot;highlighter-rouge&quot;&gt;Pod&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;kubectl get deployment -l k8s-app&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;kube-dns -n kube-system
NAME       DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE
kube-dns   2         2         2            2           6d

&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;kubectl get replicaset -l k8s-app&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;kube-dns -n kube-system
NAME                  DESIRED   CURRENT   READY     AGE
kube-dns-1446441763   2         2         2         6d

&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;kubectl get pods -l k8s-app&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;kube-dns -n kube-system
NAME                        READY     STATUS    RESTARTS   AGE
kube-dns-1446441763-0th37   3/3       Running   0          6d
kube-dns-1446441763-1w5gx   3/3       Running   0          6d
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;稍后，用实验来说明&lt;code class=&quot;highlighter-rouge&quot;&gt;Deployment&lt;/code&gt;在滚动升级中的作用&lt;/p&gt;

&lt;h3 id=&quot;pod滚动升级&quot;&gt;Pod滚动升级&lt;/h3&gt;

&lt;p&gt;在说Deployment的滚动升级之前，我们先来看看&lt;code class=&quot;highlighter-rouge&quot;&gt;ReplicationController&lt;/code&gt;的滚动升级&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ReplicationController&lt;/code&gt;的滚动升级和&lt;code class=&quot;highlighter-rouge&quot;&gt;Deployment&lt;/code&gt;的滚动升级有所不同，命令都不一样，通过执行&lt;code class=&quot;highlighter-rouge&quot;&gt;kubectl rolling-update&lt;/code&gt;来一键完成，该命令创建了一个新的RC，然后自动控制旧的RC中的POD副本数两逐渐减少到0，同时新RC中的POD数量从0逐步增加到目标值，最终实现POD的升级，滚动升级的配置文件必须满足如下三个条件：&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;metadata.name&lt;/code&gt;必须和旧RC文件中的不同&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;spec.selector&lt;/code&gt;至少有一个与旧RC的不同(&lt;strong&gt;这里有个BUG，具体参考&lt;a href=&quot;http://valleylord.github.io/post/201603-kubernetes-roll/&quot;&gt;这里&lt;/a&gt;&lt;/strong&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;metadata.namespace&lt;/code&gt; 命名空间必须的是一样的&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;下面我们将上面的&lt;code class=&quot;highlighter-rouge&quot;&gt;myweb&lt;/code&gt;进行一下升级，内容如下&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ReplicationController&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;myweb-v2&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;replicas&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;5&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v2&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;deployment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v2&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;myweb&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v2&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;deployment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v2&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;myweb&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# 该处声明一个volume&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;datavol&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;emptyDir&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{}&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;containers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;myweb&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kubeguide/tomcat-app:v2&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;containerPort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;8080&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;MYSQL_SERVICE_HOST&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;mysql-service'&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;MYSQL_SERVICE_PORT&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;13306'&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# 该处进行引用并挂在到容器内部&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;volumeMounts&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;datavol&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;mountPath&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/mydata-data&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;啊哦，升级的时候报错了&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;error: myweb-rc-update.yml must specify a matching key with non-equal value &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;Selector &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;myweb
See &lt;span class=&quot;s1&quot;&gt;'kubectl rolling-update -h'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;help &lt;/span&gt;and examples.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;没关系，既然用yaml文件无法升级，我们用命令的形式来试试&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl rolling-update myweb --image&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;kubeguide/tomcat-app:v2
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;OK，成了，开始升级了&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 我们发现旧的rc正在逐步减少，新的rc正在增多&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;kubectl get rc
NAME                                     DESIRED   CURRENT   READY     AGE
mysql                                    1         1         1         34m
myweb                                    2         2         2         19m
myweb-c1dc64330c885b62eca9fb5aafbfecc6   4         4         4         3m

&lt;span class=&quot;c&quot;&gt;# 旧的pods也正在一个个的被新的pod替换&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;kubectl get pods
NAME                                           READY     STATUS    RESTARTS   AGE
mysql-65lw6                                    1/1       Running   0          35m
myweb-c1dc64330c885b62eca9fb5aafbfecc6-88f8v   1/1       Running   0          4m
myweb-c1dc64330c885b62eca9fb5aafbfecc6-c97fh   1/1       Running   0          58s
myweb-c1dc64330c885b62eca9fb5aafbfecc6-ttlpm   1/1       Running   0          2m
myweb-c1dc64330c885b62eca9fb5aafbfecc6-wd6kj   1/1       Running   0          3m
myweb-c1dc64330c885b62eca9fb5aafbfecc6-zr57k   1/1       Running   0          1m
myweb-k9tsj                                    1/1       Running   0          20m

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;成功了～&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 成功后，将RC名称改为myweb，升级完成&lt;/span&gt;
Created myweb-c1dc64330c885b62eca9fb5aafbfecc6
Scaling up myweb-c1dc64330c885b62eca9fb5aafbfecc6 from 0 to 5, scaling down myweb from 5 to 0
Scaling myweb-c1dc64330c885b62eca9fb5aafbfecc6 up to 1
Scaling myweb down to 4
Scaling myweb-c1dc64330c885b62eca9fb5aafbfecc6 up to 2
Scaling myweb down to 3
Scaling myweb-c1dc64330c885b62eca9fb5aafbfecc6 up to 3
Scaling myweb down to 2
Scaling myweb-c1dc64330c885b62eca9fb5aafbfecc6 up to 4
Scaling myweb down to 1
Scaling myweb-c1dc64330c885b62eca9fb5aafbfecc6 up to 5
Scaling myweb down to 0
Update succeeded. Deleting old controller: myweb
Renaming myweb-c1dc64330c885b62eca9fb5aafbfecc6 to myweb
replicationcontroller &lt;span class=&quot;s2&quot;&gt;&quot;myweb&quot;&lt;/span&gt; rolling updated
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;那么为什么，我们在上面用yaml文件无法升级呢？&lt;/p&gt;

&lt;p&gt;经过一段时间的折腾，我发现，我旧的RC文件只有一个label，app=myweb;而当我用命令升级成功后,新的RC有了两个label，app=myweb和deployment=xxxxx&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 未升级之前的RC&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;kubectl get rc -o wide
NAME      DESIRED   CURRENT   READY     AGE       CONTAINER&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;S&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;   IMAGE&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;S&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;                  SELECTOR
mysql     1         1         1         48m       mysql          mysql                     &lt;span class=&quot;nv&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;mysql
myweb     5         5         5         8s        myweb          kubeguide/tomcat-app:v1   &lt;span class=&quot;nv&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;myweb

&lt;span class=&quot;c&quot;&gt;# 升级后的RC&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;kubectl get rc -o wide
NAME       DESIRED   CURRENT   READY     AGE       CONTAINER&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;S&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;   IMAGE&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;S&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;                  SELECTOR
mysql      1         1         1         43m       mysql          mysql                     &lt;span class=&quot;nv&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;mysql
myweb      4         4         4         6m        myweb          kubeguide/tomcat-app:v2   &lt;span class=&quot;nv&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;myweb,deployment&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;c1dc64330c885b62eca9fb5aafbfecc6
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然后当我再次对这个新的RC进行升级的时候，我发现是可以用yaml文件升级的，这说明什么？是不是旧的RC文件至少需要两个label才能用yaml文件升级呢？我们试试再说&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;为myweb添加不少于一个的label
    &lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# api版本，类型，全局唯一名称，这是所有kubernetes yaml文件都需要的&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ReplicationController&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;myweb&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# 定义pod期望数量&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;replicas&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# 用于筛选目标的selector 如果不指定，默认和.spec.template.labels的值相同&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;myweb&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# 当Pod副本数和期望数不一致时，用于创建新pod的模板&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;myweb&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 该处声明一个volume&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;datavol&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;emptyDir&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{}&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;containers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;myweb&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kubeguide/tomcat-app:v1&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;containerPort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;8080&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;MYSQL_SERVICE_HOST&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;mysql-service'&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;MYSQL_SERVICE_PORT&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;3306'&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# 该处进行引用并挂在到容器内部&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;volumeMounts&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;datavol&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;mountPath&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/mydata-data&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;新建一个用来升级myweb的yaml文件&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ReplicationController&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;myweb-v2&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;replicas&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;5&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v2&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;deployment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v2&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;myweb&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v2&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;deployment&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v2&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;myweb&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;# 该处声明一个volume&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;datavol&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;emptyDir&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;{}&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;containers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;myweb&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kubeguide/tomcat-app:v2&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;containerPort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;8080&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;MYSQL_SERVICE_HOST&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;mysql-service'&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;MYSQL_SERVICE_PORT&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;13306'&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# 该处进行引用并挂在到容器内部&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;volumeMounts&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;datavol&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;mountPath&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/mydata-data&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;我发现，真的可以升级了!!!&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;kubectl rolling-update myweb -f myweb-rc-update.yml
Created myweb-v2
Scaling up myweb-v2 from 0 to 5, scaling down myweb from 5 to 0
Scaling myweb-v2 up to 1
Scaling myweb down to 4
Scaling myweb-v2 up to 2
Scaling myweb down to 3
Scaling myweb-v2 up to 3
Scaling myweb down to 2
Scaling myweb-v2 up to 4
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;这说明什么？这说明，以后如果你要用&lt;code class=&quot;highlighter-rouge&quot;&gt;ReplicationController&lt;/code&gt;的时候，至少要给他指定不少于2个的label，否则，你无法用yaml来进行升级，这真的是很蛋疼的一件事。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;当然了，保不齐以后kubernetes会将&lt;code class=&quot;highlighter-rouge&quot;&gt;ReplicationController&lt;/code&gt;抛弃掉，毕竟现在它已经有了更好的&lt;code class=&quot;highlighter-rouge&quot;&gt;Deployment&lt;/code&gt;和&lt;code class=&quot;highlighter-rouge&quot;&gt;StatefulSet&lt;/code&gt;等…&lt;/p&gt;

&lt;h3 id=&quot;horizontal-pod-autoscaler-hpa&quot;&gt;Horizontal Pod Autoscaler (HPA)&lt;/h3&gt;

&lt;p&gt;前面我们说到能用&lt;code class=&quot;highlighter-rouge&quot;&gt;kubectl scale&lt;/code&gt;命令来手动实现 Pod 的扩容和缩容，这未免也太 low 了吧，我们既然用了kubernetes，那就是因为他的智能化，自动化。所以这里我们要讲讲kubernetes的智能扩容 HPA。&lt;/p&gt;

&lt;p&gt;HPA 基于获取到的metrics value(CPU utilization,custom metrics),对RC,Deployment管理的pods进行自动伸缩。HPA是kubernetes &lt;code class=&quot;highlighter-rouge&quot;&gt;autoscaling&lt;/code&gt; API组中的一个API资源，当前的stable版本只支持CPU，alpha版本中红，已经开始支持memory和custom metrics。&lt;/p&gt;

&lt;p&gt;HPA 以kubernetes API resource 和一个controller来实现，resource决定了controller的行为，而controller控制着pods的数量。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;截至到kubernetes 1.6 ，Release特性中仅支持CPU utilization这一 &lt;code class=&quot;highlighter-rouge&quot;&gt;resource metrics&lt;/code&gt;, 对&lt;code class=&quot;highlighter-rouge&quot;&gt;custom metrics&lt;/code&gt;的支持目前仍在alpha阶段。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;HPA controller 周期性的调整对应rc，deployment中的pods数量，使得获取到的&lt;code class=&quot;highlighter-rouge&quot;&gt;metrics value&lt;/code&gt;能匹配用户指定的&lt;code class=&quot;highlighter-rouge&quot;&gt;target utilization&lt;/code&gt;。这个周期默认为30s，可以通过&lt;code class=&quot;highlighter-rouge&quot;&gt;kube-controller-manager&lt;/code&gt;的flag &lt;code class=&quot;highlighter-rouge&quot;&gt;--horizontal-pod-autoscaler-sync-period&lt;/code&gt;进行设置。&lt;/p&gt;

&lt;p&gt;在每个HPA Controller的处理周期中，kube-controller-manager都去查询HPA获取到的metrics的utilization。查询方式根据metric类型不同而不同：&lt;/p&gt;

&lt;p&gt;如果metric type是resource metrics，则通过resource metrics API查询，直接通过Heapster访问
如果metric type属于custom metrics，则通过custom metrics API查询，通过REST client来访问&lt;/p&gt;

&lt;p&gt;计算伸缩比例算法：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;对于 resource metrics,比如 CPU，HPA controller 从resource metrics API中获取CPU metrics，如果HPA中设定了target utilization，则HPA controller 会将获取到的CPU metrics 除以对应容器的resource request值作为检测到的当前pod的resource utilization。如此计算完所有HPA对应的pods后，对该resource utilization values取平均值。最后将平均值除与定义的target utilization，得到伸缩比例。&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;注意：如果HPA对应的某些pods中的容器没有定义resource request，则HPA不会对这些pods进行scale&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;对于custome metrics，HPA Controller的伸缩算法几乎与resource metrics一样，不同的是：此时是根据custome metrics API查询到的metrics value对比target metrics value计算得到的，而不是通过utilization计算得到的&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;对于object metrics，HPA Controller获取到一个metric 值，然后与target metrics比较，得到如上所说的比率&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;HPA可以通过命令来实现，也可以通过配置文件的方式来实现。&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;kubectl autoscale deployment php-apache --cpu-percent&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;50 --min&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1 --max&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;10
deployment &lt;span class=&quot;s2&quot;&gt;&quot;php-apache&quot;&lt;/span&gt; autoscaled
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;下面我们用实验来感受下HPA&lt;/p&gt;

&lt;p&gt;首先我们来新建一个&lt;code class=&quot;highlighter-rouge&quot;&gt;php-apache&lt;/code&gt;的服务&lt;/p&gt;

&lt;p&gt;php-apache-deploy.yml&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;extensions/v1beta1&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Deployment&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;php-apache&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;default&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;replicas&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;matchLabels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;k8s-quark&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;php-apache&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;template&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;k8s-quark&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;php-apache&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;containers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;php-apache&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;gcr.io/google_containers/hpa-example:latest&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;imagePullPolicy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;IfNotPresent&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;containerPort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;80&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;resources&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;requests&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;cpu&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;200m&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;php-apache-svc.yml&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Service&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;php-apache&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;80&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;k8s-quark&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;php-apache&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl create -f php-apache-deploy.yml
kubectl create -f php-apache-svc.yml

&lt;span class=&quot;c&quot;&gt;# 查看当前的deployment&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;kubectl get deployment php-apache
NAME         DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE
php-apache   1         1         1            1           10m

&lt;span class=&quot;c&quot;&gt;# 查看php-apache的pods&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;kubectl get pods |grep php-apache
php-apache-3548797493-twq7k       1/1       Running   0          17m
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然后，我们用命令来创建一个HPA&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl autoscale deployment php-apache --cpu-percent&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;50 --min&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1 --max&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;10

&lt;span class=&quot;c&quot;&gt;# 看看我们创建好的hpa&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$  &lt;/span&gt;kubectl get hpa
NAME         REFERENCE               TARGETS    MINPODS   MAXPODS   REPLICAS   AGE
php-apache   Deployment/php-apache   0% / 50%   1         10        1          19m

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;这条命令的意思是，我们为&lt;code class=&quot;highlighter-rouge&quot;&gt;php-apache&lt;/code&gt;创建了一个HPA，指定了target metrics value是cpu利用率50%，而伸缩最小值为1，最大值为10&lt;/p&gt;

&lt;p&gt;最后，我们来持续访问&lt;code class=&quot;highlighter-rouge&quot;&gt;php-apache&lt;/code&gt;来给它压力，看看HPA会不会自动为我们扩容呢？&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 进入一个容器&lt;/span&gt;
kubectl run -ti load-generator --image&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;busybox /bin/sh

&lt;span class=&quot;c&quot;&gt;# 持续访问&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;while &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;do &lt;/span&gt;wget -q -O- http://php-apache.default.svc.cluster.local; &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;过了几分钟，我们看看结果咋样&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# HPA状态&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$  &lt;/span&gt;kubectl get hpa
NAME         REFERENCE               TARGETS      MINPODS   MAXPODS   REPLICAS   AGE
php-apache   Deployment/php-apache   313% / 50%   1         10        4          22m

&lt;span class=&quot;c&quot;&gt;# deployment状态&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$  &lt;/span&gt;kubectl get deployment php-apache
NAME         DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE
php-apache   4         4         4            4           25m

&lt;span class=&quot;c&quot;&gt;# HPA状态&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$  &lt;/span&gt;kubectl get hpa
NAME         REFERENCE               TARGETS     MINPODS   MAXPODS   REPLICAS   AGE
php-apache   Deployment/php-apache   90% / 50%   1         10        8          26m

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;我们发现，随着我们的持续访问增压，HPA会自动的为我们将&lt;code class=&quot;highlighter-rouge&quot;&gt;php-apache&lt;/code&gt;进行扩容，随着&lt;code class=&quot;highlighter-rouge&quot;&gt;php-apahce&lt;/code&gt;的扩容，CPU开始慢慢下降，直到最终符合我们指定的低于50%的标准，或者达到最大值10个POD。而当我们停止对&lt;code class=&quot;highlighter-rouge&quot;&gt;php-apache&lt;/code&gt;的访问，最终，HPA会恢复到默认1个pod的状态。&lt;/p&gt;

&lt;p&gt;用yaml文件的方式，最终的效果和上面是一样的&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;autoscaling/v1&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;HorizontalPodAutoscaler&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;php-apache&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;default&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# 指定针对谁来使用HPA&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;scaleTargetRef&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;extensions/v1beta1&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Deployment&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;php-apache&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;minReplicas&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;maxReplicas&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;10&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# 用户定义的CPU利用率&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;targetCPUUtilizationPercentage&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;50&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;至于其它的HPA metrica，改天再讲吧，毕竟现在还只是alpha版本，而且需要heapster目前也无法收集那么多metrics&lt;/p&gt;

&lt;h3 id=&quot;service&quot;&gt;Service&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/service-rc-pod.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;透过上图，我们可以发现，service定义了一个服务的访问入口地址，前端的pod通过这个入口地址来访问其背后一组由pod组成的集群实例，而背后这组pod则是通过RC来生成并保持住的。他们三者之间，通过&lt;code class=&quot;highlighter-rouge&quot;&gt;label selector&lt;/code&gt;来保持关联。&lt;/p&gt;

&lt;p&gt;我们知道，正常情况下，要通过一个如果访问后端的集群服务，最好的办法是在前端弄一个负载均衡(nginx,haproxy…)，暴露一个对外服务的端口，然后反代到后端的ip+port。而kubernetes也遵循了这样的做法。
在上图中，frontal pod 访问 service 时，kubernetes其实是通过其内部的 kube-proxy 来进行负载均衡，然后将请求转发到后端的某个pod上。但kubernetes不是使用的一个实际的负载均衡IP地址，而是为每个service分配了一个全局唯一的虚拟IP地址，这个虚拟IP被称为Cluster IP，只能在kubernetes 集群内部被访问(意思就是只能在集群内的pod中才能访问)，而且一旦创建，在service的整个生命周期内，都不会发生变动。&lt;/p&gt;

&lt;p&gt;下面我们来创建一个service看看&lt;/p&gt;
&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v1&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Service&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# service全局唯一名称，后面在cluster中可以直接使用的名称&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;tomcat-service&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;ports&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# service提供服务的端口&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;8080&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;service-port&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# 后端容器提供服务暴露的端口，如果不指定，默认暴露service提供服务的端口&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;targetPort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;8080&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;8005&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;shutown-port&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;targetPort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;8005&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# 指定label selector 确认该服务和后端那些pod关联起来&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;selector&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mysql&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;kubernetes服务发现机制&quot;&gt;kubernetes服务发现机制&lt;/h4&gt;

&lt;p&gt;最开始的时候kubernetes使用变量的形式，来发现服务，后来使用内部DNS来进行服务名解析，还有人认为使用consul的服务发现机制，其实我并不觉得这比内部的DNS服务发现好多少。&lt;/p&gt;

&lt;h5 id=&quot;kubernetes内部dns寻址服务发现&quot;&gt;kubernetes内部dns寻址服务发现&lt;/h5&gt;

&lt;p&gt;1.kubectl 执行创建的时候会向APIServer请求创建一个service。APIServer获取到请求后调用相应的api创建一个service对象，并写入etcd保存。
2.kube-dns通过&lt;code class=&quot;highlighter-rouge&quot;&gt;list/watch&lt;/code&gt;操作向APIServer发送GET请求。这时因为有service的创建，所以APIServer会相应这个请求并把service回复给kube-dns。
3.APIServer将创建的service信息回复给kube-dns,还会附带一个APIServer分配给service的Cluster IP。
4.kube-dns通过检测并得到APIServer回复的service信息，会生成DNS条目，并把这个DNS条目存储到内存(Tree-Cache)中
5.kubernetes中访问service的时候，会先去dnsmasq中查找缓存，找不到则去kubedns中查找dns条目，最终实现service的解析。(sidecar是用于检查其他两个容器的健康状态)&lt;/p&gt;

&lt;p&gt;通过dns的服务发现机制，有个弊端就是服务的健康检查，不过这一点通过pod的健康检查可以填补。&lt;/p&gt;

&lt;h5 id=&quot;consuletcd等服务发现机制&quot;&gt;consul、etcd等服务发现机制&lt;/h5&gt;

&lt;p&gt;consul：这个具体还没实施过，大致意思就是，容器启动时注册自己的ip+port到consul，然后consul自己做健康检查，最终将其发往fabio，fabio是个大路由，前端统一反代到fabio。
etcd：大体实现方式，就是写脚本通过etcd的api注册服务，然后再写一个service discover的脚本循环查询注册进去的service，对比template中的内容，然后生成新的配置文件进行更新。&lt;/p&gt;</content><author><name>KevinGuo</name></author><summary type="html">入门概念</summary></entry><entry><title type="html">docker+consul+consul-template+registrator+nginx 的容器服务注册发现</title><link href="https://kevinguo.me/2017/09/01/docker-consul-consul-template-registrator-nginx/" rel="alternate" type="text/html" title="docker+consul+consul-template+registrator+nginx 的容器服务注册发现" /><published>2017-09-01T00:00:00+08:00</published><updated>2017-09-01T00:00:00+08:00</updated><id>https://kevinguo.me/2017/09/01/docker-consul-consul-template-registrator-nginx</id><content type="html" xml:base="https://kevinguo.me/2017/09/01/docker-consul-consul-template-registrator-nginx/">&lt;h3 id=&quot;前言&quot;&gt;前言&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;以前了解过一段时间的consul，只知道consul是一个服务发现的工具，但是具体是怎么注册的，又是怎么服务发现的，一点也不清楚，这次趁着研究kubernetes的服务发现，顺带研究了下consul，在此记录下来。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;概念&quot;&gt;概念&lt;/h3&gt;

&lt;p&gt;简单来说，consul是一个提供服务注册、服务发现、键值存储、健康检查的工具，并且它支持多数据中心。&lt;/p&gt;

&lt;p&gt;举个简单的例子，假若我们有一个暴露REST API的服务，为了高可用，我们决定为该服务提供3个服务实例，但是每个容器的地址和端口都是随机的，那么我们的服务之间怎么通信呢，我们又该怎么在前端LB上添加我们的后端服务呢？这时候就需要用到我们的服务发现工具consul了，其实还有很多其他的服务发现工具，比如etcd，zookeeper等等，这里我们重点说下consul。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;服务之间的通信，这个很简单，我们通过LB即可，所有的服务之间的互相访问，都通过LB即可，我们只需要确定每个服务对于的域名即可。&lt;/li&gt;
  &lt;li&gt;在LB上动态添加后端，这个通过consul-template+consul+registrator即可,consul-template会监控consul中的对应内容，然后根据consul模板文件生成新的配置&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;该实验所需的所有配置文件内容都放在我的&lt;a href=&quot;https://github.com/chinakevinguo/docker-consul.git&quot;&gt;Github&lt;/a&gt;上:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;该项目提供了一种简单的方法，使用consul-template将consul中的值生成具体所需的配置文件，并且实时监控consul，根据模板文件生成最新的配置文件，然后运行某些指定命令。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;由于环境有限，我下面所有的实验都是在一台机器上用docker完成，你只需要修改对应的IP地址即可&lt;/p&gt;

&lt;h3 id=&quot;consul&quot;&gt;Consul&lt;/h3&gt;

&lt;p&gt;提供服务注册和服务发现&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 注意这里我指定了-client是为了方便我通过外网访问consul ui&lt;/span&gt;

docker run -d --net&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;host --name consul -h consul -e &lt;span class=&quot;s1&quot;&gt;'CONSUL_LOCAL_CONFIG={&quot;skip_leave_on_interrupt&quot;: true}'&lt;/span&gt; consul agent -server -client &lt;span class=&quot;nv&quot;&gt;$HOST_IP&lt;/span&gt; -ui -bootstrap
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;registrator&quot;&gt;Registrator&lt;/h3&gt;

&lt;p&gt;将宿主机上的容器自动注册到consul中&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
docker run -d --net&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;host -v /var/run/docker.sock:/tmp/docker.sock --name registrator -h registrator gliderlabs/registrator:latest -internal consul://&lt;span class=&quot;nv&quot;&gt;$HOST_IP&lt;/span&gt;:8500
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;nginx-with-consul-template&quot;&gt;Nginx with consul-template&lt;/h3&gt;

&lt;p&gt;利用consul-template监控consul，根据模板生成新的配置，并提供负载均衡&lt;/p&gt;

&lt;p&gt;将上面地址中的内容clone到本地,build nginx-consul镜像&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/chinakevinguo/docker-consul.git
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;docker-consul
chmod +x start.sh
docker build -t docker-consul .
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;启动nginx&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run -p 8080:80 -d --name nginx -e &lt;span class=&quot;nv&quot;&gt;CONSUL_URL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;163.44.165.142:8500 --volume ~/docker-consul/service.ctmpl:/templates/service.ctmpl  nginx-consul
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;启动一些服务实例&quot;&gt;启动一些服务实例&lt;/h3&gt;

&lt;p&gt;具体提供服务的实例&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run -d -P --name node1 -h node1 jlordiales/python-micro-service:latest
docker run -d -P --name node2 -h node2 jlordiales/python-micro-service:latest
docker run -d -P --name node3 -h node3 jlordiales/python-micro-service:latest
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;启动完成后，我们来看看nginx中是否已经动态添加了这些后端呢&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;docker &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; -ti nginx cat /etc/nginx/conf.d/service.conf
upstream python-service &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  least_conn;
  server 172.17.0.5:5000 &lt;span class=&quot;nv&quot;&gt;max_fails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;3 &lt;span class=&quot;nv&quot;&gt;fail_timeout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;60 &lt;span class=&quot;nv&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1;
  server 172.17.0.6:5000 &lt;span class=&quot;nv&quot;&gt;max_fails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;3 &lt;span class=&quot;nv&quot;&gt;fail_timeout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;60 &lt;span class=&quot;nv&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1;
  server 172.17.0.7:5000 &lt;span class=&quot;nv&quot;&gt;max_fails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;3 &lt;span class=&quot;nv&quot;&gt;fail_timeout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;60 &lt;span class=&quot;nv&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1;
  server 172.17.0.8:5000 &lt;span class=&quot;nv&quot;&gt;max_fails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;3 &lt;span class=&quot;nv&quot;&gt;fail_timeout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;60 &lt;span class=&quot;nv&quot;&gt;weight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1;

&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

server &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  listen 80 default_server;

  charset utf-8;

  location /&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    proxy_pass http://python-service;
    proxy_set_header X-Forwarded-For &lt;span class=&quot;nv&quot;&gt;$proxy_add_x_forwarded_for&lt;/span&gt;;
    proxy_set_header Host &lt;span class=&quot;nv&quot;&gt;$host&lt;/span&gt;;
    proxy_set_header X-Real-IP &lt;span class=&quot;nv&quot;&gt;$remote_addr&lt;/span&gt;;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然后我们来看看我们的consul ui中展现了那些内容呢&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/consul-ui.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我们发现我们的python-micro-service 服务目前有4个，而且当我们通过如下命令访问的时候，也是4个轮询着被访问&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;while &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;do &lt;/span&gt;curl 163.44.165.142:8080; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; ----; sleep 1; &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;;
Hello World from node4----
Hello World from node1----
Hello World from node2----
Hello World from node3----
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;这时候，如果我马上停掉其中一个呢,我们发现consul ui中的服务也相应的减少，而且用命令访问的时候，也已经变成了3个&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/consul-ui-service.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;while &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;do &lt;/span&gt;curl 163.44.165.142:8080; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; ----; sleep 1; &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;;
Hello World from node1----
Hello World from node2----
Hello World from node3----
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;文章写的比较简单，其实就是通过一个简单的实验，了解了下consul的服务注册，服务发现，以及如何使用consul-template来动态的生成对应的配置文件，而关于服务注册，我们使用的是registrator，也许你的项目需要调用consul的HTTP API来注册也说不定，具体你可以去&lt;a href=&quot;https://www.consul.io/&quot;&gt;consul官网&lt;/a&gt;了解更多。&lt;/p&gt;</content><author><name>KevinGuo</name></author><summary type="html">前言</summary></entry><entry><title type="html">Docker基础-理解容器之间的通信</title><link href="https://kevinguo.me/2017/08/23/Docker-container-communication/" rel="alternate" type="text/html" title="Docker基础-理解容器之间的通信" /><published>2017-08-23T00:00:00+08:00</published><updated>2017-08-23T00:00:00+08:00</updated><id>https://kevinguo.me/2017/08/23/Docker-container-communication</id><content type="html" xml:base="https://kevinguo.me/2017/08/23/Docker-container-communication/">&lt;p&gt;本节主要是讲解docker容器是如何在默认的&lt;code class=&quot;highlighter-rouge&quot;&gt;bridge&lt;/code&gt;网络上进行通信的。&lt;/p&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;和外网通信&quot;&gt;和外网通信&lt;/h3&gt;

&lt;p&gt;容器能否和外网进行通信，取决两个因素。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;主机上的&lt;code class=&quot;highlighter-rouge&quot;&gt;ip_forward&lt;/code&gt;是否打开，默认为true&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;iptables&lt;/code&gt;规则是否允许被修改，默认为true&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果在启动 Docker 服务的时候设定 –ip-forward=true, Docker 就会自动设定系统的 ip_forward 参数为 1。如果你的系统上打开了&lt;code class=&quot;highlighter-rouge&quot;&gt;ip_froward&lt;/code&gt;，而你在docker中设定&lt;code class=&quot;highlighter-rouge&quot;&gt;--ip-forward=flase&lt;/code&gt;，这不会起作用。&lt;/p&gt;

&lt;p&gt;关于&lt;code class=&quot;highlighter-rouge&quot;&gt;ip_froward&lt;/code&gt;的实验&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run -d --name  db  training/postgres

&lt;span class=&quot;c&quot;&gt;# 这时候首先去将ip_froward设置为false，发现无法ping通外网&lt;/span&gt;
 docker &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; -ti db ping www.baidu.com

&lt;span class=&quot;c&quot;&gt;# 这时候再将ip_forward设置为true，发现可以ping通外网&lt;/span&gt;
docker &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; -ti db ping www.baidu.com
PING www.a.shifen.com &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;103.235.46.39&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 56&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;84&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; bytes of data.
64 bytes from 103.235.46.39: &lt;span class=&quot;nv&quot;&gt;icmp_seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1 &lt;span class=&quot;nv&quot;&gt;ttl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;54 &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;56.3 ms
64 bytes from 103.235.46.39: &lt;span class=&quot;nv&quot;&gt;icmp_seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;2 &lt;span class=&quot;nv&quot;&gt;ttl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;54 &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;56.3 ms

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;默认情况下，docker会在启动容器的时候，在iptables中添加规则，如果你设定&lt;code class=&quot;highlighter-rouge&quot;&gt;--iptables=false&lt;/code&gt;，docker将不会修改你的防火墙规则。&lt;/p&gt;

&lt;p&gt;关于&lt;code class=&quot;highlighter-rouge&quot;&gt;--iptables&lt;/code&gt;的实验&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 首先，确认下有没有关于docker0的防火墙规则，有就删除掉&lt;/span&gt;
iptables -S |grep docker0

&lt;span class=&quot;c&quot;&gt;# 然后测试ping外网，发现无法ping通&lt;/span&gt;
docker &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; -ti db ping www.baidu.com

&lt;span class=&quot;c&quot;&gt;# 这时候将iptables改为true，查看防火墙规则，又添加了关于docker0的规则&lt;/span&gt;
iptables -S |grep docker
-A FORWARD -o docker0 -j DOCKER
-A FORWARD -o docker0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
-A FORWARD -i docker0 ! -o docker0 -j ACCEPT
-A FORWARD -i docker0 -o docker0 -j ACCEPT

&lt;span class=&quot;c&quot;&gt;# 测试发现能ping通外网&lt;/span&gt;

docker &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; -ti db ping www.baidu.com
PING www.a.shifen.com &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;103.235.46.39&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 56&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;84&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; bytes of data.
64 bytes from 103.235.46.39: &lt;span class=&quot;nv&quot;&gt;icmp_seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1 &lt;span class=&quot;nv&quot;&gt;ttl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;54 &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;56.3 ms
64 bytes from 103.235.46.39: &lt;span class=&quot;nv&quot;&gt;icmp_seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;2 &lt;span class=&quot;nv&quot;&gt;ttl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;54 &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;56.3 ms
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;默认情况下，容器可以和任何外部地址进行通信。除非你设定仅仅只有那些地址可以访问内部的容器。如下，设定只有8.8.8.8能访问内部容器&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;iptables -I DOCKER -i ext_if ! -s 8.8.8.8 -j DROP
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;容器之间通信&quot;&gt;容器之间通信&lt;/h3&gt;

&lt;p&gt;容器之间是否能进行通信，取决于系统层面的两个因素。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;容器网络是否连接到&lt;code class=&quot;highlighter-rouge&quot;&gt;docker0&lt;/code&gt;网络，默认是连接到docker0&lt;/li&gt;
  &lt;li&gt;你的&lt;code class=&quot;highlighter-rouge&quot;&gt;iptables&lt;/code&gt;是否允许被修改，默认为true,你的&lt;code class=&quot;highlighter-rouge&quot;&gt;--icc&lt;/code&gt;状态，默认为true&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;注意：如果你使用默认的&lt;code class=&quot;highlighter-rouge&quot;&gt;iptables=true&lt;/code&gt;，则当&lt;code class=&quot;highlighter-rouge&quot;&gt;--icc=true&lt;/code&gt;时会添加 ACCEPT 规则，当&lt;code class=&quot;highlighter-rouge&quot;&gt;--icc=false&lt;/code&gt;时会添加 DROP 规则; 当然如果你的&lt;code class=&quot;highlighter-rouge&quot;&gt;iptables=false&lt;/code&gt;则无所谓了，反正不会修改你的防火墙规则&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;关于&lt;code class=&quot;highlighter-rouge&quot;&gt;--icc&lt;/code&gt;的实验&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 设置--icc=false发现容器之间无法ping通,如果你发现你依然能ping通，那可能是前面的防火墙配置，执行iptables -F 清空下再试&lt;/span&gt;
docker &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; -ti db ping 172.17.0.3


&lt;span class=&quot;c&quot;&gt;# 设置--icc=true发现容器之间可以ping通&lt;/span&gt;
docker &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; -ti db ping 172.17.0.3
PING 172.17.0.3 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;172.17.0.3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; 56&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;84&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; bytes of data.
64 bytes from 172.17.0.3: &lt;span class=&quot;nv&quot;&gt;icmp_seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1 &lt;span class=&quot;nv&quot;&gt;ttl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;64 &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.128 ms
64 bytes from 172.17.0.3: &lt;span class=&quot;nv&quot;&gt;icmp_seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;2 &lt;span class=&quot;nv&quot;&gt;ttl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;64 &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.110 ms
64 bytes from 172.17.0.3: &lt;span class=&quot;nv&quot;&gt;icmp_seq&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;3 &lt;span class=&quot;nv&quot;&gt;ttl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;64 &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0.096 ms

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;注意：所以，我们启动docker之前，就要确定好，到底是否需要允许docker修改iptables，是否允许容器之间通信，是否允许容器访问外网等&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;主机之间的容器通信&quot;&gt;主机之间的容器通信&lt;/h3&gt;

&lt;p&gt;官网上说的是将默认FORWARD DROP策略改为 ACCEPT，其实没那个必要，使用overlay网络就好了,比如:flannel,weave,calico等等…&lt;/p&gt;</content><author><name>KevinGuo</name></author><summary type="html">本节主要是讲解docker容器是如何在默认的bridge网络上进行通信的。</summary></entry><entry><title type="html">High Availability Ranchers for docker hosts</title><link href="https://kevinguo.me/2017/08/22/Rancher-for-docker-hosts/" rel="alternate" type="text/html" title="High Availability Ranchers for docker hosts" /><published>2017-08-22T00:00:00+08:00</published><updated>2017-08-22T00:00:00+08:00</updated><id>https://kevinguo.me/2017/08/22/Rancher-for-docker-hosts</id><content type="html" xml:base="https://kevinguo.me/2017/08/22/Rancher-for-docker-hosts/">&lt;h3 id=&quot;前言&quot;&gt;前言&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;由于公司目前有部分业务跑在docker上，但又还没有上诸如:swarm,kubernetes之类的容器编排工具，但是又想要能对docker主机及容器进行一个简单可视化的管理，筛选来，筛选去，发现无论是:DockerUI、Shipyard、portainer还是Daocloud都不能符合我们的心意，最终决定使用&lt;code class=&quot;highlighter-rouge&quot;&gt;rancher&lt;/code&gt;来进行管理。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;rancher是什么&quot;&gt;Rancher是什么&lt;/h3&gt;

&lt;p&gt;借用官方文档里面的话来说，Rancher是一个开源的容器管理平台。&lt;/p&gt;

&lt;p&gt;实际上Rancher能够整合目前市面上大多数的容器编排工具，如：swarm、kubernetes、mesos等，而且，它本身最拥有一个最基础的编排工具cattle，本次我们使用的就是它的cattle编排器。&lt;/p&gt;

&lt;h3 id=&quot;环境准备&quot;&gt;环境准备&lt;/h3&gt;

&lt;p&gt;所有系统均为&lt;code class=&quot;highlighter-rouge&quot;&gt;CentOS 7.2&lt;/code&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;IP&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;ROLE&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;172.30.33.44&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Rancher Server 01&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;172.30.33.45&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Rancher Server 02&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;172.30.33.227&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;External MySQL Server&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;172.30.33.183&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;Nginx LB&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;所需镜像如下&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;IMAGE&lt;/th&gt;
      &lt;th style=&quot;text-align: left&quot;&gt;VERSION&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;rancher/server&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;latest&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;rancher/agent&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;v1.2.5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;rancher/scheduler&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;v0.8.2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;rancher/healthcheck&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;v0.3.1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;rancher/dns&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;v0.15.1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;rancher/metadata&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;v0.9.3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;rancher/net&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;v0.11.7&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;rancher/net&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;holder&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;rancher/network-manager&lt;/td&gt;
      &lt;td style=&quot;text-align: left&quot;&gt;v0.7.7&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;rancher-server&quot;&gt;Rancher Server&lt;/h3&gt;

&lt;h5 id=&quot;ecternal-mysql-server&quot;&gt;Ecternal mySQL Server&lt;/h5&gt;

&lt;p&gt;使用如下命令，创建&lt;code class=&quot;highlighter-rouge&quot;&gt;cattle&lt;/code&gt;数据库和&lt;code class=&quot;highlighter-rouge&quot;&gt;cattle&lt;/code&gt;用户&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CREATE DATABASE IF NOT EXISTS cattle COLLATE &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'utf8_general_ci'&lt;/span&gt; CHARACTER SET &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'utf8'&lt;/span&gt;;
GRANT ALL ON cattle.&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; TO &lt;span class=&quot;s1&quot;&gt;'cattle'&lt;/span&gt;@&lt;span class=&quot;s1&quot;&gt;'%'&lt;/span&gt; IDENTIFIED BY &lt;span class=&quot;s1&quot;&gt;'cattle'&lt;/span&gt;;
GRANT ALL ON cattle.&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; TO &lt;span class=&quot;s1&quot;&gt;'cattle'&lt;/span&gt;@&lt;span class=&quot;s1&quot;&gt;'localhost'&lt;/span&gt; IDENTIFIED BY &lt;span class=&quot;s1&quot;&gt;'cattle'&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h5 id=&quot;rancher-server-1&quot;&gt;Rancher Server&lt;/h5&gt;

&lt;p&gt;在每台Node上执行如下命令&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run -d --restart&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;unless-stopped -p 8080:8080 -p 9345:9345 rancher/server &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
     --db-host myhost.example.com --db-port 3306 --db-user username --db-pass password --db-name cattle &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
     --advertise-address &amp;lt;IP_of_the_Node&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt; 如果你改变了&lt;code class=&quot;highlighter-rouge&quot;&gt;-p 8080:8080&lt;/code&gt;端口，则需要额外添加一个参数&lt;code class=&quot;highlighter-rouge&quot;&gt;--addvertise-http-port &amp;lt;host_port&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&quot;nginx-lb&quot;&gt;Nginx LB&lt;/h5&gt;

&lt;p&gt;在nginx的Vhost中添加如下两个文件&lt;/p&gt;

&lt;p&gt;rancher-upstream.conf&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;upstream rancher-server &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        server 172.30.33.44:8080;
        server 172.30.33.45:8080;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
map &lt;span class=&quot;nv&quot;&gt;$http_upgrade&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$connection_upgrade&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    default Upgrade;
    &lt;span class=&quot;s1&quot;&gt;''&lt;/span&gt;      close;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;         
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;rancher.conf&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;server &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        listen 80;
        server_name rancher.quark.com;

        access_log  logs/rancher_access.log main;
        location / &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;#internal;&lt;/span&gt;
        proxy_set_header Host &lt;span class=&quot;nv&quot;&gt;$host&lt;/span&gt;;
        proxy_set_header X-Forwarded-Proto &lt;span class=&quot;nv&quot;&gt;$scheme&lt;/span&gt;;
        proxy_set_header X-Forwarded-Port &lt;span class=&quot;nv&quot;&gt;$server_port&lt;/span&gt;;
        proxy_set_header X-Forwarded-For &lt;span class=&quot;nv&quot;&gt;$proxy_add_x_forwarded_for&lt;/span&gt;;
        proxy_pass http://rancher-server;
        proxy_http_version 1.1;
        proxy_set_header Upgrade &lt;span class=&quot;nv&quot;&gt;$http_upgrade&lt;/span&gt;;
        proxy_set_header Connection &lt;span class=&quot;nv&quot;&gt;$connection_upgrade&lt;/span&gt;;
        proxy_read_timeout 900s;
        &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;       
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;rancher-agent&quot;&gt;Rancher agent&lt;/h3&gt;

&lt;p&gt;上面的步骤完成后，我们来访问我们的rancher ui，然后来添加host
&lt;img src=&quot;/images/posts/rancher-add-agent.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;依次添加完你的docker host之后，如下图
&lt;img src=&quot;/images/posts/rancher-ui.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;后记&quot;&gt;后记&lt;/h3&gt;

&lt;p&gt;rancher上还有很多功能，感兴趣的同学可以去自行研究下，我这里只是一个临时的需求，所以就不做过多的实例了。&lt;/p&gt;</content><author><name>KevinGuo</name></author><summary type="html">前言</summary></entry><entry><title type="html">jekyll 搭建静态博客之https番外篇</title><link href="https://kevinguo.me/2017/07/13/jekyll-create-a-static-blog(3)/" rel="alternate" type="text/html" title="jekyll 搭建静态博客之https番外篇" /><published>2017-07-13T00:00:00+08:00</published><updated>2017-07-13T00:00:00+08:00</updated><id>https://kevinguo.me/2017/07/13/jekyll-create-a-static-blog(3)</id><content type="html" xml:base="https://kevinguo.me/2017/07/13/jekyll-create-a-static-blog(3)/">&lt;blockquote&gt;
  &lt;p&gt;上一篇HTTPS是使用cloudflare进行加密的，所有的请求都交给cloudflare来进行转发，就会出现域名指向的IP不是主机的问题，虽然安全些，但是总感觉怪怪的，所以这一篇，直接通过 nginx+docker+let’s encrypt 搭建HTTPS认证&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!--more--&gt;
&lt;h3 id=&quot;前提&quot;&gt;前提&lt;/h3&gt;

&lt;p&gt;首先记得将 cloudflare 上有关你的站点的https配置删掉，如果没有做过，则忽略，同时记得去你的 DNS 控制器上将你的域名解析改为默认&lt;/p&gt;

&lt;h3 id=&quot;搭建过程&quot;&gt;搭建过程&lt;/h3&gt;

&lt;p&gt;搭建过程比较简单&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;准备好你前端的 nginx 服务器&lt;/li&gt;
  &lt;li&gt;准备好你后端的 docker 容器&lt;/li&gt;
  &lt;li&gt;clone let’s encrypt 到服务器&lt;/li&gt;
  &lt;li&gt;生成证书&lt;/li&gt;
  &lt;li&gt;配置你的 nginx&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;1.准备 nginx&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;yum update

yum install nginx
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;2.clone let’s encrypt 到服务器&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/certbot/certbot.git
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;3.准备 docker 容器&lt;/p&gt;

&lt;p&gt;一条命令即可&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run -d --name chinakevinguo_jekyll_kevinguo_me --restart&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;always -p 127.0.0.1:1080:80 chinakevinguo_jekyll_kevinguo_me
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;4.生成证书&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注意：如果你开了防火墙，记得一定要将防火墙关闭，否则生成证书的时候可能会报错&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl stop firewalld

&lt;span class=&quot;c&quot;&gt;# 将这里的域名，换成你自己的域名&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;certbot
./certbot-auto certonly --nginx -d kevinguo.me -d www.kevinguo.me
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;成功后，内容如下&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;IMPORTANT NOTES:
 - Congratulations! Your certificate and chain have been saved at
   /etc/letsencrypt/live/kevinguo.me/fullchain.pem. Your cert will
   expire on 2017-10-11. To obtain a new or tweaked version of this
   certificate &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;the future, simply run certbot-auto again. To
   non-interactively renew &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;all&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; of your certificates, run
   certbot-auto renew
 - If you like Certbot, please consider supporting our work by:

   Donating to ISRG / Lets Encrypt:   https://letsencrypt.org/donate
   Donating to EFF:                    https://eff.org/donate-le
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;然后生成&lt;code class=&quot;highlighter-rouge&quot;&gt;dhparam&lt;/code&gt;证书，可能会花费一段时间&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;openssl dhparam -out /etc/letsencrypt/live/kevinguo.me/dhparam.pem 2048
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;5.配置你的 nginx&lt;/p&gt;

&lt;p&gt;nginx 的配置尽量模块化，这里通过 nginx 作为代理，访问后端的 docker 容器&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;nginx.conf&lt;/strong&gt; 内容如下&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;user nginx;
worker_processes auto;
pid /run/nginx.pid;

&lt;span class=&quot;c&quot;&gt;# Load dynamic modules. See /usr/share/nginx/README.dynamic.&lt;/span&gt;
include /usr/share/nginx/modules/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.conf;

events &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    use epoll;
    worker_connections 1024;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

http &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    server_tokens off;
    log_format  main  &lt;span class=&quot;s1&quot;&gt;'$remote_addr||$time_local||&quot;$request&quot;||'&lt;/span&gt;
                      &lt;span class=&quot;s1&quot;&gt;'$status||$body_bytes_sent||&quot;$http_referer&quot;'&lt;/span&gt;
                      &lt;span class=&quot;s1&quot;&gt;'||$http_x_forwarded_for||'&lt;/span&gt;
                      &lt;span class=&quot;s1&quot;&gt;'||$upstream_status||$upstream_addr||$request_time||$upstream_response_time||'&lt;/span&gt; ;

    sendfile            on;
    tcp_nopush          on;
    tcp_nodelay         on;
    keepalive_timeout   65;
    types_hash_max_size 2048;

    include             /etc/nginx/mime.types;
    default_type        application/octet-stream;

    gzip on;
    gzip_disable &lt;span class=&quot;s2&quot;&gt;&quot;msie6&quot;&lt;/span&gt;;
    gzip_proxied any;
    gzip_min_length 1000;
    gzip_comp_level 6;
    gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

    include /etc/nginx/conf.d/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.conf;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;对应站点.conf&lt;/strong&gt; 内容如下&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;upstream chinakevinguo_jekyll_kevinguo_me &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    server 127.0.0.1:1080;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
server &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    listen 80 default_server;
    listen &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;::]:80 default_server;
    server_name kevinguo.me www.kevinguo.me;

    &lt;span class=&quot;c&quot;&gt;# Redirect all HTTP requests to HTTPS with a 301 Moved Permanently response.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return &lt;/span&gt;301 https://&lt;span class=&quot;nv&quot;&gt;$server_name$request_uri&lt;/span&gt;;
    &lt;span class=&quot;c&quot;&gt;#return 404;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

server &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    listen 443 ssl http2 default_server;
    listen &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;::]:443 ssl http2 default_server;
    server_name kevinguo.me www.kevinguo.me;

    &lt;span class=&quot;c&quot;&gt;# certs sent to the client in SERVER HELLO are concatenated in ssl_certificate&lt;/span&gt;
    ssl_certificate /etc/letsencrypt/live/kevinguo.me/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/kevinguo.me/privkey.pem;
    ssl_dhparam /etc/letsencrypt/live/kevinguo.me/dhparam.pem;
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_session_tickets off;
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers &lt;span class=&quot;s1&quot;&gt;'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS'&lt;/span&gt;;
    ssl_prefer_server_ciphers on;
    ssl_stapling on;
    ssl_stapling_verify on;
    &lt;span class=&quot;c&quot;&gt;# HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months)&lt;/span&gt;
    add_header Strict-Transport-Security max-age&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;15768000;


    add_header X-Frame-Options DENY;
    add_header  X-Content-Type-Options  nosniff;
    add_header X-XSS-Protection &lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt;;
    access_log /var/log/nginx/chinakevinguo_jekyll_kevinguo_me_access.log ;
    error_log /var/log/nginx/chinakevinguo_jekyll_kevinguo_me_error.log ;

    location / &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
       root html;
       index index.html;
       proxy_pass         http://chinakevinguo_jekyll_kevinguo_me;
       proxy_set_header   Host             &lt;span class=&quot;nv&quot;&gt;$host&lt;/span&gt;:443;
       proxy_set_header   X-Real-IP        &lt;span class=&quot;nv&quot;&gt;$remote_addr&lt;/span&gt;;
       proxy_set_header   X-Forwarded-For  &lt;span class=&quot;nv&quot;&gt;$proxy_add_x_forwarded_for&lt;/span&gt;;
       proxy_connect_timeout   10s;
       proxy_send_timeout      100s;
       proxy_read_timeout      300s;
       proxy_next_upstream error timeout http_404;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;最后，来访问试试看呢&lt;/p&gt;</content><author><name>KevinGuo</name></author><summary type="html">上一篇HTTPS是使用cloudflare进行加密的，所有的请求都交给cloudflare来进行转发，就会出现域名指向的IP不是主机的问题，虽然安全些，但是总感觉怪怪的，所以这一篇，直接通过 nginx+docker+let’s encrypt 搭建HTTPS认证</summary></entry><entry><title type="html">jekyll 搭建静态博客(2)</title><link href="https://kevinguo.me/2017/07/12/jekyll-create-a-static-blog(2)/" rel="alternate" type="text/html" title="jekyll 搭建静态博客(2)" /><published>2017-07-12T00:00:00+08:00</published><updated>2017-07-12T00:00:00+08:00</updated><id>https://kevinguo.me/2017/07/12/jekyll-create-a-static-blog(2)</id><content type="html" xml:base="https://kevinguo.me/2017/07/12/jekyll-create-a-static-blog(2)/">&lt;blockquote&gt;
  &lt;p&gt;接上一篇，上一篇我们的博客已经可以自动化部署了，但是我们仍然不满足，还想要有一个好的评论系统和一个安全的https连接&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;disqus&quot;&gt;Disqus&lt;/h3&gt;

&lt;p&gt;disqus 是一家第三方社会化评论系统，主要为网站主提供评论托管服务&lt;/p&gt;

&lt;p&gt;1.在&lt;a href=&quot;https://disqus.com/&quot;&gt;disqus官网&lt;/a&gt;注册一个账号&lt;/p&gt;

&lt;p&gt;2.点击&lt;code class=&quot;highlighter-rouge&quot;&gt;Admin&lt;/code&gt;，然后新建站点，在&lt;code class=&quot;highlighter-rouge&quot;&gt;Website Name&lt;/code&gt;处输入你的站点名称，并且根据你的情况选择站点种类&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/disqus-create.png&quot; alt=&quot;disqus-create&quot; /&gt;&lt;/p&gt;

&lt;p&gt;3.在&lt;code class=&quot;highlighter-rouge&quot;&gt;Website URL&lt;/code&gt;处输入你的站点 url，保存即可&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/disqus-conf.png&quot; alt=&quot;disqus-conf&quot; /&gt;&lt;/p&gt;

&lt;p&gt;4.修改你的&lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;文件中的 &lt;code class=&quot;highlighter-rouge&quot;&gt;comments_provider&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;username&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;重要： 这里的&lt;code class=&quot;highlighter-rouge&quot;&gt;username&lt;/code&gt;，实际上是 disqus 中的shortname&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;comments_provider: disqus
disqus:
    username: kevinguo
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;5.修改完成后，push 到镜像站点，触发 Travis CI 重新发布博客，最终成功加载 disqus&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/disqus-done.png&quot; alt=&quot;disqus-done&quot; /&gt;&lt;/p&gt;

&lt;p&gt;如果无法加载 disqus ，可能是因为被墙了，FQ 出去试试&lt;/p&gt;

&lt;h3 id=&quot;cloudflare&quot;&gt;Cloudflare&lt;/h3&gt;

&lt;p&gt;cloudflare 主要是为客户提供网站安全管理，性能优化等，比如 &lt;code class=&quot;highlighter-rouge&quot;&gt;HTTPS&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;CDN&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;1.在&lt;a href=&quot;https://sg.godaddy.com/zh/&quot;&gt;godaddy&lt;/a&gt;上去申请一个域名吧，一年也就 5$&lt;/p&gt;

&lt;p&gt;2.在&lt;a href=&quot;https://www.cloudflare.com&quot;&gt;cloudflare官网&lt;/a&gt;注册一个账号&lt;/p&gt;

&lt;p&gt;3.点击 &lt;code class=&quot;highlighter-rouge&quot;&gt;Add Site&lt;/code&gt;，添加一个站点，然后 &lt;code class=&quot;highlighter-rouge&quot;&gt;Begin Scan&lt;/code&gt;,大概需要60s&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/cloudflare-add.png&quot; alt=&quot;cloudflare-add&quot; /&gt;&lt;/p&gt;

&lt;p&gt;4.扫描完成后，会看到 DNS 记录，自行添加(其中彩色的云朵表示开启SSL，否则就只是DNS)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注意 如果你的A记录启用的SSL，那么所有关于这个A记录的请求都会转发给 Cloudflare，然后通过 Cloudflare再转发到你的服务器，所以这个时候，你通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;nslookup kevinguo.me&lt;/code&gt; 的时候解析出来的地址，并不是你的服务器地址，而是 Cloudflare的地址;如果你有其他服务(诸如VPS,FTP等)使用的是这个地址的话，最好是再添加一条不走SSL的A记录&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/cloudflare-dns.png&quot; alt=&quot;cloudflare-dns&quot; /&gt;&lt;/p&gt;

&lt;p&gt;5.完成上面的步骤后，到你的域名控制面板修改DNS服务&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/godaddy-dns.png&quot; alt=&quot;godaddy-dns&quot; /&gt;&lt;/p&gt;

&lt;p&gt;6.修改完成后，在 Cloudflare点击继续，大概5~30分钟后 &lt;code class=&quot;highlighter-rouge&quot;&gt;Overview&lt;/code&gt; 状态会变成 &lt;code class=&quot;highlighter-rouge&quot;&gt;Status: Active&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/cloudflare-status.png&quot; alt=&quot;cloudflare-status&quot; /&gt;&lt;/p&gt;

&lt;p&gt;7.点击 &lt;code class=&quot;highlighter-rouge&quot;&gt;Crypto&lt;/code&gt;来设置SSL 级别&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/cloudflare-ssl.png&quot; alt=&quot;cloudflare-ssl&quot; /&gt;&lt;/p&gt;

&lt;p&gt;8.点击 &lt;code class=&quot;highlighter-rouge&quot;&gt;Page Rules&lt;/code&gt;来设置域名重定向&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;将顶级域名都重定向到 &lt;code class=&quot;highlighter-rouge&quot;&gt;https://www.kevinguo.me&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/cloudflare-forwarding.png&quot; alt=&quot;cloudflare-forwarding&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;添加自动使用 HTTPS，所有访问&lt;code class=&quot;highlighter-rouge&quot;&gt;http://www.kevinguo.me&lt;/code&gt;的请求都使用HTTPS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/cloudflare-always-https.png&quot; alt=&quot;cloudflare-always-https&quot; /&gt;&lt;/p&gt;

&lt;p&gt;9.最后，访问你的blog试试呢&lt;/p&gt;</content><author><name>KevinGuo</name></author><summary type="html">接上一篇，上一篇我们的博客已经可以自动化部署了，但是我们仍然不满足，还想要有一个好的评论系统和一个安全的https连接</summary></entry><entry><title type="html">jekyll 搭建静态博客(1)</title><link href="https://kevinguo.me/2017/07/12/jekyll-create-a-static-blog(1)/" rel="alternate" type="text/html" title="jekyll 搭建静态博客(1)" /><published>2017-07-12T00:00:00+08:00</published><updated>2017-07-12T00:00:00+08:00</updated><id>https://kevinguo.me/2017/07/12/jekyll-create-a-static-blog(1)</id><content type="html" xml:base="https://kevinguo.me/2017/07/12/jekyll-create-a-static-blog(1)/">&lt;blockquote&gt;
  &lt;p&gt;这段时间将原来在hexo上的博客迁到了jekyll上；采用Jekyll生成静态站点，Travis CI自动化部署，记录下来，以免以后忘记了&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!--more--&gt;

&lt;h3 id=&quot;整体思路&quot;&gt;整体思路&lt;/h3&gt;

&lt;p&gt;我们都知道通过jekyll搭建博客最终都是将通过&lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll build&lt;/code&gt;生成的&lt;code class=&quot;highlighter-rouge&quot;&gt;_site&lt;/code&gt;下的静态文件发布出去，那么我们是不是可以直接采用 &lt;code class=&quot;highlighter-rouge&quot;&gt;nginx&lt;/code&gt; + &lt;code class=&quot;highlighter-rouge&quot;&gt;静态文件&lt;/code&gt;的方式来发布呢，当然是可以的&lt;/p&gt;

&lt;h4 id=&quot;准备两个站点仓库&quot;&gt;准备两个站点仓库&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;主站点Github (保存静态文件)&lt;/li&gt;
  &lt;li&gt;镜像站点Github (触发 travis ，生成静态文件)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我们只需要将 Travis CI生成的静态文件推送到 主站点Github，博客通过 docker 化部署，采用 &lt;code class=&quot;highlighter-rouge&quot;&gt;nginx&lt;/code&gt; + &lt;code class=&quot;highlighter-rouge&quot;&gt;静态文件&lt;/code&gt; 方式；每次容器启动后都要从主站点Github pull 最新的静态文件，流程如下&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;本地提交博客 Markdown 文件到镜像站点Github&lt;/li&gt;
  &lt;li&gt;Github 触发 Travis CI 执行jekyll 编译&lt;/li&gt;
  &lt;li&gt;Travis CI 将编译后的静态文件push到主站点Github&lt;/li&gt;
  &lt;li&gt;Travis CI 通知服务器重启容器&lt;/li&gt;
  &lt;li&gt;容器重启拉去最新静态文件完成更新&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://travis-ci.org/&quot;&gt;Travis&lt;/a&gt; 是啥？ 就是个类似jenkins的东西. &lt;a href=&quot;https://jenkins.io/&quot;&gt;Jenkins&lt;/a&gt; 是啥？ 就是个类似Travis的东西.&lt;/p&gt;

&lt;h4 id=&quot;构建所需docker镜像&quot;&gt;构建所需docker镜像&lt;/h4&gt;

&lt;p&gt;既然博客是通过 docker 化部署，采用&lt;code class=&quot;highlighter-rouge&quot;&gt;nginx&lt;/code&gt; + &lt;code class=&quot;highlighter-rouge&quot;&gt;静态文件&lt;/code&gt; 的方式发布，那么我们第一步就是要构建我们博客所需的镜像，&lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt; 内容如下&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM nginx:1.11.10-alpine

MAINTAINER KevinGuo &lt;span class=&quot;s2&quot;&gt;&quot;chinakevinguo@live.com&quot;&lt;/span&gt;

ENV TZ &lt;span class=&quot;s1&quot;&gt;'Asia/Shanghai'&lt;/span&gt;

RUN apk upgrade --no-cache &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apk add --no-cache bash git &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; rm -rf /usr/share/nginx/html &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; git clone https://github.com/chinakevinguo/kevinguo.me.git /usr/share/nginx/html &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Asia/Shanghai&quot;&lt;/span&gt; &amp;gt; /etc/timezone &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; rm -rf /var/cache/apk/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;

ADD entrypoint.sh /entrypoint.sh

WORKDIR /usr/share/nginx/html

CMD &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/entrypoint.sh&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;容器每次重启的时候都会去主站点Github上拉取最新的静态文件，并且启动 nginx，&lt;code class=&quot;highlighter-rouge&quot;&gt;entrypoint.sh&lt;/code&gt;内容如下&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;

git pull
nginx -g &lt;span class=&quot;s2&quot;&gt;&quot;daemon off;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;最后执行&lt;code class=&quot;highlighter-rouge&quot;&gt;docker build&lt;/code&gt;，生成我们所需的镜像&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker build -t chinakevinguo_jekyll_kevinguo_me .
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;博客所需镜像制作完成后，启动容器&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run -d --name chinakevinguo_jekyll_kevinguo_me --restart&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;always -p 80:80 -p 443:443 chinakevinguo_jekyll_kevinguo_me
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;下一步就是 &lt;code class=&quot;highlighter-rouge&quot;&gt;静态文件&lt;/code&gt; 了&lt;/p&gt;

&lt;h4 id=&quot;静态文件的自动更新&quot;&gt;静态文件的自动更新&lt;/h4&gt;

&lt;p&gt;通过上面 &lt;code class=&quot;highlighter-rouge&quot;&gt;Dockerfile&lt;/code&gt; 文件中的内容，你会发现，我是将 &lt;code class=&quot;highlighter-rouge&quot;&gt;kevinguo.me.git&lt;/code&gt;下的内容clone到 &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/share/nginx/html&lt;/code&gt;，也就是说，我实际上是发布的 &lt;code class=&quot;highlighter-rouge&quot;&gt;kevinguo.me.git&lt;/code&gt; 下的静态文件，那么 &lt;code class=&quot;highlighter-rouge&quot;&gt;kevinguo.me.git&lt;/code&gt; 下面的内容又是怎么来的呢&lt;/p&gt;

&lt;p&gt;实际上这些文件是 Travis CI 基于镜像站点(chinakevinguo.github.io) 完成 build 后在 &lt;code class=&quot;highlighter-rouge&quot;&gt;_site&lt;/code&gt;目录下生成的镜像文件&lt;/p&gt;

&lt;h5 id=&quot;travis-配置&quot;&gt;Travis 配置&lt;/h5&gt;

&lt;p&gt;1.使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;Github&lt;/code&gt; 账号登录 Travis，右上方按钮点击同步项目，下方打开需要继承的项目，最后点击齿轮进入项目配置页面&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/travis.png&quot; alt=&quot;travis&quot; /&gt;&lt;/p&gt;

&lt;p&gt;2.打开 &lt;code class=&quot;highlighter-rouge&quot;&gt;Build only if .travis.yml is present&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/travis-yml.png&quot; alt=&quot;travis-yml&quot; /&gt;&lt;/p&gt;

&lt;p&gt;3.Travis CI push静态文件到Github 通过 Github的token实现授权配置，准备 Github上的token&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注意： 这里的&lt;code class=&quot;highlighter-rouge&quot;&gt;token&lt;/code&gt;，复制之后，最好自己保存好哟，因为只显示一次，如果丢失只能再次生成了&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/github-token.png&quot; alt=&quot;github-token.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;4.配置Travis CI 部署所需环境变量，&lt;code class=&quot;highlighter-rouge&quot;&gt;$JEKYLL_GITHUB_TOKEN&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/travis-token.png&quot; alt=&quot;travis-token&quot; /&gt;&lt;/p&gt;

&lt;p&gt;5.Travis CI 和服务器之间通过密钥认证，并且对密钥进行了加密，所以我们需要在服务器上进行一些加密操作，并将密钥传到Travis上&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# clone 镜像站点&lt;/span&gt;
git clone git@github.com:chinakevinguo/chinakevinguo.github.io.git

&lt;span class=&quot;c&quot;&gt;# 在镜像站点(chinakevinguo.github.io)下，新建`.travis.yml`文件&lt;/span&gt;
touch .travis.yml

&lt;span class=&quot;c&quot;&gt;# 生成公钥和私钥&lt;/span&gt;
ssh-keygen

&lt;span class=&quot;c&quot;&gt;# 安装travis命令行工具，如无法使用gem指令需先安装ruby&lt;/span&gt;
gem install travis

&lt;span class=&quot;c&quot;&gt;# --auto自动登录github账户&lt;/span&gt;
travis login --auto

&lt;span class=&quot;c&quot;&gt;# 在.travis.yml同级目录下执行，此处的--add参数表示自动添加脚本到.travis.yml文件中&lt;/span&gt;
travis encrypt-file ~/.ssh/id_rsa --add

&lt;span class=&quot;c&quot;&gt;# 在服务器上执行ssh-copy-id操作，实现ssh连接的时候免密钥登陆&lt;/span&gt;
ssh-copy-id root@kevinguo.me
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;执行完成后会发现&lt;code class=&quot;highlighter-rouge&quot;&gt;travis&lt;/code&gt;网站项目里的环境变量多了两个参数&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/travis-key.png&quot; alt=&quot;travis-key&quot; /&gt;&lt;/p&gt;

&lt;p&gt;并且在&lt;code class=&quot;highlighter-rouge&quot;&gt;.travis.yml&lt;/code&gt;里的 &lt;code class=&quot;highlighter-rouge&quot;&gt;before_install&lt;/code&gt;周期中多了下面2行&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;- openssl aes-256-cbc -K &lt;span class=&quot;nv&quot;&gt;$encrypted_3870315c7a22_key&lt;/span&gt; -iv &lt;span class=&quot;nv&quot;&gt;$encrypted_3870315c7a22_iv&lt;/span&gt;
  -in id_rsa.enc -out ~&lt;span class=&quot;se&quot;&gt;\/&lt;/span&gt;.ssh/id_rsa -d
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;默认生成的命令会在&lt;code class=&quot;highlighter-rouge&quot;&gt;/&lt;/code&gt;前面带转义符&lt;code class=&quot;highlighter-rouge&quot;&gt;\&lt;/code&gt;，我们不需要，手动删除即可&lt;/p&gt;

&lt;p&gt;6.进一步修改 &lt;code class=&quot;highlighter-rouge&quot;&gt;.travis.yml&lt;/code&gt; 文件，内容如下&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;language: ruby
rvm:
- 2.3.3
before_install:
- openssl aes-256-cbc -K &lt;span class=&quot;nv&quot;&gt;$encrypted_3870315c7a22_key&lt;/span&gt; -iv &lt;span class=&quot;nv&quot;&gt;$encrypted_3870315c7a22_iv&lt;/span&gt; -in id_rsa.enc -out ~/.ssh/id_rsa -d
- chmod 600 ~/.ssh/id_rsa
- &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; -e &lt;span class=&quot;s2&quot;&gt;&quot;Host 主机IP地址&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n\t&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;StrictHostKeyChecking no&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &amp;gt;&amp;gt; ~/.ssh/config
install:
  - gem install jekyll
  - gem install html-proofer
script:
- bundle install
- bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;jekyll build
after_success:
- git clone https://github.com/chinakevinguo/kevinguo.me.git
- &lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;kevinguo.me &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; rm -rf &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; cp -r ../_site/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; .
- git config user.name &lt;span class=&quot;s2&quot;&gt;&quot;chinakevinguo&quot;&lt;/span&gt;
- git config user.email &lt;span class=&quot;s2&quot;&gt;&quot;chinakevinguo@live.com&quot;&lt;/span&gt;
- git add --all .
- git commit -m &lt;span class=&quot;s2&quot;&gt;&quot;Travis CI Auto Builder&quot;&lt;/span&gt;
- git push --force https://&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;JEKYLL_GITHUB_TOKEN&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;@github.com/chinakevinguo/kevinguo.me.git master
- ssh root@host.kevinguo.me &lt;span class=&quot;s2&quot;&gt;&quot;docker restart chinakevinguo_jekyll_kevinguo_me&quot;&lt;/span&gt;
branches:
  only:
  - master
env:
  global:
  - &lt;span class=&quot;nv&quot;&gt;NOKOGIRI_USE_SYSTEM_LIBRARIES&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true
&lt;/span&gt;addons:
  ssh_known_hosts: host.kevinguo.me
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;7.修改镜像站点下的其他内容，比如&lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;，将一些内容替换成你自己的,下一篇，我将会介绍 &lt;code class=&quot;highlighter-rouge&quot;&gt;disqus&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;cloudflare&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;8.所有内容都修改好后，&lt;code class=&quot;highlighter-rouge&quot;&gt;push&lt;/code&gt;到 Github上，会发现触发了 Travis CI，并且将生成的静态文件 &lt;code class=&quot;highlighter-rouge&quot;&gt;push&lt;/code&gt; 到了主站点仓库 &lt;code class=&quot;highlighter-rouge&quot;&gt;kevinguo.me&lt;/code&gt;，然后重启了容器&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/travis-done.png&quot; alt=&quot;travis-done&quot; /&gt;&lt;/p&gt;

&lt;p&gt;博客发布成功&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/jekyll-blog-done.png&quot; alt=&quot;jekyll-blog-done&quot; /&gt;&lt;/p&gt;</content><author><name>KevinGuo</name></author><summary type="html">这段时间将原来在hexo上的博客迁到了jekyll上；采用Jekyll生成静态站点，Travis CI自动化部署，记录下来，以免以后忘记了</summary></entry><entry><title type="html">video</title><link href="https://kevinguo.me/2017/07/06/video-test/" rel="alternate" type="text/html" title="video" /><published>2017-07-06T00:00:00+08:00</published><updated>2017-07-06T00:00:00+08:00</updated><id>https://kevinguo.me/2017/07/06/video-test</id><content type="html" xml:base="https://kevinguo.me/2017/07/06/video-test/">&lt;blockquote&gt;
  &lt;p&gt;就是加个视频链接，测试一下看看行不行，代码如下&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!--more--&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;video&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;video&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;controls=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;preload=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;none&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;498&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;510&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;poster=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://media.w3.org/2010/05/sintel/poster.png&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;source&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mp4&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://media.w3.org/2010/05/sintel/trailer.mp4&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;video/mp4&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;source&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;webm&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://media.w3.org/2010/05/sintel/trailer.webm&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;video/webm&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;source&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ogv&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://media.w3.org/2010/05/sintel/trailer.ogv&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;video/ogg&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/video&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;h6 id=&quot;效果如下&quot;&gt;效果如下&lt;/h6&gt;
&lt;video id=&quot;video&quot; controls=&quot;&quot; preload=&quot;none&quot;&gt;
      &lt;source id=&quot;mp4&quot; src=&quot;http://media.w3.org/2010/05/sintel/trailer.mp4&quot; type=&quot;video/mp4&quot; /&gt;
      &lt;source id=&quot;webm&quot; src=&quot;http://media.w3.org/2010/05/sintel/trailer.webm&quot; type=&quot;video/webm&quot; /&gt;
      &lt;source id=&quot;ogv&quot; src=&quot;http://media.w3.org/2010/05/sintel/trailer.ogv&quot; type=&quot;video/ogg&quot; /&gt;
    &lt;/video&gt;</content><author><name>KevinGuo</name></author><summary type="html">就是加个视频链接，测试一下看看行不行，代码如下</summary></entry><entry><title type="html">saltstack之pillar</title><link href="https://kevinguo.me/2017/07/06/saltstack%E4%B9%8Bpillar/" rel="alternate" type="text/html" title="saltstack之pillar" /><published>2017-07-06T00:00:00+08:00</published><updated>2017-07-06T00:00:00+08:00</updated><id>https://kevinguo.me/2017/07/06/saltstack%E4%B9%8Bpillar</id><content type="html" xml:base="https://kevinguo.me/2017/07/06/saltstack%E4%B9%8Bpillar/">&lt;h1 id=&quot;pillar&quot;&gt;&lt;strong&gt;Pillar&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;主要作用是存储和定义配置管理中需要的一些变量，比如数据，比如软件版本，用户名密码等信息&lt;/p&gt;

&lt;!--more--&gt;
&lt;h6 id=&quot;1在master上开启pillar_roots&quot;&gt;1.在master上开启pillar_roots&lt;/h6&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;pillar_roots&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/srv/pillar&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;!--more--&gt;
&lt;h6 id=&quot;2在master的srvpillar目录下新建topslspackagesslsservicessls&quot;&gt;2.在master的/srv/pillar目录下新建&lt;em&gt;top.sls&lt;/em&gt;，&lt;em&gt;packages.sls&lt;/em&gt;，&lt;em&gt;services.sls&lt;/em&gt;&lt;/h6&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;root@saltstack-node1 pillar&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# cat top.sls&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;*'&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;packages&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;services&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;root@saltstack-node1 pillar&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# cat packages.sls&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;zabbix&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;package-name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;zabbix&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;2.2.4&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;root@saltstack-node1 pillar&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# cat services.sls&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;zabbix&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;10050&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;admin&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h6 id=&quot;3执行pillaritem-zabbix查看指定的信息&quot;&gt;3.执行pillar.item zabbix查看指定的信息&lt;/h6&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;root@saltstack-node1 pillar&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# salt 'saltstack-node2*' pillar.item zabbix&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;saltstack-node2.example.com&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;----------&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;zabbix&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;----------&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;package-name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;zabbix&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;port&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;10050&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;admin&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;s&quot;&gt;2.2.4&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;</content><author><name>KevinGuo</name></author><summary type="html">Pillar 主要作用是存储和定义配置管理中需要的一些变量，比如数据，比如软件版本，用户名密码等信息</summary></entry><entry><title type="html">kubespray容器化部署kubernetes高可用集群(3)</title><link href="https://kevinguo.me/2017/07/06/kubespray-deploy-kubernetes-3/" rel="alternate" type="text/html" title="kubespray容器化部署kubernetes高可用集群(3)" /><published>2017-07-06T00:00:00+08:00</published><updated>2017-07-06T00:00:00+08:00</updated><id>https://kevinguo.me/2017/07/06/kubespray-deploy-kubernetes-3</id><content type="html" xml:base="https://kevinguo.me/2017/07/06/kubespray-deploy-kubernetes-3/">&lt;blockquote&gt;
  &lt;p&gt;上一篇我们详细的剥析了通过kargo生成的各类服务的配置文件，学会了，如何生成证书，如何配置etcd,calico,kubelet，学会了如何配置一个kubernetes的高可用集群。既然集群已经配好了，那么这一章，我们就来学学如何配置一些常用的插件。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!--more--&gt;
&lt;p&gt;目前尚不确定kubernetes各个插件版本之间的兼容性，我使用kubespray部署的各个IMAGE在&lt;a href=&quot;https://kevinguo.me/2017/07/06/kargo%E5%AE%B9%E5%99%A8%E5%8C%96%E9%83%A8%E7%BD%B2kubernetes%E9%AB%98%E5%8F%AF%E7%94%A8%E9%9B%86%E7%BE%A41&quot;&gt;第一章&lt;/a&gt;中已经列出来了，中途在部署heapster和kibana的时候出了点问题，其他还未发现什么问题&lt;/p&gt;

&lt;p&gt;目前，我所用到的插件如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;ingress&lt;/li&gt;
  &lt;li&gt;kubedns&lt;/li&gt;
  &lt;li&gt;dashboard&lt;/li&gt;
  &lt;li&gt;efk&lt;/li&gt;
  &lt;li&gt;heapster&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;kubernetes-dashboard&quot;&gt;kubernetes-dashboard&lt;/h3&gt;

&lt;p&gt;1.从&lt;code class=&quot;highlighter-rouge&quot;&gt;kubernetes&lt;/code&gt;官方git下载&lt;a href=&quot;https://github.com/kubernetes/kubernetes.git&quot;&gt;最新源码&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/kubernetes/kubernetes.git
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;2.进入dashboard所在的目录，执行yml文件&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;/kubernetes/cluster/addons/dashboard
kubectl create -f .
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;3.确认dashboard是否成功创建&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 确认deployment&lt;/span&gt;
kubectl get deployment -n kube-system |grep dashboard

&lt;span class=&quot;c&quot;&gt;# 确认svc&lt;/span&gt;
kubectl get svc -n kube-system |grep dashboard

&lt;span class=&quot;c&quot;&gt;# 确认ep&lt;/span&gt;
kubectl get ep -n kube-system |grep dashboard

&lt;span class=&quot;c&quot;&gt;# 确认pods&lt;/span&gt;
kubectl get pods -n kube-system |grep dashboard

&lt;span class=&quot;c&quot;&gt;# 查看日志是否有报错&lt;/span&gt;
kubectl logs kubernetes-dashboard-1041558748-sppxt -n kube-system
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;初步确认dashboard启动成功，最终确认，需要等ingress创建后访问再看&lt;/p&gt;

&lt;h3 id=&quot;efk&quot;&gt;EFK&lt;/h3&gt;

&lt;p&gt;1.从&lt;code class=&quot;highlighter-rouge&quot;&gt;kubernetes&lt;/code&gt;官方git下载&lt;a href=&quot;https://github.com/kubernetes/kubernetes.git&quot;&gt;最新源码&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/kubernetes/kubernetes.git
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;2.为你要运行fluentd的节点添加label，因为&lt;code class=&quot;highlighter-rouge&quot;&gt;fluentd-es-ds.yml&lt;/code&gt;文件中有&lt;code class=&quot;highlighter-rouge&quot;&gt;beta.kubernetes.io/fluentd-ds-ready: &quot;true&quot;&lt;/code&gt;标签&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl label node k8s-node01 beta.kubernetes.io/fluentd-ds-ready&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true
&lt;/span&gt;kubectl label node k8s-node02 beta.kubernetes.io/fluentd-ds-ready&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true
&lt;/span&gt;kubectl label node k8s-registry beta.kubernetes.io/fluentd-ds-ready&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;3.确认标签添加是否成功&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;root@k8s-master01 ~]# kubectl get nodes -l beta.kubernetes.io/fluentd-ds-ready
NAME           STATUS    AGE       VERSION
k8s-node01     Ready     19h       v1.6.7+coreos.0
k8s-node02     Ready     19h       v1.6.7+coreos.0
k8s-registry   Ready     19h       v1.6.7+coreos.0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;4.进入fluentd-elasticsearch所在的目录，执行yml文件&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;/kubernetes/cluster/addons/fluentd-elasticsearch
kubectl create -f .
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;5.确认EFK是否创建成功&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 确认elasticsearch是否创建成功&lt;/span&gt;
kubectl get statefulset -n kube-system |grep elasticsearch
kubectl get svc -n kube-system|grep elasticsearch
kubectl get ep -n kube-system |grep elasticsearch
kubectl get pods -n kube-system |grep elasticsearch

&lt;span class=&quot;c&quot;&gt;# 确认fluentd是否创建成功&lt;/span&gt;
kubectl get ds -n kube-system |grep fluentd
kubectl get pods -n kube-system -o wide |grep fluentd

&lt;span class=&quot;c&quot;&gt;# 确认kibana是否创建成功&lt;/span&gt;
kubectl get deployment -n kube-system |grep kibana
kubectl get svc -n kube-system|grep kibana
kubectl get ep -n kube-system |grep kibana
kubectl get pods -n kube-system |grep kibana

&lt;span class=&quot;c&quot;&gt;# 查看日志是否有报错&lt;/span&gt;
kubectl logs elasticsearch-logging-0
kubectl logs fluentd-es-v2.0.1-kn2h2 -n kube-system
kubectl logs kibana-logging-3636197754-tnwjh -n kube-system
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;初步确认EFK启动成功，最终确认，需要等ingress创建后访问再看&lt;/p&gt;

&lt;h3 id=&quot;heapster&quot;&gt;heapster&lt;/h3&gt;

&lt;p&gt;heapster比较简单&lt;/p&gt;

&lt;p&gt;1.从&lt;code class=&quot;highlighter-rouge&quot;&gt;kubernetes&lt;/code&gt;官方git下载&lt;a href=&quot;https://github.com/kubernetes/heapster.git&quot;&gt;最新源码&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/kubernetes/heapster.git
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;2.进入heapster的deploy目录，执行kube.sh&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;/heapster/deploy
sh kube.sh start
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;3.确认heapster是否创建成功&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 确认heapster是否创建成功&lt;/span&gt;
kubectl get deployment -n kube-system |grep heapster
kubectl get svc -n kube-system |grep heapster
kubectl get ep -n kube-system |grep heapster
kubectl get pods -n kube-system |grep heapster

&lt;span class=&quot;c&quot;&gt;# 确认influxdb是否创建成功&lt;/span&gt;
kubectl get deployment -n kube-system |grep influxdb
kubectl get svc -n kube-system |grep influxdb
kubectl get ep -n kube-system |grep influxdb
kubectl get pods -n kube-system |grep influxdb

&lt;span class=&quot;c&quot;&gt;# 确认grafana是否创建成功&lt;/span&gt;
kubectl get deployment -n kube-system |grep grafana
kubectl get svc -n kube-system |grep grafana
kubectl get ep -n kube-system |grep grafana
kubectl get pods -n kube-system |grep grafana

&lt;span class=&quot;c&quot;&gt;# 查看日志是否有报错&lt;/span&gt;
kubectl logs heapster-1528902802-wcf24 -n kube-system
kubectl logs monitoring-grafana-2527507788-jsw1n -n kube-system
kubectl logs monitoring-influxdb-3480804314-31h4w -n kube-system
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;初步确认heapster启动成功，最终确认，需要等ingress创建后访问再看&lt;/p&gt;

&lt;h3 id=&quot;ingress&quot;&gt;ingress&lt;/h3&gt;

&lt;p&gt;我们知道kubernetes暴露服务的方式目前有三种: LoadBlancer Service、NodePort Service、Ingress，前两个这里暂时不讲，这里主要解释下什么是Ingress&lt;/p&gt;

&lt;h4 id=&quot;什么是-ingress&quot;&gt;什么是 ingress&lt;/h4&gt;

&lt;p&gt;Ingress Controller 实质上可以理解为一个监视器，Ingress Controller 通过不断跟kubernetes API打交道，实时感知后端service、pod等变化，比如新增和减少pod，service增加与减少等；当得到这些变化信息后，Ingress Controller 再结合Ingress 生成配置，然后更新反向代理负载均衡器，并刷新配置，达到服务发现的作用&lt;/p&gt;

&lt;p&gt;下面的图说明一切问题
&lt;img src=&quot;/images/posts/Ingress.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt; 如果你进入 Ingress Controller里面看过它的 nginx 配置，你会发现实际上，Ingress是直接将请求转发到了服务的 endpoint IP，并没有转发给 Service Cluster IP，据说是为了提高性能，那么这个 Service Cluster IP 存在的意义在哪呢，如果你也在问这个问题，那么你得重新学习下 Service Cluster IP在 kubernetes 集群中的作用了&lt;/p&gt;

&lt;p&gt;这里简单说一下，Cluster IP是kubernetes 集群中的一个虚拟IP，仅仅是为了方便集群内部通信和服务发现的&lt;/p&gt;

&lt;p&gt;概念说了这么多，下面就开始实际操作吧&lt;/p&gt;

&lt;p&gt;1.从&lt;code class=&quot;highlighter-rouge&quot;&gt;kubernetes&lt;/code&gt;官方git下载&lt;a href=&quot;https://github.com/kubernetes/ingress.git&quot;&gt;最新源码&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git clone https://github.com/kubernetes/ingress.git
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;2.为你要运行 Ingress 的节点添加label标签：role=frontal&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl label node k8s-node01 &lt;span class=&quot;nv&quot;&gt;role&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;frontal
kubectl label node k8s-node02 &lt;span class=&quot;nv&quot;&gt;role&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;frontal
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;3.进入ingress的&lt;code class=&quot;highlighter-rouge&quot;&gt;examples/daemonset/nginx&lt;/code&gt;目录，修改yml文件&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注意：官方给出的 daemonset 版本的yml文件中，没有绑定宿主机的80端口，也就是说前端 Nginx 没有监听宿主机的80端口（尚且不知为何），所以需要自己加一下&lt;code class=&quot;highlighter-rouge&quot;&gt;hostNetwork&lt;/code&gt;；同时因为我是将ingress部署到我指定的前端，所以还需要在文件末尾加上&lt;code class=&quot;highlighter-rouge&quot;&gt;nodeSelector&lt;/code&gt;,截图如下&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ingress-daemonset.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/posts/ingress-nodeselector.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;执行创建&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;/ingress/examples/daemonset/nginx

kubectl create -f nginx-ingress-daemonset.yaml
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;4.确认 Ingress controller 是否创建成功&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 确认 ingress 是否创建成功&lt;/span&gt;
kubectl get ds -n kube-system |grep ing
kubectl get pods -n kube-system |grep ingress

&lt;span class=&quot;c&quot;&gt;# 查看日志是否有报错&lt;/span&gt;
kubectl logs nginx-ingress-lb-mfdh5 -n kube-system
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;初步确认ingress controller启动成功，最终确认，需要等ingress创建后访问再看&lt;/p&gt;

&lt;p&gt;5.Ingress controller已经创建成功了，那么现在我们来创建ingress 检验一下前面创建的服务是否成功&lt;/p&gt;

&lt;p&gt;dashboard-ingress.yml&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;extensions/v1beta1&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Ingress&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;dashboard-ingress&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kube-system&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;rules&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;dashboard.kevinguo.me&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;backend&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;serviceName&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kubernetes-dashboard&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;servicePort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;80&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;kibana-ingress.yml&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;extensions/v1beta1&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Ingress&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kibana-ingress&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kube-system&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;rules&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kibana.kevinguo.me&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;backend&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;serviceName&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kibana-logging&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;servicePort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;5601&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;elasticsearch-ingress.yml&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;s&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;extensions/v1beta1&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Ingress&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;elasticsearch-ingress&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;namespace&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;kube-system&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;rules&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;elasticsearch.kevinguo.me&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;s&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;backend&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;serviceName&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;elasticsearch-logging&lt;/span&gt;
          &lt;span class=&quot;s&quot;&gt;servicePort&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;9200&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;执行创建&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl create -f elasticsearch-ingress.yml
kubectl create -f dashboard-ingress.yml
kubectl create -f kibana-ingress.yml
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;创建完成后，我们来看看据诶过如何呢&lt;/p&gt;

&lt;p&gt;Dashboard and heapster
&lt;img src=&quot;/images/posts/dashboard-heapster.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;EFK
&lt;img src=&quot;/images/posts/kibana.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;后期再研究新的东西了再加吧，头疼，下班了&lt;/p&gt;</content><author><name>KevinGuo</name></author><summary type="html">上一篇我们详细的剥析了通过kargo生成的各类服务的配置文件，学会了，如何生成证书，如何配置etcd,calico,kubelet，学会了如何配置一个kubernetes的高可用集群。既然集群已经配好了，那么这一章，我们就来学学如何配置一些常用的插件。</summary></entry></feed>