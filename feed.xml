<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="https://mritd.me/feed.xml" rel="self" type="application/atom+xml" /><link href="https://mritd.me/" rel="alternate" type="text/html" /><updated>2018-03-19T14:22:27+08:00</updated><id>https://mritd.me/</id><title type="html">漠然</title><subtitle>十字路口,繁华街头......</subtitle><author><name>漠然</name></author><entry><title type="html">Kubernetes TLS bootstrapping 那点事</title><link href="https://mritd.me/2018/01/07/kubernetes-tls-bootstrapping-note/" rel="alternate" type="text/html" title="Kubernetes TLS bootstrapping 那点事" /><published>2018-01-07T18:06:06+08:00</published><updated>2018-01-07T18:06:06+08:00</updated><id>https://mritd.me/2018/01/07/kubernetes-tls-bootstrapping-note</id><content type="html" xml:base="https://mritd.me/2018/01/07/kubernetes-tls-bootstrapping-note/">&lt;blockquote&gt;
  &lt;p&gt;前段时间撸了一会 Kubernetes 官方文档，在查看 TLS bootstrapping 这块是发现已经跟 1.4 的时候完全不一样了；目前所有搭建文档也都保留着 1.4 时代的配置，在看完文档后发现目前配置有很多问题，同时也埋下了 &lt;strong&gt;隐藏炸弹&lt;/strong&gt;，这个问题可能会在一年后爆发…..后果就是集群 node 全部掉线；所以仔细的撸了一下这个文档，从元旦到写此文章的时间都在测试这个 TLS bootstrapping，以下记录一下这次的成果&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;阅读本文章前，请先阅读一下本文参考的相关文档:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://kubernetes.io/docs/admin/kubelet-tls-bootstrapping/&quot;&gt;TLS bootstrapping&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/jcbsmpsn/community/blob/a843295a4f7594d41e66a8342e174f48d06b4f9f/contributors/design-proposals/kubelet-server-certificate-bootstrap-rotation.md&quot;&gt;Kubelet Server Certificate Bootstrap &amp;amp; Rotation&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://kubernetes.io/docs/admin/authorization/rbac/&quot;&gt;Using RBAC Authorization&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;一tls-bootstrapping-简介&quot;&gt;一、TLS bootstrapping 简介&lt;/h3&gt;

&lt;p&gt;Kubernetes 在 1.4 版本(我记着是)推出了 TLS bootstrapping 功能；这个功能主要解决了以下问题:&lt;/p&gt;

&lt;p&gt;当集群开启了 TLS 认证后，每个节点的 kubelet 组件都要使用由 apiserver 使用的 CA 签发的有效证书才能与 apiserver 通讯；此时如果节点多起来，为每个节点单独签署证书将是一件非常繁琐的事情；TLS bootstrapping 功能就是让 kubelet 先使用一个预定的低权限用户连接到 apiserver，然后向 apiserver 申请证书，kubelet 的证书由 apiserver 动态签署；在配合 RBAC 授权模型下的工作流程大致如下所示(不完整，下面细说)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/ixtwd.png&quot; alt=&quot;tls_bootstrapping&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;二tls-bootstrapping-相关术语&quot;&gt;二、TLS bootstrapping 相关术语&lt;/h3&gt;

&lt;h4 id=&quot;21kubelet-server&quot;&gt;2.1、kubelet server&lt;/h4&gt;

&lt;p&gt;在官方 TLS bootstrapping 文档中多次提到过 &lt;code class=&quot;highlighter-rouge&quot;&gt;kubelet server&lt;/code&gt; 这个东西；在经过翻阅大量文档以及 TLS bootstrapping 设计文档后得出，&lt;strong&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;kubelet server&lt;/code&gt; 指的应该是 kubelet 的 10250 端口；&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;kubelet 组件在工作时，采用主动的查询机制，即定期请求 apiserver 获取自己所应当处理的任务，如哪些 pod 分配到了自己身上，从而去处理这些任务；同时 kubelet 自己还会暴露出两个本身 api 的端口，用于将自己本身的私有 api 暴露出去，这两个端口分别是 10250 与 10255；对于 10250 端口，kubelet 会在其上采用 TLS 加密以提供适当的鉴权功能；对于 10255 端口，kubelet 会以只读形式暴露组件本身的私有 api，并且不做鉴权处理&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;总结一下，就是说 kubelet 上实际上有两个地方用到证书，一个是用于与 API server 通讯所用到的证书，另一个是 kubelet 的 10250 私有 api 端口需要用到的证书&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;22csr-请求类型&quot;&gt;2.2、CSR 请求类型&lt;/h4&gt;

&lt;p&gt;kubelet 发起的 CSR 请求都是由 controller manager 来做实际签署的，对于 controller manager 来说，TLS bootstrapping 下 kubelet 发起的 CSR 请求大致分为以下三种&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;nodeclient: kubelet 以 &lt;code class=&quot;highlighter-rouge&quot;&gt;O=system:nodes&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;CN=system:node:(node name)&lt;/code&gt; 形式发起的 CSR 请求&lt;/li&gt;
  &lt;li&gt;selfnodeclient: kubelet client renew 自己的证书发起的 CSR 请求(与上一个证书就有相同的 O 和 CN)&lt;/li&gt;
  &lt;li&gt;selfnodeserver: kubelet server renew 自己的证书发起的 CSR 请求&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;大白话加自己测试得出的结果: nodeclient 类型的 CSR 仅在第一次启动时会产生，selfnodeclient 类型的 CSR 请求实际上就是 kubelet renew 自己作为 client 跟 apiserver 通讯时使用的证书产生的，selfnodeserver 类型的 CSR 请求则是 kubelet 首次申请或后续 renew 自己的 10250 api 端口证书时产生的&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;三tls-bootstrapping-具体引导过程&quot;&gt;三、TLS bootstrapping 具体引导过程&lt;/h3&gt;

&lt;h4 id=&quot;31kubernetes-tls-与-rbac-认证&quot;&gt;3.1、Kubernetes TLS 与 RBAC 认证&lt;/h4&gt;

&lt;p&gt;在说具体的引导过程之前先谈一下 TLS 和 RBAC，因为这两个事不整明白下面的都不用谈；&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;TLS 作用&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;众所周知 TLS 的作用就是对通讯加密，防止中间人窃听；同时如果证书不信任的话根本就无法与 apiserver 建立连接，更不用提有没有权限向 apiserver 请求指定内容&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;RBAC 作用&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;当 TLS 解决了通讯问题后，那么权限问题就应由 RBAC 解决(可以使用其他权限模型，如 ABAC)；RBAC 中规定了一个用户或者用户组(subject)具有请求哪些 api 的权限；&lt;strong&gt;在配合 TLS 加密的时候，实际上 apiserver 读取客户端证书的 CN 字段作为用户名，读取 O 字段作为用户组&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;从以上两点上可以总结出两点: 第一，想要与 apiserver 通讯就必须采用由 apiserver CA 签发的证书，这样才能形成信任关系，建立 TLS 连接；第二，可以通过证书的 CN、O 字段来提供 RBAC 所需的用户与用户组&lt;/p&gt;

&lt;h4 id=&quot;32kubelet-首次启动流程&quot;&gt;3.2、kubelet 首次启动流程&lt;/h4&gt;

&lt;p&gt;看完上面的介绍，不知道有没有人想过，既然 TLS bootstrapping 功能是让 kubelet 组件去 apiserver 申请证书，然后用于连接 apiserver；&lt;strong&gt;那么第一次启动时没有证书如何连接 apiserver ?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这个问题实际上可以去查看一下 &lt;code class=&quot;highlighter-rouge&quot;&gt;bootstrap.kubeconfig&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;token.csv&lt;/code&gt; 得到答案: &lt;strong&gt;在 apiserver 配置中指定了一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;token.csv&lt;/code&gt; 文件，该文件中是一个预设的用户配置；同时该用户的 Token 和 apiserver 的 CA 证书被写入了 kubelet 所使用的 &lt;code class=&quot;highlighter-rouge&quot;&gt;bootstrap.kubeconfig&lt;/code&gt; 配置文件中；这样在首次请求时，kubelet 使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;bootstrap.kubeconfig&lt;/code&gt; 中的 apiserver CA 证书来与 apiserver 建立 TLS 通讯，使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;bootstrap.kubeconfig&lt;/code&gt; 中的用户 Token 来向 apiserver 声明自己的 RBAC 授权身份&lt;/strong&gt;，如下图所示&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/ji5ug.png&quot; alt=&quot;first_request&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在有些用户首次启动时，可能与遇到 kubelet 报 401 无权访问 apiserver 的错误；&lt;strong&gt;这是因为在默认情况下，kubelet 通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;bootstrap.kubeconfig&lt;/code&gt; 中的预设用户 Token 声明了自己的身份，然后创建 CSR 请求；但是不要忘记这个用户在我们不处理的情况下他没任何权限的，包括创建 CSR 请求；所以需要如下命令创建一个 ClusterRoleBinding，将预设用户 &lt;code class=&quot;highlighter-rouge&quot;&gt;kubelet-bootstrap&lt;/code&gt; 与内置的 ClusterRole &lt;code class=&quot;highlighter-rouge&quot;&gt;system:node-bootstrapper&lt;/code&gt; 绑定到一起，使其能够发起 CSR 请求&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl create clusterrolebinding kubelet-bootstrap &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--clusterrole&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;system:node-bootstrapper &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;kubelet-bootstrap
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;33手动签发证书&quot;&gt;3.3、手动签发证书&lt;/h4&gt;

&lt;p&gt;在 kubelet 首次启动后，如果用户 Token 没问题，并且 RBAC 也做了相应的设置，那么此时在集群内应该能看到 kubelet 发起的 CSR 请求&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/n9bbw.png&quot; alt=&quot;bootstrap_csr&quot; /&gt;&lt;/p&gt;

&lt;p&gt;出现 CSR 请求后，可以使用 kubectl 手动签发(允许) kubelet 的证书&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/5ssf8.png&quot; alt=&quot;bootstrap_approve_crt&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;当成功签发证书后，目标节点的 kubelet 会将证书写入到 &lt;code class=&quot;highlighter-rouge&quot;&gt;--cert-dir=&lt;/code&gt; 选项指定的目录中；注意此时如果不做其他设置应当生成四个文件&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/a25ip.png&quot; alt=&quot;bootstrap_crt&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;而 kubelet 与 apiserver 通讯所使用的证书为 &lt;code class=&quot;highlighter-rouge&quot;&gt;kubelet-client.crt&lt;/code&gt;，剩下的 &lt;code class=&quot;highlighter-rouge&quot;&gt;kubelet.crt&lt;/code&gt; 将会被用于 &lt;code class=&quot;highlighter-rouge&quot;&gt;kubelet server&lt;/code&gt;(10250) 做鉴权使用；注意，此时 &lt;code class=&quot;highlighter-rouge&quot;&gt;kubelet.crt&lt;/code&gt; 这个证书是个独立于 apiserver CA 的自签 CA，并且删除后 kubelet 组件会重新生成它&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;四tls-bootstrapping-证书自动续期&quot;&gt;四、TLS bootstrapping 证书自动续期&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;单独把这部分拿出来写，是因为个人觉得上面已经有点乱了；这部分实际上更复杂，只好单独写一下了，因为这部分涉及的东西比较多，所以也不想草率的几笔带过&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;41rbac-授权&quot;&gt;4.1、RBAC 授权&lt;/h4&gt;

&lt;p&gt;首先…首先好几次了…嗯，就是说 kubelet 所发起的 CSR 请求是由 controller manager 签署的；如果想要是实现自动续期，就需要让 controller manager 能够在 kubelet 发起证书请求的时候自动帮助其签署证书；那么 controller manager 不可能对所有的 CSR 证书申请都自动签署，这时候就需要配置 RBAC 规则，&lt;strong&gt;保证 controller manager 只对 kubelet 发起的特定 CSR 请求自动批准即可&lt;/strong&gt;；在 TLS bootstrapping 官方文档中，针对上面 2.2 章节提出的 3 种 CSR 请求分别给出了 3 种对应的 ClusterRole，如下所示&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# A ClusterRole which instructs the CSR approver to approve a user requesting&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# node client credentials.&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ClusterRole&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;rbac.authorization.k8s.io/v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;approve-node-client-csr&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;rules&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;apiGroups&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;certificates.k8s.io&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;resources&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;certificatesigningrequests/nodeclient&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;verbs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;create&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# A ClusterRole which instructs the CSR approver to approve a node renewing its&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# own client credentials.&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ClusterRole&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;rbac.authorization.k8s.io/v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;approve-node-client-renewal-csr&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;rules&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;apiGroups&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;certificates.k8s.io&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;resources&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;certificatesigningrequests/selfnodeclient&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;verbs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;create&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# A ClusterRole which instructs the CSR approver to approve a node requesting a&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# serving cert matching its client cert.&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ClusterRole&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;rbac.authorization.k8s.io/v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;approve-node-server-renewal-csr&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;rules&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;apiGroups&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;certificates.k8s.io&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;resources&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;certificatesigningrequests/selfnodeserver&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;verbs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;create&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;RBAC 中 ClusterRole 只是描述或者说定义一种集群范围内的能力，这三个 ClusterRole 在 1.7 之前需要自己手动创建，在 1.8 后 apiserver 会自动创建前两个(1.8 以后名称有改变，自己查看文档)；以上三个 ClusterRole 含义如下&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;approve-node-client-csr: 具有自动批准 nodeclient 类型 CSR 请求的能力&lt;/li&gt;
  &lt;li&gt;approve-node-client-renewal-csr: 具有自动批准 selfnodeclient 类型 CSR 请求的能力&lt;/li&gt;
  &lt;li&gt;approve-node-server-renewal-csr: 具有自动批准 selfnodeserver 类型 CSR 请求的能力&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;所以，如果想要 kubelet 能够自动续期，那么就应当将适当的 ClusterRole 绑定到 kubelet 自动续期时所所采用的用户或者用户组身上&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;42自动续期下的引导过程&quot;&gt;4.2、自动续期下的引导过程&lt;/h4&gt;

&lt;p&gt;在自动续期下引导过程与单纯的手动批准 CSR 有点差异，具体的引导流程地址如下&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;kubelet 读取 bootstrap.kubeconfig，使用其 CA 与 Token 向 apiserver 发起第一次 CSR 请求(nodeclient)&lt;/li&gt;
  &lt;li&gt;apiserver 根据 RBAC 规则自动批准首次 CSR 请求(approve-node-client-csr)，并下发证书(kubelet-client.crt)&lt;/li&gt;
  &lt;li&gt;kubelet &lt;strong&gt;使用刚刚签发的证书(O=system:nodes, CN=system:node:NODE_NAME)&lt;/strong&gt;与 apiserver 通讯，并发起申请 10250 server 所使用证书的 CSR 请求&lt;/li&gt;
  &lt;li&gt;apiserver 根据 RBAC 规则自动批准 kubelet 为其 10250 端口申请的证书(kubelet-server-current.crt)&lt;/li&gt;
  &lt;li&gt;证书即将到期时，kubelet 自动向 apiserver 发起用于与 apiserver 通讯所用证书的 renew CSR 请求和 renew 本身 10250 端口所用证书的 CSR 请求&lt;/li&gt;
  &lt;li&gt;apiserver 根据 RBAC 规则自动批准两个证书&lt;/li&gt;
  &lt;li&gt;kubelet 拿到新证书后关闭所有连接，reload 新证书，以后便一直如此&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;从以上流程我们可以看出，我们如果要创建 RBAC 规则，则至少能满足四种情况:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;自动批准 kubelet 首次用于与 apiserver 通讯证书的 CSR 请求(nodeclient)&lt;/li&gt;
  &lt;li&gt;自动批准 kubelet 首次用于 10250 端口鉴权的 CSR 请求(实际上这个请求走的也是 selfnodeserver 类型 CSR)&lt;/li&gt;
  &lt;li&gt;自动批准 kubelet 后续 renew 用于与 apiserver 通讯证书的 CSR 请求(selfnodeclient)&lt;/li&gt;
  &lt;li&gt;自动批准 kubelet 后续 renew 用于 10250 端口鉴权的 CSR 请求(selfnodeserver)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;基于以上四种情况，我们需要创建 3 个 ClusterRoleBinding，创建如下&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 自动批准 kubelet 的首次 CSR 请求(用于与 apiserver 通讯的证书)&lt;/span&gt;
kubectl create clusterrolebinding node-client-auto-approve-csr &lt;span class=&quot;nt&quot;&gt;--clusterrole&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;approve-node-client-csr &lt;span class=&quot;nt&quot;&gt;--group&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;system:bootstrappers

&lt;span class=&quot;c&quot;&gt;# 自动批准 kubelet 后续 renew 用于与 apiserver 通讯证书的 CSR 请求&lt;/span&gt;
kubectl create clusterrolebinding node-client-auto-renew-crt &lt;span class=&quot;nt&quot;&gt;--clusterrole&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;approve-node-client-renewal-csr &lt;span class=&quot;nt&quot;&gt;--group&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;system:nodes

&lt;span class=&quot;c&quot;&gt;# 自动批准 kubelet 发起的用于 10250 端口鉴权证书的 CSR 请求(包括后续 renew)&lt;/span&gt;
kubectl create clusterrolebinding node-server-auto-renew-crt &lt;span class=&quot;nt&quot;&gt;--clusterrole&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;approve-node-server-renewal-csr &lt;span class=&quot;nt&quot;&gt;--group&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;system:nodes
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;43开启自动续期&quot;&gt;4.3、开启自动续期&lt;/h4&gt;

&lt;p&gt;在 1.7 后，kubelet 启动时增加 &lt;code class=&quot;highlighter-rouge&quot;&gt;--feature-gates=RotateKubeletClientCertificate=true,RotateKubeletServerCertificate=true&lt;/code&gt; 选项，则 kubelet 在证书即将到期时会自动发起一个 renew 自己证书的 CSR 请求；同时 controller manager 需要在启动时增加 &lt;code class=&quot;highlighter-rouge&quot;&gt;--feature-gates=RotateKubeletServerCertificate=true&lt;/code&gt; 参数，再配合上面创建好的 ClusterRoleBinding，kubelet client 和 kubelet server 证才书会被自动签署；&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注意，1.7 版本设置自动续期参数后，新的 renew 请求不会立即开始，而是在证书总有效期的 &lt;code class=&quot;highlighter-rouge&quot;&gt;70%~90%&lt;/code&gt; 的时间时发起；而且经测试 1.7 版本即使自动签发了证书，kubelet 在不重启的情况下不会重新应用新证书；在 1.8 后 kubelet 组件在增加一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;--rotate-certificates&lt;/code&gt; 参数后，kubelet 才会自动重载新证书&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;43证书过期问题&quot;&gt;4.3、证书过期问题&lt;/h4&gt;

&lt;p&gt;需要重复强调一个问题是: &lt;strong&gt;TLS bootstrapping 时的证书实际是由 kube-controller-manager 组件来签署的，也就是说证书有效期是 kube-controller-manager 组件控制的&lt;/strong&gt;；所以在 1.7 版本以后(我查文档发现的从1.7开始有) kube-controller-manager 组件提供了一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;--experimental-cluster-signing-duration&lt;/code&gt; 参数来设置签署的证书有效时间；默认为 &lt;code class=&quot;highlighter-rouge&quot;&gt;8760h0m0s&lt;/code&gt;，将其改为 &lt;code class=&quot;highlighter-rouge&quot;&gt;87600h0m0s&lt;/code&gt; 即 10 年后再进行 TLS bootstrapping 签署证书即可。&lt;/p&gt;

&lt;h3 id=&quot;五tls-bootstrapping-总结以及详细操作&quot;&gt;五、TLS bootstrapping 总结以及详细操作&lt;/h3&gt;

&lt;h4 id=&quot;51主要流程细节&quot;&gt;5.1、主要流程细节&lt;/h4&gt;

&lt;p&gt;kubelet 首次启动通过加载 &lt;code class=&quot;highlighter-rouge&quot;&gt;bootstrap.kubeconfig&lt;/code&gt; 中的用户 Token 和 apiserver CA 证书发起首次 CSR 请求，这个 Token 被预先内置在 apiserver 节点的 token.csv 中，其身份为 &lt;code class=&quot;highlighter-rouge&quot;&gt;kubelet-bootstrap&lt;/code&gt; 用户和 &lt;code class=&quot;highlighter-rouge&quot;&gt;system:bootstrappers&lt;/code&gt; 用户组；想要首次 CSR 请求能成功(成功指的是不会被 apiserver 401 拒绝)，则需要先将 &lt;code class=&quot;highlighter-rouge&quot;&gt;kubelet-bootstrap&lt;/code&gt; 用户和 &lt;code class=&quot;highlighter-rouge&quot;&gt;system:node-bootstrapper&lt;/code&gt; 内置 ClusterRole 绑定；&lt;/p&gt;

&lt;p&gt;对于首次 CSR 请求可以手动批准，也可以将 &lt;code class=&quot;highlighter-rouge&quot;&gt;system:bootstrappers&lt;/code&gt; 用户组与 &lt;code class=&quot;highlighter-rouge&quot;&gt;approve-node-client-csr&lt;/code&gt; ClusterRole 绑定实现自动批准(1.8 之前这个 ClusterRole 需要手动创建，1.8 后 apiserver 自动创建，并更名为 &lt;code class=&quot;highlighter-rouge&quot;&gt;system:certificates.k8s.io:certificatesigningrequests:nodeclient&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;默认签署的的证书只有 1 年有效期，如果想要调整证书有效期可以通过设置 kube-controller-manager 的 &lt;code class=&quot;highlighter-rouge&quot;&gt;--experimental-cluster-signing-duration&lt;/code&gt; 参数实现，该参数默认值为 &lt;code class=&quot;highlighter-rouge&quot;&gt;8760h0m0s&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;对于证书自动续签，需要通过协调两个方面实现；第一，想要 kubelet 在证书到期后自动发起续期请求，则需要在 kubelet 启动时增加 &lt;code class=&quot;highlighter-rouge&quot;&gt;--feature-gates=RotateKubeletClientCertificate=true,RotateKubeletServerCertificate=true&lt;/code&gt; 来实现；第二，想要让 controller manager 自动批准续签的 CSR 请求需要在 controller manager 启动时增加 &lt;code class=&quot;highlighter-rouge&quot;&gt;--feature-gates=RotateKubeletServerCertificate=true&lt;/code&gt; 参数，并绑定对应的 RBAC 规则；&lt;strong&gt;同时需要注意的是 1.7 版本的 kubelet 自动续签后需要手动重启 kubelet 以使其重新加载新证书，而 1.8 后只需要在 kublet 启动时附带 &lt;code class=&quot;highlighter-rouge&quot;&gt;--rotate-certificates&lt;/code&gt; 选项就会自动重新加载新证书&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;52证书及配置文件作用&quot;&gt;5.2、证书及配置文件作用&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;token.csv&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;该文件为一个用户的描述文件，基本格式为 &lt;code class=&quot;highlighter-rouge&quot;&gt;Token,用户名,UID,用户组&lt;/code&gt;；这个文件在 apiserver 启动时被 apiserver 加载，然后就相当于在集群内创建了一个这个用户；接下来就可以用 RBAC 给他授权；持有这个用户 Token 的组件访问 apiserver 的时候，apiserver 根据 RBAC 定义的该用户应当具有的权限来处理相应请求&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;bootstarp.kubeconfig&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;该文件中内置了 token.csv 中用户的 Token，以及 apiserver CA 证书；kubelet 首次启动会加载此文件，使用 apiserver CA 证书建立与 apiserver 的 TLS 通讯，使用其中的用户 Token 作为身份标识像 apiserver 发起 CSR 请求&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;kubelet-client.crt&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;该文件在 kubelet 完成 TLS bootstrapping 后生成，此证书是由 controller manager 签署的，此后 kubelet 将会加载该证书，用于与 apiserver 建立 TLS 通讯，同时使用该证书的 CN 字段作为用户名，O 字段作为用户组向 apiserver 发起其他请求&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;kubelet.crt&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;该文件在 kubelet 完成 TLS bootstrapping 后并且&lt;strong&gt;没有配置 &lt;code class=&quot;highlighter-rouge&quot;&gt;--feature-gates=RotateKubeletServerCertificate=true&lt;/code&gt; 时才会生成&lt;/strong&gt;；这种情况下该文件为一个独立于 apiserver CA 的自签 CA 证书，有效期为 1 年；被用作 kubelet 10250 api 端口&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;kubelet-server.crt&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;该文件在 kubelet 完成 TLS bootstrapping 后并且&lt;strong&gt;配置了 &lt;code class=&quot;highlighter-rouge&quot;&gt;--feature-gates=RotateKubeletServerCertificate=true&lt;/code&gt; 时才会生成&lt;/strong&gt;；这种情况下该证书由 apiserver CA 签署，默认有效期同样是 1 年，被用作 kubelet 10250 api 端口鉴权&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;kubelet-client-current.pem&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这是一个软连接文件，当 kubelet 配置了 &lt;code class=&quot;highlighter-rouge&quot;&gt;--feature-gates=RotateKubeletClientCertificate=true&lt;/code&gt; 选项后，会在证书总有效期的 &lt;code class=&quot;highlighter-rouge&quot;&gt;70%~90%&lt;/code&gt; 的时间内发起续期请求，请求被批准后会生成一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;kubelet-client-时间戳.pem&lt;/code&gt;；&lt;code class=&quot;highlighter-rouge&quot;&gt;kubelet-client-current.pem&lt;/code&gt; 文件则始终软连接到最新的真实证书文件，除首次启动外，kubelet 一直会使用这个证书同  apiserver 通讯&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;kubelet-server-current.pem&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;同样是一个软连接文件，当 kubelet 配置了 &lt;code class=&quot;highlighter-rouge&quot;&gt;--feature-gates=RotateKubeletServerCertificate=true&lt;/code&gt; 选项后，会在证书总有效期的 &lt;code class=&quot;highlighter-rouge&quot;&gt;70%~90%&lt;/code&gt; 的时间内发起续期请求，请求被批准后会生成一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;kubelet-server-时间戳.pem&lt;/code&gt;；&lt;code class=&quot;highlighter-rouge&quot;&gt;kubelet-server-current.pem&lt;/code&gt; 文件则始终软连接到最新的真实证书文件，该文件将会一直被用于 kubelet 10250 api 端口鉴权&lt;/p&gt;

&lt;h4 id=&quot;5317-tls-bootstrapping-配置&quot;&gt;5.3、1.7 TLS bootstrapping 配置&lt;/h4&gt;

&lt;p&gt;apiserver 预先放置 token.csv，内容样例如下&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;6df3c701f979cee17732c30958745947,kubelet-bootstrap,10001,&lt;span class=&quot;s2&quot;&gt;&quot;system:bootstrappers&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;允许 kubelet-bootstrap 用户创建首次启动的 CSR 请求&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl create clusterrolebinding kubelet-bootstrap &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--clusterrole&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;system:node-bootstrapper &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;kubelet-bootstrap
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;配置 kubelet 自动续期，&lt;strong&gt;RotateKubeletClientCertificate 用于自动续期 kubelet 连接 apiserver 所用的证书(kubelet-client-xxxx.pem)，RotateKubeletServerCertificate 用于自动续期 kubelet 10250 api 端口所使用的证书(kubelet-server-xxxx.pem)&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;KUBELET_ARGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--cgroup-driver=cgroupfs &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
              --cluster-dns=10.254.0.2 &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
              --resolv-conf=/etc/resolv.conf &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
              --experimental-bootstrap-kubeconfig=/etc/kubernetes/bootstrap.kubeconfig &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
              --feature-gates=RotateKubeletClientCertificate=true,RotateKubeletServerCertificate=true &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
              --kubeconfig=/etc/kubernetes/kubelet.kubeconfig &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
              --fail-swap-on=false &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
              --cert-dir=/etc/kubernetes/ssl &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
              --cluster-domain=cluster.local. &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
              --hairpin-mode=promiscuous-bridge &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
              --serialize-image-pulls=false &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
              --pod-infra-container-image=gcr.io/google_containers/pause-amd64:3.0&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;配置 controller manager 自动批准相关 CSR 请求，&lt;strong&gt;如果不配置 &lt;code class=&quot;highlighter-rouge&quot;&gt;--feature-gates=RotateKubeletServerCertificate=true&lt;/code&gt; 参数，则即使配置了相关的 RBAC 规则，也只会自动批准 kubelet client 的 renew 请求&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;KUBE_CONTROLLER_MANAGER_ARGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--address=0.0.0.0 &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
                              --service-cluster-ip-range=10.254.0.0/16 &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
                              --feature-gates=RotateKubeletServerCertificate=true &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
                              --cluster-name=kubernetes &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
                              --cluster-signing-cert-file=/etc/kubernetes/ssl/k8s-root-ca.pem &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
                              --cluster-signing-key-file=/etc/kubernetes/ssl/k8s-root-ca-key.pem &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
                              --service-account-private-key-file=/etc/kubernetes/ssl/k8s-root-ca-key.pem &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
                              --root-ca-file=/etc/kubernetes/ssl/k8s-root-ca.pem &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
                              --leader-elect=true &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
                              --node-monitor-grace-period=40s &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
                              --node-monitor-period=5s &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
                              --pod-eviction-timeout=5m0s&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;创建自动批准相关 CSR 请求的 ClusterRole&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# A ClusterRole which instructs the CSR approver to approve a user requesting&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# node client credentials.&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ClusterRole&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;rbac.authorization.k8s.io/v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;approve-node-client-csr&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;rules&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;apiGroups&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;certificates.k8s.io&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;resources&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;certificatesigningrequests/nodeclient&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;verbs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;create&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# A ClusterRole which instructs the CSR approver to approve a node renewing its&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# own client credentials.&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ClusterRole&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;rbac.authorization.k8s.io/v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;approve-node-client-renewal-csr&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;rules&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;apiGroups&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;certificates.k8s.io&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;resources&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;certificatesigningrequests/selfnodeclient&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;verbs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;create&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;nn&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# A ClusterRole which instructs the CSR approver to approve a node requesting a&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# serving cert matching its client cert.&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ClusterRole&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;rbac.authorization.k8s.io/v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;approve-node-server-renewal-csr&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;rules&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;apiGroups&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;certificates.k8s.io&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;resources&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;certificatesigningrequests/selfnodeserver&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;verbs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;create&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;将 ClusterRole 绑定到适当的用户组，以完成自动批准相关 CSR 请求&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 自动批准 system:bootstrappers 组用户 TLS bootstrapping 首次申请证书的 CSR 请求&lt;/span&gt;
kubectl create clusterrolebinding node-client-auto-approve-csr &lt;span class=&quot;nt&quot;&gt;--clusterrole&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;approve-node-client-csr &lt;span class=&quot;nt&quot;&gt;--group&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;system:bootstrappers

&lt;span class=&quot;c&quot;&gt;# 自动批准 system:nodes 组用户更新 kubelet 自身与 apiserver 通讯证书的 CSR 请求&lt;/span&gt;
kubectl create clusterrolebinding node-client-auto-renew-crt &lt;span class=&quot;nt&quot;&gt;--clusterrole&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;approve-node-client-renewal-csr &lt;span class=&quot;nt&quot;&gt;--group&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;system:nodes

&lt;span class=&quot;c&quot;&gt;# 自动批准 system:nodes 组用户更新 kubelet 10250 api 端口证书的 CSR 请求&lt;/span&gt;
kubectl create clusterrolebinding node-server-auto-renew-crt &lt;span class=&quot;nt&quot;&gt;--clusterrole&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;approve-node-server-renewal-csr &lt;span class=&quot;nt&quot;&gt;--group&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;system:nodes
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;一切就绪后启动 kubelet 组件即可，不过需要注意的是 1.7 版本 kubelet 不会自动重载 renew 的证书，需要自己手动重启&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;5418-tls-bootstrapping-配置&quot;&gt;5.4、1.8 TLS bootstrapping 配置&lt;/h4&gt;

&lt;p&gt;apiserver 预先放置 token.csv，内容样例如下&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;6df3c701f979cee17732c30958745947,kubelet-bootstrap,10001,&lt;span class=&quot;s2&quot;&gt;&quot;system:bootstrappers&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;允许 kubelet-bootstrap 用户创建首次启动的 CSR 请求&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl create clusterrolebinding kubelet-bootstrap &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--clusterrole&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;system:node-bootstrapper &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;kubelet-bootstrap
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;配置 kubelet 自动续期，&lt;strong&gt;RotateKubeletClientCertificate 用于自动续期 kubelet 连接 apiserver 所用的证书(kubelet-client-xxxx.pem)，RotateKubeletServerCertificate 用于自动续期 kubelet 10250 api 端口所使用的证书(kubelet-server-xxxx.pem)，&lt;code class=&quot;highlighter-rouge&quot;&gt;--rotate-certificates&lt;/code&gt; 选项使得 kubelet 能够自动重载新证书&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;KUBELET_ARGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--cgroup-driver=cgroupfs &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
              --cluster-dns=10.254.0.2 &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
              --resolv-conf=/etc/resolv.conf &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
              --experimental-bootstrap-kubeconfig=/etc/kubernetes/bootstrap.kubeconfig &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
              --feature-gates=RotateKubeletClientCertificate=true,RotateKubeletServerCertificate=true &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
              --rotate-certificates &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
              --kubeconfig=/etc/kubernetes/kubelet.kubeconfig &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
              --fail-swap-on=false &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
              --cert-dir=/etc/kubernetes/ssl &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
              --cluster-domain=cluster.local. &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
              --hairpin-mode=promiscuous-bridge &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
              --serialize-image-pulls=false &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
              --pod-infra-container-image=gcr.io/google_containers/pause-amd64:3.0&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;配置 controller manager 自动批准相关 CSR 请求，&lt;strong&gt;如果不配置 &lt;code class=&quot;highlighter-rouge&quot;&gt;--feature-gates=RotateKubeletServerCertificate=true&lt;/code&gt; 参数，则即使配置了相关的 RBAC 规则，也只会自动批准 kubelet client 的 renew 请求&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;KUBE_CONTROLLER_MANAGER_ARGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--address=0.0.0.0 &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
                              --service-cluster-ip-range=10.254.0.0/16 &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
                              --cluster-name=kubernetes &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
                              --cluster-signing-cert-file=/etc/kubernetes/ssl/k8s-root-ca.pem &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
                              --cluster-signing-key-file=/etc/kubernetes/ssl/k8s-root-ca-key.pem &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
                              --service-account-private-key-file=/etc/kubernetes/ssl/k8s-root-ca-key.pem &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
                              --feature-gates=RotateKubeletServerCertificate=true &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
                              --root-ca-file=/etc/kubernetes/ssl/k8s-root-ca.pem &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
                              --leader-elect=true &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
                              --experimental-cluster-signing-duration 10m0s &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
                              --node-monitor-grace-period=40s &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
                              --node-monitor-period=5s &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
                              --pod-eviction-timeout=5m0s&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;创建自动批准相关 CSR 请求的 ClusterRole，相对于 1.7 版本，1.8 的 apiserver 自动创建了前两条 ClusterRole，所以只需要创建一条就行了&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# A ClusterRole which instructs the CSR approver to approve a node requesting a&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# serving cert matching its client cert.&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ClusterRole&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;apiVersion&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;rbac.authorization.k8s.io/v1&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;system:certificates.k8s.io:certificatesigningrequests:selfnodeserver&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;rules&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;apiGroups&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;certificates.k8s.io&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;resources&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;certificatesigningrequests/selfnodeserver&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;verbs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;create&quot;&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;将 ClusterRole 绑定到适当的用户组，以完成自动批准相关 CSR 请求&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 自动批准 system:bootstrappers 组用户 TLS bootstrapping 首次申请证书的 CSR 请求&lt;/span&gt;
kubectl create clusterrolebinding node-client-auto-approve-csr &lt;span class=&quot;nt&quot;&gt;--clusterrole&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;system:certificates.k8s.io:certificatesigningrequests:nodeclient &lt;span class=&quot;nt&quot;&gt;--group&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;system:bootstrappers

&lt;span class=&quot;c&quot;&gt;# 自动批准 system:nodes 组用户更新 kubelet 自身与 apiserver 通讯证书的 CSR 请求&lt;/span&gt;
kubectl create clusterrolebinding node-client-auto-renew-crt &lt;span class=&quot;nt&quot;&gt;--clusterrole&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;system:certificates.k8s.io:certificatesigningrequests:selfnodeclient &lt;span class=&quot;nt&quot;&gt;--group&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;system:nodes

&lt;span class=&quot;c&quot;&gt;# 自动批准 system:nodes 组用户更新 kubelet 10250 api 端口证书的 CSR 请求&lt;/span&gt;
kubectl create clusterrolebinding node-server-auto-renew-crt &lt;span class=&quot;nt&quot;&gt;--clusterrole&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;system:certificates.k8s.io:certificatesigningrequests:selfnodeserver &lt;span class=&quot;nt&quot;&gt;--group&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;system:nodes
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;一切就绪后启动 kubelet 组件即可，1.8 版本 kubelet 会自动重载证书，以下为 1.8 版本在运行一段时间后的相关证书截图&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/570wk.png&quot; alt=&quot;tls_bootstrapping_crts&quot; /&gt;&lt;/p&gt;

&lt;p&gt;转载请注明出处，本文采用 &lt;a href=&quot;http://creativecommons.org/licenses/by-nc-nd/4.0/&quot;&gt;CC4.0&lt;/a&gt; 协议授权&lt;/p&gt;</content><author><name>漠然</name></author><summary type="html">前段时间撸了一会 Kubernetes 官方文档，在查看 TLS bootstrapping 这块是发现已经跟 1.4 的时候完全不一样了；目前所有搭建文档也都保留着 1.4 时代的配置，在看完文档后发现目前配置有很多问题，同时也埋下了 隐藏炸弹，这个问题可能会在一年后爆发…..后果就是集群 node 全部掉线；所以仔细的撸了一下这个文档，从元旦到写此文章的时间都在测试这个 TLS bootstrapping，以下记录一下这次的成果</summary></entry><entry><title type="html">CI/CD 之 GitLab CI</title><link href="https://mritd.me/2017/11/28/ci-cd-gitlab-ci/" rel="alternate" type="text/html" title="CI/CD 之 GitLab CI" /><published>2017-11-28T17:43:23+08:00</published><updated>2017-11-28T17:43:23+08:00</updated><id>https://mritd.me/2017/11/28/ci-cd-gitlab-ci</id><content type="html" xml:base="https://mritd.me/2017/11/28/ci-cd-gitlab-ci/">&lt;blockquote&gt;
  &lt;p&gt;接着上篇文章整理，这篇文章主要介绍一下 GitLab CI 相关功能，并通过 GitLab CI 实现自动化构建项目；项目中所用的示例项目已经上传到了 &lt;a href=&quot;https://github.com/mritd/GitLabCI-TestProject&quot;&gt;GitHub&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;一环境准备&quot;&gt;一、环境准备&lt;/h3&gt;

&lt;p&gt;首先需要有一台 GitLab 服务器，然后需要有个项目；这里示例项目以 Spring Boot 项目为例，然后最好有一台专门用来 Build 的机器，实际生产中如果 Build 任务不频繁可适当用一些业务机器进行 Build；本文示例所有组件将采用 Docker 启动， GitLab HA 等不在本文阐述范围内&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Docker Version : 1.13.1&lt;/li&gt;
  &lt;li&gt;GitLab Version : 10.1.4-ce.0&lt;/li&gt;
  &lt;li&gt;GitLab Runner Version : 10.1.0&lt;/li&gt;
  &lt;li&gt;GitLab IP : 172.16.0.37&lt;/li&gt;
  &lt;li&gt;GitLab Runner IP : 172.16.0.36&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;二gitlab-ci-简介&quot;&gt;二、GitLab CI 简介&lt;/h3&gt;

&lt;p&gt;GitLab CI 是 GitLab 默认集成的 CI 功能，GitLab CI 通过在项目内 &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitlab-ci.yaml&lt;/code&gt; 配置文件读取 CI 任务并进行相应处理；GitLab CI 通过其称为 GitLab Runner 的 Agent 端进行 build 操作；Runner 本身可以使用多种方式安装，比如使用 Docker 镜像启动等；Runner 在进行 build 操作时也可以选择多种 build 环境提供者；比如直接在 Runner 所在宿主机 build、通过新创建虚拟机(vmware、virtualbox)进行 build等；同时 Runner 支持 Docker 作为 build 提供者，即每次 build 新启动容器进行 build；GitLab CI 其大致架构如下&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/wejnz.png&quot; alt=&quot;GitLab&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;三搭建-gitlab-服务器&quot;&gt;三、搭建 GitLab 服务器&lt;/h3&gt;

&lt;h4 id=&quot;31gitlab-搭建&quot;&gt;3.1、GitLab 搭建&lt;/h4&gt;

&lt;p&gt;GitLab 搭建这里直接使用 docker compose 启动，compose 配置如下&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;version: &lt;span class=&quot;s1&quot;&gt;'2'&lt;/span&gt;
services:
  gitlab:
    image: &lt;span class=&quot;s1&quot;&gt;'gitlab/gitlab-ce:10.1.4-ce.0'&lt;/span&gt;
    restart: always
    container_name: gitlab
    hostname: &lt;span class=&quot;s1&quot;&gt;'git.mritd.me'&lt;/span&gt;
    environment:
      GITLAB_OMNIBUS_CONFIG: |
        external_url &lt;span class=&quot;s1&quot;&gt;'http://git.mritd.me'&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# Add any other gitlab.rb configuration here, each on its own line&lt;/span&gt;
    ports:
      - &lt;span class=&quot;s1&quot;&gt;'80:80'&lt;/span&gt;
      - &lt;span class=&quot;s1&quot;&gt;'443:443'&lt;/span&gt;
      - &lt;span class=&quot;s1&quot;&gt;'8022:22'&lt;/span&gt;
    volumes:
      - &lt;span class=&quot;s1&quot;&gt;'./data/gitlab/config:/etc/gitlab'&lt;/span&gt;
      - &lt;span class=&quot;s1&quot;&gt;'./data/gitlab/logs:/var/log/gitlab'&lt;/span&gt;
      - &lt;span class=&quot;s1&quot;&gt;'./data/gitlab/data:/var/opt/gitlab'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;直接启动后，首次登陆需要设置初始密码如下，默认用户为 &lt;code class=&quot;highlighter-rouge&quot;&gt;root&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/5go94.png&quot; alt=&quot;gitkab init&quot; /&gt;&lt;/p&gt;

&lt;p&gt;登陆成功后创建一个用户(该用户最好给予 Admin 权限，以后操作以该用户为例)，并且创建一个测试 Group 和 Project，如下所示&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/vtyhi.png&quot; alt=&quot;Create User&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/3b7gl.png&quot; alt=&quot;Test Project&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;32增加示例项目&quot;&gt;3.2、增加示例项目&lt;/h4&gt;

&lt;p&gt;这里示例项目采用 Java 的 SpringBoot 项目，并采用 Gradle 构建，其他语言原理一样；&lt;strong&gt;如果不熟悉 Java 的没必要死磕此步配置，任意语言(最好 Java)整一个能用的 Web 项目就行，并不强求一定 Java 并且使用 Gradle 构建，以下只是一个样例项目&lt;/strong&gt;；SpringBoot 可以采用 &lt;a href=&quot;https://start.spring.io/&quot;&gt;Spring Initializr&lt;/a&gt; 直接生成(依赖要加入 WEB)，如下所示&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/0wx6d.png&quot; alt=&quot;Spring Initializr&quot; /&gt;&lt;/p&gt;

&lt;p&gt;将项目导入 IDEA，然后创建一个 index 示例页面，主要修改如下&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;build.gradle&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;buildscript&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ext&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;springBootVersion&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'1.5.8.RELEASE'&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;repositories&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;mavenCentral&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;classpath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;plugin:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'java'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;plugin:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'eclipse'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;plugin:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'idea'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;apply&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;plugin:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'org.springframework.boot'&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'me.mritd'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'0.0.1-SNAPSHOT'&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sourceCompatibility&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.8&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;repositories&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mavenCentral&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;dependencies&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'org.springframework.boot:spring-boot-starter'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'org.springframework.boot:spring-boot-starter-web'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'org.springframework.boot:spring-boot-starter-thymeleaf'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;testCompile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'org.springframework.boot:spring-boot-starter-test'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;新建一个 HomeController&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;package&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;me&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mritd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;TestProject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.stereotype.Controller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;org.springframework.web.bind.annotation.RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/*******************************************************************************
 * Copyright (c) 2005-2017 Mritd, Inc.
 * TestProject
 * me.mritd.TestProject
 * Created by mritd on 2017/11/24 下午12:23.
 * Description: 
 *******************************************************************************/&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Controller&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HomeController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;home&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;index&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;templates 下新建 index.html&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;lang=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;en&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;meta&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;charset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;UTF-8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Title&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Test...&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最后项目整体结构如下&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/5k12p.png&quot; alt=&quot;TestProject&quot; /&gt;&lt;/p&gt;

&lt;p&gt;执行 &lt;code class=&quot;highlighter-rouge&quot;&gt;assemble&lt;/code&gt; Task 打包出可执行 jar 包，并运行 &lt;code class=&quot;highlighter-rouge&quot;&gt;java -jar TestProject-0.0.1-SNAPSHOT.jar&lt;/code&gt; 测试下能启动访问页面即可&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/xoj3d.png&quot; alt=&quot;TestProject assemble&quot; /&gt;&lt;/p&gt;

&lt;p&gt;最后将项目提交到 GitLab 后如下&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/1fuex.png&quot; alt=&quot;init Project&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;四gitlab-ci-配置&quot;&gt;四、GitLab CI 配置&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;针对这一章节创建基础镜像以及项目镜像，这里仅以 Java 项目为例；其他语言原理相通，按照其他语言对应的运行环境修改即可&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&quot;41增加-runner&quot;&gt;4.1、增加 Runner&lt;/h4&gt;

&lt;p&gt;GitLab CI 在进行构建时会将任务下发给 Runner，让 Runner 去执行；所以先要添加一个 Runner，Runner 这里采用 Docker Compose 启动，build 方式也使用 Docker 方式 Build；compose 文件如下&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;2'&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;services&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;gitlab-runner&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;container_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;gitlab-runner&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;gitlab/gitlab-runner:alpine-v10.1.0&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;restart&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;always&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;network_mode&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;host&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;volumes&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/var/run/docker.sock:/var/run/docker.sock&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;./config.toml:/etc/gitlab-runner/config.toml&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;extra_hosts&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;git.mritd.me:172.16.0.37&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;在启动前，我们需要先 touch 一下这个 config.toml 配置文件&lt;/strong&gt;；该文件是 Runner 的运行配置，此后 Runner 所有配置都会写入这个文件(不 touch 出来 docker-compose 发现不存在会挂载一个目录进去，导致 Runner 启动失败)；启动 docker-compose 后，&lt;strong&gt;需要进入容器执行注册，让 Runner 主动去连接 GitLab 服务器&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 生成 Runner 配置文件&lt;/span&gt;
touch config.toml
&lt;span class=&quot;c&quot;&gt;# 启动 Runner&lt;/span&gt;
docker-compose up &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 激活 Runner&lt;/span&gt;
docker &lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; gitlab-runner gitlab-runner register
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在执行上一条激活命令后，会按照提示让你输入一些信息；&lt;strong&gt;首先输入 GitLab 地址，然后是 Runner Token，Runner Token 可以从 GitLab 设置中查看&lt;/strong&gt;，如下所示&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/mfqg7.png&quot; alt=&quot;Runner Token&quot; /&gt;&lt;/p&gt;

&lt;p&gt;整体注册流程如下&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/r7xay.png&quot; alt=&quot;Runner registry&quot; /&gt;&lt;/p&gt;

&lt;p&gt;注册完成后，在 GitLab Runner 设置中就可以看到刚刚注册的 Runner，如下所示&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/xv03e.png&quot; alt=&quot;Runner List&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Runner 注册成功后会将配置写入到 config.toml 配置文件；由于两个测试宿主机都没有配置内网 DNS，所以为了保证 runner 在使用 docker build 时能正确的找到 GitLab 仓库地址，还需要增加一个 docker 的 host 映射( &lt;code class=&quot;highlighter-rouge&quot;&gt;extra_hosts&lt;/code&gt; )；同时为了能调用 宿主机 Docker 和持久化 build 的一些缓存还挂载了一些文件和目录；完整的 配置如下(配置文件可以做一些更高级的配置，具体参考 &lt;a href=&quot;https://docs.gitlab.com/runner/configuration/advanced-configuration.html&quot;&gt;官方文档&lt;/a&gt; )&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;config.toml&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-toml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;py&quot;&gt;concurrent&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;check_interval&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;

&lt;span class=&quot;nn&quot;&gt;[[runners]]&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Test Runner&quot;&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;http://git.mritd.me&quot;&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;token&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;c279ec1ac08aec98c7141c7cf2d474&quot;&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;executor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;docker&quot;&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;builds_dir&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/gitlab/runner-builds&quot;&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;cache_dir&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/gitlab/runner-cache&quot;&lt;/span&gt;
  &lt;span class=&quot;nn&quot;&gt;[runners.docker]&lt;/span&gt;
    &lt;span class=&quot;py&quot;&gt;tls_verify&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;py&quot;&gt;image&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;debian&quot;&lt;/span&gt;
    &lt;span class=&quot;py&quot;&gt;privileged&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;py&quot;&gt;disable_cache&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
    &lt;span class=&quot;py&quot;&gt;shm_size&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;py&quot;&gt;volumes&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;[&quot;/data/gitlab-runner:/gitlab&quot;,&quot;/var/run/docker.sock:/var/run/docker.sock&quot;,&quot;/data/maven_repo:/data/repo&quot;,&quot;/data/maven_repo:/data/maven&quot;,&quot;/data/gradle:/data/gradle&quot;,&quot;/data/sonar_cache:/root/.sonar&quot;,&quot;/data/androidsdk:/usr/local/android&quot;,&quot;/data/node_modules:/data/node_modules&quot;]&lt;/span&gt;
    &lt;span class=&quot;py&quot;&gt;extra_hosts&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;[&quot;git.mritd.me:172.16.0.37&quot;]&lt;/span&gt;
  &lt;span class=&quot;nn&quot;&gt;[runners.cache]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;注意，这里声明的 Volumes 会在每个运行的容器中都生效；也就是说 build 时新开启的每个容器都会被挂载这些目录&lt;/strong&gt;；修改完成后重启 runner 容器即可，由于 runner 中没啥可保存的东西，所以可以直接 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker-compose down &amp;amp;&amp;amp; docker-compose up -d&lt;/code&gt; 重启&lt;/p&gt;

&lt;h4 id=&quot;42创建基础镜像&quot;&gt;4.2、创建基础镜像&lt;/h4&gt;

&lt;p&gt;由于示例项目是一个 Java 项目，而且是采用 Spring Boot 的，所以该项目想要运行起来只需要一个 java 环境即可，中间件已经被打包到了 jar 包中；以下是一个作为基础运行环境的 openjdk 镜像的 Dockerfile&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM alpine:edge 

LABEL &lt;span class=&quot;nv&quot;&gt;maintainer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;mritd &amp;lt;mritd1234@gmail.com&amp;gt;&quot;&lt;/span&gt;

ENV JAVA_HOME /usr/lib/jvm/java-1.8-openjdk
ENV PATH &lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;:/usr/lib/jvm/java-1.8-openjdk/jre/bin:/usr/lib/jvm/java-1.8-openjdk/bin

RUN apk add &lt;span class=&quot;nt&quot;&gt;--update&lt;/span&gt; bash curl &lt;span class=&quot;nb&quot;&gt;tar &lt;/span&gt;wget ca-certificates unzip &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        openjdk8 font-adobe-100dpi ttf-dejavu fontconfig &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; rm &lt;span class=&quot;nt&quot;&gt;-rf&lt;/span&gt; /var/cache/apk/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;

CMD &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bash&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;这个 openjdk Dockerfile 升级到了 8.151 版本，并且集成了一些字体相关的软件，以解决在 Java 中某些验证码库无法运行问题，详见 &lt;a href=&quot;https://mritd.me/2017/09/27/alpine-3.6-openjdk-8-bug/&quot;&gt;Alpine 3.6 OpenJDK 8 Bug&lt;/a&gt;&lt;/strong&gt;；使用这个 Dockerfile，在当前目录执行 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker build -t mritd/openjdk:8 .&lt;/code&gt; build 一个 openjdk8 的基础镜像，然后将其推送到私服，或者 Docker Hub 即可&lt;/p&gt;

&lt;h4 id=&quot;43创建项目镜像&quot;&gt;4.3、创建项目镜像&lt;/h4&gt;

&lt;p&gt;有了基本的 openjdk 的 docker 镜像后，针对于项目每次 build 都应该生成一个包含发布物的 docker 镜像，所以对于项目来说还需要一个项目本身的 Dockerfile；&lt;strong&gt;项目的 Dockerfile 有两种使用方式；一种是动态生成 Dockerfile，然后每次使用新生成的 Dockerfile 去 build；还有一种是写一个通用的 Dockerfile，build 时利用 ARG 参数传入变量&lt;/strong&gt;；这里采用第二种方式，以下为一个可以反复使用的 Dockerfile&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM mritd/openjdk:8-144-01

MAINTAINER mritd &amp;lt;mritd1234@gmail.com&amp;gt;

ARG PROJECT_BUILD_FINALNAME

ENV TZ &lt;span class=&quot;s1&quot;&gt;'Asia/Shanghai'&lt;/span&gt;
ENV PROJECT_BUILD_FINALNAME &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PROJECT_BUILD_FINALNAME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;


COPY build/libs/&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PROJECT_BUILD_FINALNAME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;.jar /&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PROJECT_BUILD_FINALNAME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;.jar

CMD &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bash&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;-c&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;java -jar /&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PROJECT_BUILD_FINALNAME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;.jar&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;该 Dockerfile 通过声明一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;PROJECT_BUILD_FINALNAME&lt;/code&gt; 变量来表示项目的发布物名称；然后将其复制到根目录下，最终利用 java 执行这个 jar 包；所以每次 build 之前只要能拿到项目发布物的名称即可&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;44gradle-修改&quot;&gt;4.4、Gradle 修改&lt;/h4&gt;

&lt;p&gt;上面已经创建了一个标准的通用型 Dockerfile，每次 build 镜像只要传入 &lt;code class=&quot;highlighter-rouge&quot;&gt;PROJECT_BUILD_FINALNAME&lt;/code&gt; 这个最终发布物名称即可；对于发布物名称来说，最好不要固定死；当然不论是 Java 还是其他语言的项目我们都能将最终发布物变成一个固定名字，最不济可以写脚本重命名一下；但是不建议那么干，最好保留版本号信息，以便于异常情况下进入容器能够分辨；对于当前 Java 项目来说，想要拿到 &lt;code class=&quot;highlighter-rouge&quot;&gt;PROJECT_BUILD_FINALNAME&lt;/code&gt; 很简单，我们只需要略微修改一下 Gradle 的 build 脚本，让其每次打包 jar 包时将项目的名称及版本号导出到文件中即可；同时这里也加入了镜像版本号的处理，Gradle 脚本修改如下&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;build.gradle 最后面增加如下&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-groovy highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;bootRepackage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;mainClass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'me.mritd.TestProject.TestProjectApplication'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;executable&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;doLast&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;envFile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;build/tmp/PROJECT_ENV&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Create ${archivesBaseName} ENV File ===&amp;gt; &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;envFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createNewFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Export ${archivesBaseName} Build Version ===&amp;gt; ${version}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;envFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;export PROJECT_BUILD_FINALNAME=${archivesBaseName}-${version}\n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Generate Docker image tag...&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;envFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;export BUILD_DATE=`date +%Y%m%d%H%M%S`\n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;envFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;export IMAGE_NAME=mritd/test:`echo \${CI_BUILD_REF_NAME} | tr '/' '-'`-`echo \${CI_COMMIT_SHA} | cut -c1-8`-\${BUILD_DATE}\n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;envFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;export LATEST_IMAGE_NAME=mritd/test:latest\n&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;这一步操作实际上是修改了 &lt;code class=&quot;highlighter-rouge&quot;&gt;bootRepackage&lt;/code&gt; 这个 Task(不了解 Gradle 或者不是 Java 项目的请忽略)，在其结束后创建了一个叫 &lt;code class=&quot;highlighter-rouge&quot;&gt;PROJECT_ENV&lt;/code&gt; 的文件，里面实际上就是写入了一些 bash 环境变量声明，以方便后面 source 一下这个文件拿到一些变量，然后用户 build 镜像使用&lt;/strong&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;PROJECT_ENV&lt;/code&gt; 最终生成如下&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;PROJECT_BUILD_FINALNAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;TestProject-0.0.1-SNAPSHOT
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BUILD_DATE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;date +%Y%m%d%H%M%S&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;IMAGE_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;mritd/test:&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CI_BUILD_REF_NAME&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; | tr &lt;span class=&quot;s1&quot;&gt;'/'&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'-'&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;-&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CI_COMMIT_SHA&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; | cut &lt;span class=&quot;nt&quot;&gt;-c1-8&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;-&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BUILD_DATE&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;LATEST_IMAGE_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;mritd/test:latest
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/gr6kc.png&quot; alt=&quot;PROJECT_ENV&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;45创建-ci-配置文件&quot;&gt;4.5、创建 CI 配置文件&lt;/h4&gt;

&lt;p&gt;一切准备就绪以后，就可以编写 CI 脚本了；GitLab 依靠读取项目根目录下的 &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitlab-ci.yml&lt;/code&gt; 文件来执行相应的 CI 操作；以下为测试项目的 &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitlab-ci.yml&lt;/code&gt; 配置&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# 调试开启&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#before_script:&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#  - pwd&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#  - env&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;$CI_PROJECT_NAME/$CI_COMMIT_REF_NAME-$CI_COMMIT_SHA&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;paths&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;build&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;stages&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;build&lt;/span&gt;
  &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;deploy&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;auto-build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mritd/build:2.1.1&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;stage&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;build&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;gradle --no-daemon clean assemble&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test&lt;/span&gt;

&lt;span class=&quot;na&quot;&gt;deploy&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mritd/docker-kubectl:v1.7.4&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;stage&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;deploy&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;source build/tmp/PROJECT_ENV&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;echo &quot;Build Docker Image ==&amp;gt; ${IMAGE_NAME}&quot;&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;docker build -t ${IMAGE_NAME} --build-arg PROJECT_BUILD_FINALNAME=${PROJECT_BUILD_FINALNAME} .&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#    - docker push ${IMAGE_NAME}&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;docker tag ${IMAGE_NAME} ${LATEST_IMAGE_NAME}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#    - docker push ${LATEST_IMAGE_NAME}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#    - docker rmi ${IMAGE_NAME} ${LATEST_IMAGE_NAME}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#    - kubectl --kubeconfig ${KUBE_CONFIG} set image deployment/test test=$IMAGE_NAME&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;tags&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;test&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;only&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;master&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;develop&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/^chore.*$/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;关于 CI 配置的一些简要说明如下&lt;/strong&gt;&lt;/p&gt;

&lt;h5 id=&quot;stages&quot;&gt;stages&lt;/h5&gt;

&lt;p&gt;stages 字段定义了整个 CI 一共有哪些阶段流程，以上的 CI 配置中，定义了该项目的 CI 总共分为 &lt;code class=&quot;highlighter-rouge&quot;&gt;build&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;deploy&lt;/code&gt; 两个阶段；GitLab CI 会根据其顺序执行对应阶段下的所有任务；&lt;strong&gt;在正常生产环境流程可以定义很多个，比如可以有 &lt;code class=&quot;highlighter-rouge&quot;&gt;test&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;publish&lt;/code&gt;，甚至可能有代码扫描的 &lt;code class=&quot;highlighter-rouge&quot;&gt;sonar&lt;/code&gt; 阶段等；这些阶段没有任何限制，完全是自定义的&lt;/strong&gt;，上面的阶段定义好后在 CI 中表现如下图&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/8c7gs.png&quot; alt=&quot;stages&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;task&quot;&gt;task&lt;/h5&gt;

&lt;p&gt;task 隶属于 stages 之下；也就是说一个阶段可以有多个任务，任务执行顺序默认不指定会并发执行；对于上面的 CI 配置来说 &lt;code class=&quot;highlighter-rouge&quot;&gt;auto-build&lt;/code&gt; 和 &lt;code class=&quot;highlighter-rouge&quot;&gt;deploy&lt;/code&gt; 都是 task，他们通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;stage: xxxx&lt;/code&gt; 这个标签来指定他们隶属于哪个 stage；当 Runner 使用 Docker 作为 build 提供者时，我们可以在 task 的 &lt;code class=&quot;highlighter-rouge&quot;&gt;image&lt;/code&gt; 标签下声明该 task 要使用哪个镜像运行，不指定则默认为 Runner 注册时的镜像(这里是 debian)；&lt;strong&gt;同时 task 还有一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;tags&lt;/code&gt; 的标签，该标签指明了这个任务将可以在哪些 Runner 上运行；这个标签可以从 Runner 页面看到，实际上就是 Runner 注册时输入的哪个 tag；对于某些特殊的项目，比如 IOS 项目，则必须在特定机器上执行，所以此时指定 tags 标签很有用&lt;/strong&gt;，当 task 运行后如下图所示&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/qzvlh.png&quot; alt=&quot;Task&quot; /&gt;&lt;/p&gt;

&lt;p&gt;除此之外 task 还能指定 &lt;code class=&quot;highlighter-rouge&quot;&gt;only&lt;/code&gt; 标签用于限定那些分支才能触发这个 task，如果分支名字不满足则不会触发；&lt;strong&gt;默认情况下，这些 task 都是自动执行的，如果感觉某些任务太过危险，则可以通过增加 &lt;code class=&quot;highlighter-rouge&quot;&gt;when: manual&lt;/code&gt; 改为手动执行；注意: 手动执行被 GitLab 认为是高权限的写操作，所以只有项目管理员才能手动运行一个 task，直白的说就是管理员才能点击&lt;/strong&gt;；手动执行如下图所示&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/vcjci.png&quot; alt=&quot;manual task&quot; /&gt;&lt;/p&gt;

&lt;h5 id=&quot;cache&quot;&gt;cache&lt;/h5&gt;

&lt;p&gt;cache 这个参数用于定义全局那些文件将被 cache；&lt;strong&gt;在 GitLab CI 中，跨 stage 是不能保存东西的；也就是说在第一步 build 的操作生成的 jar 包，到第二部打包 docker image 时就会被删除；GitLab 会保证每个 stage 中任务在执行时都将工作目录(Docker 容器 中)还原到跟 GitLab 代码仓库中一模一样，多余文件及变更都会被删除&lt;/strong&gt;；正常情况下，第一步 build 生成 jar 包应当立即推送到 nexus 私服；但是这里测试没有搭建，所以只能放到本地；但是放到本地下一个 task 就会删除它，所以利用 &lt;code class=&quot;highlighter-rouge&quot;&gt;cache&lt;/code&gt; 这个参数将 &lt;code class=&quot;highlighter-rouge&quot;&gt;build&lt;/code&gt; 目录 cache 住，保证其跨 stage 也能存在&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;关于 &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitlab-ci.yml&lt;/code&gt; 具体配置更完整的请参考 &lt;a href=&quot;https://docs.gitlab.com/ee/ci/yaml/&quot;&gt;官方文档&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;五其他相关&quot;&gt;五、其他相关&lt;/h3&gt;

&lt;h4 id=&quot;51gitlab-内置环境变量&quot;&gt;5.1、GitLab 内置环境变量&lt;/h4&gt;

&lt;p&gt;上面已经基本搞定了一个项目的 CI，但是有些变量可能并未说清楚；比如在创建的 &lt;code class=&quot;highlighter-rouge&quot;&gt;PROJECT_ENV&lt;/code&gt; 文件中引用了 &lt;code class=&quot;highlighter-rouge&quot;&gt;${CI_COMMIT_SHA}&lt;/code&gt; 变量；这种变量其实是 GitLab CI 的内置隐藏变量，这些变量在每次 CI 调用 Runner 运行某个任务时都会传递到对应的 Runner 的执行环境中；&lt;strong&gt;也就是说这些变量在每次的任务容器 SHELL 环境中都会存在，可以直接引用&lt;/strong&gt;，具体的完整环境变量列表可以从 &lt;a href=&quot;https://docs.gitlab.com/ee/ci/variables/&quot;&gt;官方文档&lt;/a&gt; 中获取；如果想知道环境变量具体的值，实际上可以通过在任务执行前用 &lt;code class=&quot;highlighter-rouge&quot;&gt;env&lt;/code&gt; 指令打印出来，如下所示&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/la9kn.png&quot; alt=&quot;env&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/0175j.png&quot; alt=&quot;env task&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;52gitlab-自定义环境变量&quot;&gt;5.2、GitLab 自定义环境变量&lt;/h4&gt;

&lt;p&gt;在某些情况下，我们希望 CI 能自动的发布或者修改一些东西；比如将 jar 包上传到 nexus、将 docker 镜像 push 到私服；这些动作往往需要一个高权限或者说有可写入对应仓库权限的账户来支持，但是这些账户又不想写到项目的 CI 配置里；因为这样很不安全，谁都能看到；此时我们可以将这些敏感变量写入到 GitLab 自定义环境变量中，GitLab 会像对待内置变量一样将其传送到 Runner 端，以供我们使用；GitLab 中自定义的环境变量可以有两种，一种是项目级别的，只能够在当前项目使用，如下&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/ennug.png&quot; alt=&quot;project env&quot; /&gt;&lt;/p&gt;

&lt;p&gt;另一种是组级别的，可以在整个组内的所有项目中使用，如下&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/si8ig.png&quot; alt=&quot;group env&quot; /&gt;&lt;/p&gt;

&lt;p&gt;这两种变量添加后都可以在 CI 的脚本中直接引用&lt;/p&gt;

&lt;h4 id=&quot;53kubernetes-集成&quot;&gt;5.3、Kubernetes 集成&lt;/h4&gt;

&lt;p&gt;对于 Kubernetes 集成实际上有两种方案，一种是对接 Kubernetes 的 api，纯代码实现；另一种取巧的方案是调用 kubectl 工具，用 kubectl 工具来实现滚动升级；这里采用后一种取巧的方式，将 kubectl 二进制文件封装到镜像中，然后在 deploy 阶段使用这个镜像直接部署就可以&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/bu17r.png&quot; alt=&quot;kubectl&quot; /&gt;&lt;/p&gt;

&lt;p&gt;其中 &lt;code class=&quot;highlighter-rouge&quot;&gt;mritd/docker-kubectl:v1.7.4&lt;/code&gt; 这个镜像的 Dockerfile 如下&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM docker:dind 

LABEL &lt;span class=&quot;nv&quot;&gt;maintainer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;mritd &amp;lt;mritd1234@gmail.com&amp;gt;&quot;&lt;/span&gt;

ARG &lt;span class=&quot;nv&quot;&gt;TZ&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Asia/Shanghai&quot;&lt;/span&gt;

ENV TZ &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TZ&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;

ENV KUBE_VERSION v1.8.0

RUN apk upgrade &lt;span class=&quot;nt&quot;&gt;--update&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apk add bash tzdata wget ca-certificates &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; wget https://storage.googleapis.com/kubernetes-release/release/&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;KUBE_VERSION&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;/bin/linux/amd64/kubectl &lt;span class=&quot;nt&quot;&gt;-O&lt;/span&gt; /usr/local/bin/kubectl &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; chmod +x /usr/local/bin/kubectl &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; ln &lt;span class=&quot;nt&quot;&gt;-sf&lt;/span&gt; /usr/share/zoneinfo/&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TZ&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; /etc/localtime &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TZ&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /etc/timezone &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; rm &lt;span class=&quot;nt&quot;&gt;-rf&lt;/span&gt; /var/cache/apk/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;

CMD &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/bin/bash&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这里面的 &lt;code class=&quot;highlighter-rouge&quot;&gt;${KUBE_CONFIG}&lt;/code&gt; 是一个自定义的环境变量，对于测试环境我将配置文件直接挂载入了容器中，然后 &lt;code class=&quot;highlighter-rouge&quot;&gt;${KUBE_CONFIG}&lt;/code&gt; 只是指定了一个配置文件位置，实际生产环境中可以选择将配置文件变成自定义环境变量使用&lt;/p&gt;

&lt;h4 id=&quot;54gitlab-ci-总结&quot;&gt;5.4、GitLab CI 总结&lt;/h4&gt;

&lt;p&gt;关于 GitLab CI 上面已经讲了很多，但是并不全面，也不算太细致；因为这东西说起来实际太多了，现在目测已经 1W 多字了；以下总结一下 GitLab CI 的总体思想，当思路清晰了以后，我想后面的只是查查文档自己试一试就行了&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CS 架构&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;GitLab 作为 Server 端，控制 Runner 端执行一系列的 CI 任务；代码 clone 等无需关心，GitLab 会自动处理好一切；Runner 每次都会启动新的容器执行 CI 任务&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;容器即环境&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在 Runner 使用 Docker build 的前提下；&lt;strong&gt;所有依赖切换、环境切换应当由切换不同镜像实现，即 build 那就使用 build 的镜像，deploy 就用带有 deploy 功能的镜像；通过不同镜像容器实现完整的环境隔离&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;CI即脚本&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;不同的 CI 任务实际上就是在使用不同镜像的容器中执行 SHELL 命令，自动化 CI 就是执行预先写好的一些小脚本&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;敏感信息走环境变量&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;一切重要的敏感信息，如账户密码等，不要写到 CI 配置中，直接放到 GitLab 的环境变量中；GitLab 会保证将其推送到远端 Runner 的 SHELL 变量中&lt;/p&gt;

&lt;p&gt;转载请注明出处，本文采用 &lt;a href=&quot;http://creativecommons.org/licenses/by-nc-nd/4.0/&quot;&gt;CC4.0&lt;/a&gt; 协议授权&lt;/p&gt;</content><author><name>漠然</name></author><summary type="html">接着上篇文章整理，这篇文章主要介绍一下 GitLab CI 相关功能，并通过 GitLab CI 实现自动化构建项目；项目中所用的示例项目已经上传到了 GitHub</summary></entry><entry><title type="html">ohmydocker 镜像加速</title><link href="https://mritd.me/2017/11/14/ohmydocker/" rel="alternate" type="text/html" title="ohmydocker 镜像加速" /><published>2017-11-14T14:43:30+08:00</published><updated>2017-11-14T14:43:30+08:00</updated><id>https://mritd.me/2017/11/14/ohmydocker</id><content type="html" xml:base="https://mritd.me/2017/11/14/ohmydocker/">&lt;blockquote&gt;
  &lt;p&gt;国外一直有台服务器闲置，准备用来做 Docker 镜像下载加速，写了个小工具打成了镜像放了出来 😀&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ohmydocker 镜像基于 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker:dind&lt;/code&gt;，也就是所谓的 &lt;strong&gt;Dcoker in Docker&lt;/strong&gt; 俄罗斯套娃镜像，使用方法如下:&lt;/p&gt;

&lt;h4 id=&quot;1启动镜像&quot;&gt;1、启动镜像&lt;/h4&gt;

&lt;p&gt;镜像启动后相当于镜像里运行了一个 Docker daemon 进程，&lt;strong&gt;Docker in Docker 需要使用 privileged 启动，如果觉得不安全请不要使用本镜像(拒绝喷子)&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker run &lt;span class=&quot;nt&quot;&gt;--privileged&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; ohmydocker &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 1028:1028 mritd/ohmydocker
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;2拉取镜像&quot;&gt;2、拉取镜像&lt;/h4&gt;

&lt;p&gt;ohmydocker 启动后将会暴露一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;1028&lt;/code&gt; 的 docker api 端口(tcp)，此时直接通过该端口连接容器内的 Docker daemon 进行 pull 镜像即可&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; LOCAL_IP:1028 pull gcr.io/google_containers/kubernetes-dashboard-init-amd64:v1.0.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;镜像 pull 完成后会保存在容器里，并不会直接保存到宿主机，所以还要 save 出来&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; LOCAL_IP:1028 save gcr.io/google_containers/kubernetes-dashboard-init-amd64:v1.0.1 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; kubernetes-dashboard-init-amd64.tar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;镜像 save 成 tar 文件后复制到其他主机进行 load 即可&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;如果你感觉该镜像对你有所帮助，欢迎请我喝杯咖啡&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/zhifubao.png&quot; alt=&quot;支付宝&quot; /&gt;&lt;/p&gt;

&lt;p&gt;转载请注明出处，本文采用 &lt;a href=&quot;http://creativecommons.org/licenses/by-nc-nd/4.0/&quot;&gt;CC4.0&lt;/a&gt; 协议授权&lt;/p&gt;</content><author><name>漠然</name></author><summary type="html">国外一直有台服务器闲置，准备用来做 Docker 镜像下载加速，写了个小工具打成了镜像放了出来 😀</summary></entry><entry><title type="html">CI/CD 之 Dockerfile</title><link href="https://mritd.me/2017/11/12/ci-cd-dockerfile/" rel="alternate" type="text/html" title="CI/CD 之 Dockerfile" /><published>2017-11-12T22:46:53+08:00</published><updated>2017-11-12T22:46:53+08:00</updated><id>https://mritd.me/2017/11/12/ci-cd-dockerfile</id><content type="html" xml:base="https://mritd.me/2017/11/12/ci-cd-dockerfile/">&lt;blockquote&gt;
  &lt;p&gt;最近准备整理一下关于 CI/CD 的相关文档，写一个关于 CI/CD 的系列文章，这篇先从最基本的 Dockerfile 书写开始，本系列文章默认读者已经熟悉 Docker、Kubernetes 相关工具&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;一基础镜像选择&quot;&gt;一、基础镜像选择&lt;/h3&gt;

&lt;p&gt;这里的基础镜像指的是实际项目运行时的基础环境镜像，比如 Java 的 JDK 基础镜像、Nodejs 的基础镜像等；在制作项目的基础镜像时，我个人认为应当考虑一下几点因素:&lt;/p&gt;

&lt;h4 id=&quot;11可维护性&quot;&gt;1.1、可维护性&lt;/h4&gt;

&lt;p&gt;可维护性应当放在首要位置，如果在制作基础镜像时，选择了一个你根本不熟悉的基础镜像，或者说你完全不知道这个基础镜像里有哪些环境变量、Entrypoint 脚本做了什么时，请果断放弃这个基础镜像，选择一个你自己更加熟悉的基础镜像，不要为以后挖坑；还有就是如果对应的应用已经有官方镜像，那么尽量采用官方的，因为你可以省去维护 &lt;strong&gt;自己造的轮子&lt;/strong&gt; 的精力，&lt;strong&gt;除非你对基础镜像制作已经得心应手，否则请不要造轮子&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;12稳定性&quot;&gt;1.2、稳定性&lt;/h4&gt;

&lt;p&gt;基础镜像稳定性实际上是个很微妙的话题，因为普遍来说成熟的 Linux 发行版都很稳定；但是对于不同发行版镜像之间还是存在差异的，比如 alpine 的镜像用的是 musl libc，而 debian 用的是 glibc，某些依赖 glibc 的程序可能无法在 alpine 上工作；alpine 版本的 nginx 能使用 http2，debian 版本 nginx 则不行，因为 openssl 版本不同；甚至在相同发行版不同版本之间也会有差异，譬如 openjdk alpine 3.6 版本 java 某些图形库无法工作，在 alpine edge 上安装最新的 openjdk 却没问题等；所以稳定性这个话题对于基础镜像自己来说，他永远稳定，但是对于你的应用来说，则不同基础镜像会产生不同的稳定性；&lt;strong&gt;最后，如果你完全熟悉你的应用，甚至应用层代码也是你写的，那么你可以根据你的习惯和喜好去选择基础镜像，因为你能把控应用运行时依赖；否则的话，请尽量选择 debian 这种比较成熟的发行版作为基础镜像，因为它在普遍上兼容性更好一点；还有尽量不要使用 CentOS 作为基础镜像，因为他的体积将会成为大规模网络分发瓶颈&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;13易用性&quot;&gt;1.3、易用性&lt;/h4&gt;

&lt;p&gt;易用性简单地说就是是否可调试，因为有些极端情况下，并不是应用只要运行起来就没事了；可能出现一些很棘手的问题需要你进入容器进行调试，此时你的镜像易用性就会体现出来；譬如一个 Java 项目你的基础镜像是 JRE，那么 JDK 的调试工具将完全不可用，还有就是如果你的基础镜像选择了 alpine，那么它默认没有 bash，可能你的脚本无法在里面工作；&lt;strong&gt;所有在选择基础镜像的时候最好也考虑一下未来极端情况的可调试性&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;二格式化及注意事项&quot;&gt;二、格式化及注意事项&lt;/h3&gt;

&lt;h4 id=&quot;21书写格式&quot;&gt;2.1、书写格式&lt;/h4&gt;

&lt;p&gt;Dockerfile 类似一堆 shell 命令的堆砌，实际上在构建阶段也可以简单的看做是一个 shell 脚本；但是为了更高效的利用缓存层，通常都会在一个 RUN 命令中连续书写大量的脚本命令，这时候一个良好的书写格式可以使 Dockerfile 看起来更加清晰易懂，也方便以后维护；我个人比较推崇的格式是按照 &lt;a href=&quot;https://github.com/nginxinc/docker-nginx/blob/master/mainline/alpine/Dockerfile&quot;&gt;nginx-alpine官方 Dockerfile&lt;/a&gt; 的样式来书写，这个 Dockerfile 大致包括了以下规则:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;换行以 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;amp;&amp;amp;&lt;/code&gt; 开头保持每行对齐，看起来干净又舒服&lt;/li&gt;
  &lt;li&gt;安装大量软件包时，每个包一行并添加换行符，虽然会造成很多行，但是看起来很清晰；也可根据实际需要增加每行软件包个数，但是建议不要超过 5 个&lt;/li&gt;
  &lt;li&gt;configure 的配置尽量放在统一的变量里，并做好合理换行，方便以后集中化修改&lt;/li&gt;
  &lt;li&gt;注释同样和对应命令对齐，并保持单行长度不超出视野，即不能造成拉动滚动条才能看完你的注释&lt;/li&gt;
  &lt;li&gt;alpine 作为基础镜像的话，必要时可以使用 scanelf 来减少安装依赖&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;除了以上规则，说下我个人的一些小习惯，仅供参考:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;当需要编译时，尽量避免多次 &lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt; 目录，必须进入目录编译时可以开启子 shell 使其完成后还停留但在当前目录，避免 &lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt; 进去再 &lt;code class=&quot;highlighter-rouge&quot;&gt;cd&lt;/code&gt; 回来，如&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;xxxx &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; ./configure &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; make &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; make install &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ../
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;可以变为&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;xxx &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; ./configure &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; make &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; make install&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;同样意义的操作统一放在相邻行处理，比如镜像需要安装两个软件，做两次 &lt;code class=&quot;highlighter-rouge&quot;&gt;wget&lt;/code&gt;，那么没必要安装完一个删除一个安装包，可以在最后统一的进行清理动作，简而言之是 &lt;strong&gt;合并具有相同目的的命令&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;尽量使用网络资源，也就是说尽量不要在当前目录下放置那种二进制文件，然后进行 &lt;code class=&quot;highlighter-rouge&quot;&gt;ADD&lt;/code&gt;/&lt;code class=&quot;highlighter-rouge&quot;&gt;COPY&lt;/code&gt; 操作，因为一般 Dockerfile 都是存放到 git 仓库的，同目录下的二进制变动会给 git 仓库带来很大负担&lt;/li&gt;
  &lt;li&gt;调整好镜像时区，最好内置一下 bash，可能以后临时进入容器会处理一些东西&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;FROM&lt;/code&gt; 时指定具体的版本号，防止后续升级或者更换主机 build 造成不可预知的结果&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;22合理利用缓存&quot;&gt;2.2、合理利用缓存&lt;/h4&gt;

&lt;p&gt;Docker 在 build 或者说是拉取镜像时是以层为单位作为缓存的；通俗的讲，一个 Dockerfile 命令就会形成一个镜像层(不绝对)，尤其是 &lt;code class=&quot;highlighter-rouge&quot;&gt;RUN&lt;/code&gt; 命令形成的镜像层可能会很大；此时应当合理组织 Dockerfile，以便每次拉取或者 build 时高效的利用缓存层&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;重复 build 的缓存利用&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Docker 在进行 build 操作时，对于同一个 Dockerfile 来说，&lt;strong&gt;只要执行过一次 build，那么下次 build 将从命令更改处开始&lt;/strong&gt;；简单的例子如下&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM alpine:3.6

COPY test.jar /test.jar

RUN apk add openjdk8 &lt;span class=&quot;nt&quot;&gt;--no-cache&lt;/span&gt;

CMD &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;java&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;-jar&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;/test.tar&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;假设我们的项目发布物为 &lt;code class=&quot;highlighter-rouge&quot;&gt;test.jar&lt;/code&gt;，那么以上 Dockerfile 放到 CI 里每次 build 都会相当慢，原因就是 &lt;strong&gt;每次更改的发布物为 &lt;code class=&quot;highlighter-rouge&quot;&gt;test.jar&lt;/code&gt;，那么也就是相当于每次 build 失效位置从 &lt;code class=&quot;highlighter-rouge&quot;&gt;COPY&lt;/code&gt; 命令开始，这将导致下面的 &lt;code class=&quot;highlighter-rouge&quot;&gt;RUN&lt;/code&gt; 命令每次都会不走缓存重复执行，当 &lt;code class=&quot;highlighter-rouge&quot;&gt;RUN&lt;/code&gt; 命令涉及网络下载等复杂动作时这会极大拖慢 build 进度&lt;/strong&gt;，解决方案很简单，移动一下 &lt;code class=&quot;highlighter-rouge&quot;&gt;COPY&lt;/code&gt; 命令即可&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM alpine:3.6

RUN apk add openjdk8 &lt;span class=&quot;nt&quot;&gt;--no-cache&lt;/span&gt;

COPY test.jar /test.jar

CMD &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;java&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;-jar&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;/test.tar&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;此时每次 build 失效位置仍然是 &lt;code class=&quot;highlighter-rouge&quot;&gt;COPY&lt;/code&gt; 命令，但是上面的 &lt;code class=&quot;highlighter-rouge&quot;&gt;RUN&lt;/code&gt; 命令层已经被 build 过，而且无任何改变，那么每次 build 时 &lt;code class=&quot;highlighter-rouge&quot;&gt;RUN&lt;/code&gt; 命令都会命中缓存层从而秒过&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;多次拉取的缓存利用&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;同上面的 build 一个原理，在 Docker 进行 pull 操作时，也是按照镜像层来进行缓存；当项目进行更新版本，那么只要当前主机 pull 过一次上一个版本的项目，那么下一次将会直接 pull 变更的层，也就是说上面安装 openjdk 的层将会复用；这种情况为了看起来清晰一点也可以将 Dockerfile 拆分成两个&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;OpenJDK8 base&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM alpine:3.6

RUN RUN apk add openjdk8 &lt;span class=&quot;nt&quot;&gt;--no-cache&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Java Web image&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM xxx.com/base/openjdk8

COPY test.jar /test.jar

CMD &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;java&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;-jar&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;/test.tar&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;三镜像安全&quot;&gt;三、镜像安全&lt;/h3&gt;

&lt;h4 id=&quot;31用户切换&quot;&gt;3.1、用户切换&lt;/h4&gt;

&lt;p&gt;当我们不在 Dockerfile 中指定内部用户时，那么默认以 root 用户运行；由于 Linux 系统权限判定是根据 UID、GID 来进行的，也就是说 &lt;strong&gt;容器里面的 root 用户有权限访问宿主机 root 用户的东西；所以一旦挂载错误(比如将 &lt;code class=&quot;highlighter-rouge&quot;&gt;/root/.ssh&lt;/code&gt; 目录挂载进去)，并且里面的用户具有高权限那么就很危险&lt;/strong&gt;；通常习惯是遵从最小权限原则，也就是说尽量保证容器里的程序以低权限运行，此时可以在 Dockerfile 中通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;USER&lt;/code&gt; 命令指定后续运行命令所使用的账户，通过 &lt;code class=&quot;highlighter-rouge&quot;&gt;WORKDIR&lt;/code&gt; 指定后续命令在那个目录下执行&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM alpine:3.6

RUN apk add openjdk8 &lt;span class=&quot;nt&quot;&gt;--no-cache&lt;/span&gt;

COPY test.jar /test.jar

USER testuser:testuser

WORKDIR /tmp

CMD &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;java&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;-jar&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;/test.tar&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;有时直接使用 &lt;code class=&quot;highlighter-rouge&quot;&gt;USER&lt;/code&gt; 指令来切换用户并不算方便，比如你的镜像需要挂载外部存储，如果外部存储中文件权限被意外修改，你的程序接下来可能就会启动失败；此时可以使用一下两个小工具来动态切换用户，巧妙的做法是 &lt;strong&gt;在正式运行程序之前先使用 root 用户进行权限修复，然后使用以下工具切换到具体用户运行&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/tianon/gosu&quot;&gt;gosu&lt;/a&gt; Golang 实现的一个切换用户身份执行其他程序的小工具&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/hlovdal/su-exec&quot;&gt;su-exec&lt;/a&gt; C 实现的一个更轻量级的用户切换工具&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;具体的 Dockerfile 可以参见我写的 elasticsearch 的 &lt;a href=&quot;https://github.com/mritd/dockerfile/blob/master/elasticsearch/docker-entrypoint.sh&quot;&gt;entrypoint 脚本&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;32容器运行时&quot;&gt;3.2、容器运行时&lt;/h4&gt;

&lt;p&gt;并不是每个容器都一定能切换到低权限用户来运行的，可能某些程序就希望在 root 下运行，此时一定要确认好容器是否需要 &lt;strong&gt;特权模式&lt;/strong&gt; 运行；因为一旦开启了特权模式运行的容器将有能力修改宿主机内核参数等重要设置；具体的 Docker 容器运行设置前请参考 &lt;a href=&quot;https://docs.docker.com/engine/reference/run/#runtime-privilege-and-linux-capabilities&quot;&gt;官方文档&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;关于 Dockerfile 方面暂时总结出这些，可能也会有遗漏，待后续补充吧；同时欢迎各位提出相关修改意见 😊&lt;/p&gt;

&lt;p&gt;转载请注明出处，本文采用 &lt;a href=&quot;http://creativecommons.org/licenses/by-nc-nd/4.0/&quot;&gt;CC4.0&lt;/a&gt; 协议授权&lt;/p&gt;</content><author><name>漠然</name></author><summary type="html">最近准备整理一下关于 CI/CD 的相关文档，写一个关于 CI/CD 的系列文章，这篇先从最基本的 Dockerfile 书写开始，本系列文章默认读者已经熟悉 Docker、Kubernetes 相关工具</summary></entry><entry><title type="html">Teleport 跳板机部署</title><link href="https://mritd.me/2017/11/09/set-up-teleport/" rel="alternate" type="text/html" title="Teleport 跳板机部署" /><published>2017-11-09T16:47:51+08:00</published><updated>2017-11-09T16:47:51+08:00</updated><id>https://mritd.me/2017/11/09/set-up-teleport</id><content type="html" xml:base="https://mritd.me/2017/11/09/set-up-teleport/">&lt;blockquote&gt;
  &lt;p&gt;由于业务需求，以前账号管理混乱，所以很多人有生产服务器的 root 权限；所以目前需要一个能 ssh 登录线上服务器的工具，同时具有简单的审计功能；找了好久找到了这个小工具，以下记录一下搭建教程&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;一环境准备&quot;&gt;一、环境准备&lt;/h3&gt;

&lt;p&gt;目前准备了 3 台虚拟机，两台位于内网 NAT 之后，一台位于公网可以直接链接；使用时客户端通过工具连接到公网跳板机上，然后实现自动跳转到内网任意主机；并且具有相应的操作回放审计，通过宿主机账户限制用户权限&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;ip&lt;/th&gt;
      &lt;th&gt;节点&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;92.223.67.84&lt;/td&gt;
      &lt;td&gt;公网 Master&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;172.16.0.80&lt;/td&gt;
      &lt;td&gt;内网 Master&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;172.16.0.81&lt;/td&gt;
      &lt;td&gt;内网 Node&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;二teleport-工作模式&quot;&gt;二、Teleport 工作模式&lt;/h3&gt;

&lt;p&gt;Teleport 工作时从宏观上看是以集群为单位，也就是说&lt;strong&gt;公网算作一个集群，内网算作另一个集群，内网集群通过 ssh 隧道保持跟公网的链接状态，同时内网机群允许公网集群用户连接&lt;/strong&gt;，大体工作模式如下&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/hsnj8.png&quot; alt=&quot;Teleport 工作模式&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;三搭建公网-master&quot;&gt;三、搭建公网 Master&lt;/h3&gt;

&lt;h4 id=&quot;31配置-systemd&quot;&gt;3.1、配置 Systemd&lt;/h4&gt;

&lt;p&gt;首先下载相关可执行文件并复制到 Path 目录下，然后创建一下配置目录等&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget https://github.com/gravitational/teleport/releases/download/v2.3.5/teleport-v2.3.5-linux-amd64-bin.tar.gz
&lt;span class=&quot;nb&quot;&gt;tar&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-zxvf&lt;/span&gt; teleport-v2.3.5-linux-amd64-bin.tar.gz
mv teleport/tctl teleport/teleport teleport/tsh /usr/local/bin
mkdir &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; /etc/teleport /data/teleport
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后为了让服务后台运行创建一个 systemd service 配置文件&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /etc/systemd/system/teleport.service &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
[Unit]
Description=Teleport SSH Service
After=network.target

[Service]
Type=simple
Restart=always
ExecStart=/usr/local/bin/teleport start -c /etc/teleport/teleport.yaml

[Install]
WantedBy=multi-user.target
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;32配置-teleport&quot;&gt;3.2、配置 Teleport&lt;/h4&gt;

&lt;p&gt;Systemd 配置完成后，就需要写一个 Teleport 的配置文件来让 Teleport 启动，具体选项含义可以参考 &lt;a href=&quot;https://gravitational.com/teleport/docs/2.3/admin-guide/&quot;&gt;官方文档&lt;/a&gt;；以下为我的配置样例&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# By default, this file should be stored in /etc/teleport.yaml&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# This section of the configuration file applies to all teleport&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# services.&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;teleport&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# nodename allows to assign an alternative name this node can be reached by.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# by default it's equal to hostname&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;nodename&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mritd.master&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Data directory where Teleport keeps its data, like keys/users for&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# authentication (if using the default BoltDB back-end)&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;data_dir&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/data/teleport&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# one-time invitation token used to join a cluster. it is not used on&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# subsequent starts&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;auth_token&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;jYektagNTmhjv9Dh&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# when running in multi-homed or NATed environments Teleport nodes need&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# to know which IP it will be reachable at by other nodes&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;advertise_ip&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;92.223.67.84&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# list of auth servers in a cluster. you will have more than one auth server&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# if you configure teleport auth to run in HA configuration&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;auth_servers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;0.0.0.0:3025&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;0.0.0.0:3025&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Teleport throttles all connections to avoid abuse. These settings allow&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# you to adjust the default limits&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;connection_limits&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;max_connections&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;1000&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;max_users&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;250&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Logging configuration. Possible output values are 'stdout', 'stderr' and&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 'syslog'. Possible severity values are INFO, WARN and ERROR (default).&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;stdout&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;severity&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;INFO&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Type of storage used for keys. You need to configure this to use etcd&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# backend if you want to run Teleport in HA configuration.&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bolt&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Cipher algorithms that the server supports. This section only needs to be&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# set if you want to override the defaults.&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ciphers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;aes128-ctr&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;aes192-ctr&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;aes256-ctr&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;aes128-gcm@openssh.com&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;arcfour256&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;arcfour128&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Key exchange algorithms that the server supports. This section only needs&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# to be set if you want to override the defaults.&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;kex_algos&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;curve25519-sha256@libssh.org&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ecdh-sha2-nistp256&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ecdh-sha2-nistp384&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ecdh-sha2-nistp521&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;diffie-hellman-group14-sha1&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;diffie-hellman-group1-sha1&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Message authentication code (MAC) algorithms that the server supports.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# This section only needs to be set if you want to override the defaults.&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;mac_algos&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;hmac-sha2-256-etm@openssh.com&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;hmac-sha2-256&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;hmac-sha1&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;hmac-sha1-96&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# This section configures the 'auth service':&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;auth_service&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Turns 'auth' role on. Default is 'yes'&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;enabled&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;yes&lt;/span&gt;

    &lt;span class=&quot;na&quot;&gt;authentication&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# default authentication type. possible values are 'local', 'oidc' and 'saml'&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# only local authentication (Teleport's own user DB) is supported in the open&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# source version&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;local&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# second_factor can be off, otp, or u2f&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;second_factor&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;otp&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# this section is used if second_factor is set to 'u2f'&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#u2f:&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#    # app_id must point to the URL of the Teleport Web UI (proxy) accessible&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#    # by the end users&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#    app_id: https://localhost:3080&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#    # facets must list all proxy servers if there are more than one deployed&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#    facets:&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#    - https://localhost:3080&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# IP and the port to bind to. Other Teleport nodes will be connecting to&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# this port (AKA &quot;Auth API&quot; or &quot;Cluster API&quot;) to validate client&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# certificates&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;listen_addr&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;0.0.0.0:3025&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Pre-defined tokens for adding new nodes to a cluster. Each token specifies&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# the role a new node will be allowed to assume. The more secure way to&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# add nodes is to use `ttl node add --ttl` command to generate auto-expiring&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# tokens.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# We recommend to use tools like `pwgen` to generate sufficiently random&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# tokens of 32+ byte length.&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;tokens&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;proxy,node:jYektagNTmhjv9Dh&quot;&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;auth:jYektagNTmhjv9Dh&quot;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Optional &quot;cluster name&quot; is needed when configuring trust between multiple&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# auth servers. A cluster name is used as part of a signature in certificates&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# generated by this CA.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# By default an automatically generated GUID is used.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# IMPORTANT: if you change cluster_name, it will invalidate all generated&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# certificates and keys (may need to wipe out /var/lib/teleport directory)&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;cluster_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;mritd&quot;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# This section configures the 'node service':&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;ssh_service&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Turns 'ssh' role on. Default is 'yes'&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;enabled&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;yes&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# IP and the port for SSH service to bind to.&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;listen_addr&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;0.0.0.0:3022&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# See explanation of labels in &quot;Labeling Nodes&quot; section below&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;role&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;master&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# List of the commands to periodically execute. Their output will be used as node labels.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# See &quot;Labeling Nodes&quot; section below for more information.&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;commands&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;arch&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;# this command will add a label like 'arch=x86_64' to a node&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;uname&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;-p&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;period&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;1h0m0s&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# enables reading ~/.tsh/environment before creating a session. by default&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# set to false, can be set true here or as a command line flag.&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;permit_user_env&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# This section configures the 'proxy servie'&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;proxy_service&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Turns 'proxy' role on. Default is 'yes'&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;enabled&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;yes&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# SSH forwarding/proxy address. Command line (CLI) clients always begin their&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# SSH sessions by connecting to this port&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;listen_addr&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;0.0.0.0:3023&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Reverse tunnel listening address. An auth server (CA) can establish an&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# outbound (from behind the firewall) connection to this address.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# This will allow users of the outside CA to connect to behind-the-firewall&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# nodes.&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;tunnel_listen_addr&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;0.0.0.0:3024&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# The HTTPS listen address to serve the Web UI and also to authenticate the&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# command line (CLI) users via password+HOTP&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;web_listen_addr&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;0.0.0.0:3080&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# TLS certificate for the HTTPS connection. Configuring these properly is&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# critical for Teleport security.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#https_key_file: /var/lib/teleport/webproxy_key.pem&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#https_cert_file: /var/lib/teleport/webproxy_cert.pem&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后启动 Teleport 即可&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;teleport
systemctl start teleport
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果启动出现如下错误&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;error: Could not load host key: /etc/ssh/ssh_host_ecdsa_key
error: Could not load host key: /etc/ssh/ssh_host_ed25519_key
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;请执行 ssh-keygen 命令自行生成相关秘钥&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh-keygen &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; ecdsa &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; /etc/ssh/ssh_host_ecdsa_key
ssh-keygen &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; ed25519 &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; /etc/ssh/ssh_host_ed25519_key
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;33添加用户&quot;&gt;3.3、添加用户&lt;/h4&gt;

&lt;p&gt;公网这台 Teleport 将会作为主要的接入机器，所以在此节点内添加的用户将有权限登录所有集群，包括内网的另一个集群；所以为了方便以后操作先添加一个用户&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 添加一个用户名为 mritd 的用户，该用户在所有集群具有 root 用户权限&lt;/span&gt;
tctl &lt;span class=&quot;nt&quot;&gt;--config&lt;/span&gt; /etc/teleport/teleport.yaml users add mritd root
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;添加成功后会返回一个 OTP 认证初始化地址，浏览器访问后可以使用 Google 扫描 OTP 二维码从而在登录时增加一层 OTP 认证&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/chuyf.png&quot; alt=&quot;OTP CMD&quot; /&gt;&lt;/p&gt;

&lt;p&gt;访问该地址后初始化密码及 OTP&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/czwmd.png&quot; alt=&quot;init OTP&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;四搭建内网-master&quot;&gt;四、搭建内网 Master&lt;/h3&gt;

&lt;p&gt;内网搭建 Master 和公网类似，只不过为了安全将所有 &lt;code class=&quot;highlighter-rouge&quot;&gt;0.0.0.0&lt;/code&gt; 的地址全部换成内网 IP 即可，以下为内网的配置信息&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# By default, this file should be stored in /etc/teleport.yaml&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# This section of the configuration file applies to all teleport&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# services.&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;teleport&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# nodename allows to assign an alternative name this node can be reached by.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# by default it's equal to hostname&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;nodename&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;mritd.test1&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Data directory where Teleport keeps its data, like keys/users for&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# authentication (if using the default BoltDB back-end)&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;data_dir&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/data/teleport&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# one-time invitation token used to join a cluster. it is not used on&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# subsequent starts&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;auth_token&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;jYektagNTmhjv9Dh&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# when running in multi-homed or NATed environments Teleport nodes need&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# to know which IP it will be reachable at by other nodes&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;advertise_ip&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;172.16.0.80&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# list of auth servers in a cluster. you will have more than one auth server&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# if you configure teleport auth to run in HA configuration&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;auth_servers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;172.16.0.80:3025&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Teleport throttles all connections to avoid abuse. These settings allow&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# you to adjust the default limits&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;connection_limits&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;max_connections&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;1000&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;max_users&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;250&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Logging configuration. Possible output values are 'stdout', 'stderr' and&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# 'syslog'. Possible severity values are INFO, WARN and ERROR (default).&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;stdout&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;severity&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;INFO&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Type of storage used for keys. You need to configure this to use etcd&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# backend if you want to run Teleport in HA configuration.&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;storage&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bolt&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Cipher algorithms that the server supports. This section only needs to be&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# set if you want to override the defaults. &lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;ciphers&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;aes128-ctr&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;aes192-ctr&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;aes256-ctr&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;aes128-gcm@openssh.com&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;arcfour256&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;arcfour128&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Key exchange algorithms that the server supports. This section only needs&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# to be set if you want to override the defaults.&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;kex_algos&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;curve25519-sha256@libssh.org&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ecdh-sha2-nistp256&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ecdh-sha2-nistp384&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ecdh-sha2-nistp521&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;diffie-hellman-group14-sha1&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;diffie-hellman-group1-sha1&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Message authentication code (MAC) algorithms that the server supports.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# This section only needs to be set if you want to override the defaults.&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;mac_algos&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;hmac-sha2-256-etm@openssh.com&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;hmac-sha2-256&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;hmac-sha1&lt;/span&gt;
      &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;hmac-sha1-96&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# This section configures the 'auth service':&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;auth_service&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Turns 'auth' role on. Default is 'yes'&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;enabled&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;yes&lt;/span&gt;

    &lt;span class=&quot;na&quot;&gt;authentication&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# default authentication type. possible values are 'local', 'oidc' and 'saml'&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# only local authentication (Teleport's own user DB) is supported in the open&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# source version&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;local&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# second_factor can be off, otp, or u2f&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;second_factor&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;otp&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# this section is used if second_factor is set to 'u2f'&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#u2f:&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#    # app_id must point to the URL of the Teleport Web UI (proxy) accessible&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#    # by the end users&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#    app_id: https://localhost:3080&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#    # facets must list all proxy servers if there are more than one deployed&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#    facets:&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#    - https://localhost:3080&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# IP and the port to bind to. Other Teleport nodes will be connecting to&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# this port (AKA &quot;Auth API&quot; or &quot;Cluster API&quot;) to validate client&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# certificates&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;listen_addr&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;172.16.0.80:3025&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Pre-defined tokens for adding new nodes to a cluster. Each token specifies&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# the role a new node will be allowed to assume. The more secure way to&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# add nodes is to use `ttl node add --ttl` command to generate auto-expiring&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# tokens.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# We recommend to use tools like `pwgen` to generate sufficiently random&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# tokens of 32+ byte length.&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;tokens&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;proxy,node:jYektagNTmhjv9Dh&quot;&lt;/span&gt;
        &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;auth:jYektagNTmhjv9Dh&quot;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Optional &quot;cluster name&quot; is needed when configuring trust between multiple&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# auth servers. A cluster name is used as part of a signature in certificates&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# generated by this CA.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# By default an automatically generated GUID is used.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# IMPORTANT: if you change cluster_name, it will invalidate all generated&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# certificates and keys (may need to wipe out /var/lib/teleport directory)&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;cluster_name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;nat&quot;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# This section configures the 'node service':&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;ssh_service&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Turns 'ssh' role on. Default is 'yes'&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;enabled&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;yes&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# IP and the port for SSH service to bind to.&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;listen_addr&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;172.16.0.80:3022&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# See explanation of labels in &quot;Labeling Nodes&quot; section below&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;na&quot;&gt;role&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;master&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# List of the commands to periodically execute. Their output will be used as node labels.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# See &quot;Labeling Nodes&quot; section below for more information.&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;commands&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;arch&lt;/span&gt;             &lt;span class=&quot;c1&quot;&gt;# this command will add a label like 'arch=x86_64' to a node&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;command&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;uname&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;-p&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
      &lt;span class=&quot;na&quot;&gt;period&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;1h0m0s&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# enables reading ~/.tsh/environment before creating a session. by default&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# set to false, can be set true here or as a command line flag.&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;permit_user_env&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;false&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# This section configures the 'proxy servie'&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;proxy_service&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Turns 'proxy' role on. Default is 'yes'&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;enabled&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;yes&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# SSH forwarding/proxy address. Command line (CLI) clients always begin their&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# SSH sessions by connecting to this port&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;listen_addr&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;172.16.0.80:3023&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Reverse tunnel listening address. An auth server (CA) can establish an&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# outbound (from behind the firewall) connection to this address.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# This will allow users of the outside CA to connect to behind-the-firewall&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# nodes.&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;tunnel_listen_addr&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;172.16.0.80:3024&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# The HTTPS listen address to serve the Web UI and also to authenticate the&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# command line (CLI) users via password+HOTP&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;web_listen_addr&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;172.16.0.80:3080&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# TLS certificate for the HTTPS connection. Configuring these properly is&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# critical for Teleport security.&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#https_key_file: /var/lib/teleport/webproxy_key.pem&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#https_cert_file: /var/lib/teleport/webproxy_cert.pem&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;配置完成后直接启动即可&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;teleport
systemctl start teleport
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;五将内网集群链接至公网&quot;&gt;五、将内网集群链接至公网&lt;/h3&gt;

&lt;p&gt;上文已经讲过，Teleport 通过公网链接内网主机的方式是让内网集群向公网打通一条 ssh 隧道，然后再进行通讯；具体配置如下&lt;/p&gt;

&lt;h4 id=&quot;51公网-master-开启授信集群&quot;&gt;5.1、公网 Master 开启授信集群&lt;/h4&gt;

&lt;p&gt;在公网 Master 增加 Token 配置，以允许持有该 Token 的其他内网集群连接到此，修改 &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/teleport/teleport.yaml&lt;/code&gt; 增加一个 token 即可&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tokens:
    - &lt;span class=&quot;s2&quot;&gt;&quot;proxy,node:jYektagNTmhjv9Dh&quot;&lt;/span&gt;
    - &lt;span class=&quot;s2&quot;&gt;&quot;auth:jYektagNTmhjv9Dh&quot;&lt;/span&gt;
    - &lt;span class=&quot;s2&quot;&gt;&quot;trusted_cluster:xiomwWcrKinFw4Vs&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后重启 Teleport&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl restart teleport
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;52内网-master-链接公网-master&quot;&gt;5.2、内网 Master 链接公网 Master&lt;/h4&gt;

&lt;p&gt;当公网集群开启了允许其他集群链接后，内网集群只需要创建配置进行连接即可，创建配置(cluster.yaml)如下&lt;/p&gt;

&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# cluster.yaml&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;kind&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;trusted_cluster&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;v2&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;metadata&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# the trusted cluster name MUST match the 'cluster_name' setting of the&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# cluster&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;local_cluster&lt;/span&gt;
&lt;span class=&quot;na&quot;&gt;spec&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# this field allows to create tunnels that are disabled, but can be enabled later.&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;enabled&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# the token expected by the &quot;main&quot; cluster:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;token&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;xiomwWcrKinFw4Vs&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# the address in 'host:port' form of the reverse tunnel listening port on the&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# &quot;master&quot; proxy server:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;tunnel_addr&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;92.223.67.84:3024&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# the address in 'host:port' form of the web listening port on the&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# &quot;master&quot; proxy server:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;web_proxy_addr&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;92.223.67.84:3080&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;执行以下命令使内网集群通过 ssh 隧道连接到公网集群&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tctl &lt;span class=&quot;nt&quot;&gt;--config&lt;/span&gt; /etc/teleport/teleport.yaml create /etc/teleport/cluster.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;注意，如果在启动公网和内网集群时没有指定受信的证书( &lt;code class=&quot;highlighter-rouge&quot;&gt;https_cert_file&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;https_key_file&lt;/code&gt; )，那么默认 Teleport 将会生成一个自签名证书，此时在 create 受信集群时将会产生如下错误:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;the trusted cluster uses misconfigured HTTP/TLS certificate
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;此时需要在 &lt;strong&gt;待添加集群(内网)&lt;/strong&gt; 启动时增加 &lt;code class=&quot;highlighter-rouge&quot;&gt;--insecure&lt;/code&gt; 参数，即 Systemd 配置修改如下&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Unit]
&lt;span class=&quot;nv&quot;&gt;Description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Teleport SSH Service
&lt;span class=&quot;nv&quot;&gt;After&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;network.target

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Service]
&lt;span class=&quot;nv&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;simple
&lt;span class=&quot;nv&quot;&gt;Restart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;always
&lt;span class=&quot;nv&quot;&gt;ExecStart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/local/bin/teleport start &lt;span class=&quot;nt&quot;&gt;--insecure&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; /etc/teleport/teleport.yaml

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Install]
&lt;span class=&quot;nv&quot;&gt;WantedBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;multi-user.target
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后再进行 create 就不会报错&lt;/p&gt;

&lt;h3 id=&quot;六添加其他节点&quot;&gt;六、添加其他节点&lt;/h3&gt;

&lt;p&gt;两台节点打通后，此时如果有其他机器则可以将其加入到对应集群中，以下以另一台内网机器为例&lt;/p&gt;

&lt;p&gt;由于在主节点 &lt;code class=&quot;highlighter-rouge&quot;&gt;auth_service&lt;/code&gt; 中已经预先指定了一个 static Token 用于其他节点加入( &lt;code class=&quot;highlighter-rouge&quot;&gt;proxy,node:jYektagNTmhjv9Dh&lt;/code&gt; )，所以其他节点只需要使用这个 Token 加入即可，在另一台内网主机上修改 Systemd 配置如下，然后启动即可&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Unit]
&lt;span class=&quot;nv&quot;&gt;Description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;Teleport SSH Service
&lt;span class=&quot;nv&quot;&gt;After&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;network.target

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Service]
&lt;span class=&quot;nv&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;simple
&lt;span class=&quot;nv&quot;&gt;Restart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;always
&lt;span class=&quot;nv&quot;&gt;ExecStart&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/usr/local/bin/teleport start &lt;span class=&quot;nt&quot;&gt;--roles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;node,proxy &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                                        &lt;span class=&quot;nt&quot;&gt;--token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;jYektagNTmhjv9Dh &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                                        &lt;span class=&quot;nt&quot;&gt;--auth-server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;172.16.0.80

&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Install]
&lt;span class=&quot;nv&quot;&gt;WantedBy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;multi-user.target
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;此时在内网的 Master 上可以查看到 Node 已经加入&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;test1.node ➜ tctl &lt;span class=&quot;nt&quot;&gt;--config&lt;/span&gt; /etc/teleport/teleport.yaml nodes &lt;span class=&quot;nb&quot;&gt;ls
&lt;/span&gt;Hostname    UUID                                 Address          Labels
&lt;span class=&quot;nt&quot;&gt;-----------&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;------------------------------------&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;----------------&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-----------------------&lt;/span&gt;
test2.node  abc786fe-9a60-4480-80f7-8edc20710e58 172.16.0.81:3022
mritd.test1 be9080fb-bdba-4823-9fb6-294e0b0dcce3 172.16.0.80:3022 &lt;span class=&quot;nv&quot;&gt;arch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;x86_64,role&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;七连接测试&quot;&gt;七、连接测试&lt;/h3&gt;

&lt;h4 id=&quot;71web-测试&quot;&gt;7.1、Web 测试&lt;/h4&gt;

&lt;p&gt;Teleport 支持 Web 页面访问，直接访问 &lt;code class=&quot;highlighter-rouge&quot;&gt;https://公网IP:3080&lt;/code&gt;，然后登陆即可，登陆后如下&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/9yf6k.png&quot; alt=&quot;Web login&quot; /&gt;&lt;/p&gt;

&lt;p&gt;通过 Cluster 选项可以切换不同集群，点击后面的用户名可以选择不同用户登录到不同主机(用户授权在添加用户时控制)，登陆成功后如下&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/m7hz5.png&quot; alt=&quot;Login Success&quot; /&gt;&lt;/p&gt;

&lt;p&gt;通过 Teleport 进行的所有操作可以通过审计菜单进行操作回放&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/c8a74.png&quot; alt=&quot;Audit&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;72命令行测试&quot;&gt;7.2、命令行测试&lt;/h4&gt;

&lt;p&gt;类 Uninx 系统下我们还是习惯使用终端登录，终端登录需要借助 Teleport 的命令行工具 &lt;code class=&quot;highlighter-rouge&quot;&gt;tsh&lt;/code&gt;，&lt;code class=&quot;highlighter-rouge&quot;&gt;tsh&lt;/code&gt; 在下载的 release 压缩版中已经有了，具体使用文档请自行 help 和参考官方文档，以下为简单的使用示例&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;登录跳板机: 短时间内只需要登录一次即可，登录时需要输入密码及 OTP 口令&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TELEPORT_PROXY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;92.223.67.84
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;TELEPORT_USER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;mritd
tsh login &lt;span class=&quot;nt&quot;&gt;--insecure&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;登录主机: 完成上一步 login 后就可以免密码登录任意主机&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# cluster 名字是上面设置的，在 web 界面也能看到&lt;/span&gt;
tsh ssh &lt;span class=&quot;nt&quot;&gt;--cluster&lt;/span&gt; nat root@test2.node
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;复制文件: &lt;strong&gt;复制文件时不显示进度，并非卡死&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tsh scp &lt;span class=&quot;nt&quot;&gt;--cluster&lt;/span&gt; nat teleport-v2.3.5-linux-amd64-bin.tar.gz root@test2.node:/

-&amp;gt; teleport-v2.3.5-linux-amd64-bin.tar.gz &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;16797035&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;转载请注明出处，本文采用 &lt;a href=&quot;http://creativecommons.org/licenses/by-nc-nd/4.0/&quot;&gt;CC4.0&lt;/a&gt; 协议授权&lt;/p&gt;</content><author><name>漠然</name></author><summary type="html">由于业务需求，以前账号管理混乱，所以很多人有生产服务器的 root 权限；所以目前需要一个能 ssh 登录线上服务器的工具，同时具有简单的审计功能；找了好久找到了这个小工具，以下记录一下搭建教程</summary></entry><entry><title type="html">Kubernetes 深度学习笔记</title><link href="https://mritd.me/2017/11/03/deep-learning-on-kubernetes/" rel="alternate" type="text/html" title="Kubernetes 深度学习笔记" /><published>2017-11-03T17:37:13+08:00</published><updated>2017-11-03T17:37:13+08:00</updated><id>https://mritd.me/2017/11/03/deep-learning-on-kubernetes</id><content type="html" xml:base="https://mritd.me/2017/11/03/deep-learning-on-kubernetes/">&lt;blockquote&gt;
  &lt;p&gt;本文主要记录下 Kubernetes 下运行深度学习框架如 Tensorflow、Caffe2 等一些坑，纯总结性文档&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;一先决条件&quot;&gt;一、先决条件&lt;/h3&gt;

&lt;p&gt;Kubernetes 运行深度学习应用实际上要解决的唯一问题就是 GPU 调用，以下只描述 Nvidia 相关的问题以及解决方法；要想完成 Kubernetes 对 GPU 调用，首先要满足以下条件:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Nvidia 显卡驱动安装正确&lt;/li&gt;
  &lt;li&gt;CUDA 安装正确&lt;/li&gt;
  &lt;li&gt;Nvidia Docker 安装正确&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;关于 Nvidia 驱动和 CUDA 请自行查找安装方法，如果这两部都搞不定，那么不用继续了&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;还有一点需要注意: &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/lib&lt;/code&gt; 这个目录不能处于单独分区中，具体原因下面阐述&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;二nvidia-docker-安装&quot;&gt;二、Nvidia Docker 安装&lt;/h3&gt;

&lt;p&gt;在安装 Nvidia Docker 之前，请确保 Nvidia 驱动以及 CUDA 安装成功，并且 &lt;code class=&quot;highlighter-rouge&quot;&gt;nvidia-smi&lt;/code&gt; 能正确显示，如下图所示(来源于网络)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tNc79ly1fl3vz0yt6tj30wy0mg4qp.jpg&quot; alt=&quot;nvidia-smi&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Nvidia Docker 安装极其简单，具体可参考 &lt;a href=&quot;https://github.com/NVIDIA/nvidia-docker&quot;&gt;官方文档&lt;/a&gt;，安装完成后请自行按照官方文档描述进行测试，这一步一般不会出现问题&lt;/p&gt;

&lt;p&gt;如果测试成功后，&lt;strong&gt;请查看 &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/lib/nvidia-docker/volumes&lt;/code&gt;&lt;/strong&gt; 目录下是否有文件，&lt;strong&gt;如果没有，那就意味着 Nvidia Docker 并未生成相关的驱动文件成功，需要单独执行 &lt;code class=&quot;highlighter-rouge&quot;&gt;docker volume create --driver=nvidia-docker --name=nvidia_driver_$(modinfo -F version nvidia)&lt;/code&gt; 以生成该文件；该命令生成的方式是将已经安装到系统的相关文件硬链接至此，所以要求 &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/lib&lt;/code&gt; 目录不能在单独的分区&lt;/strong&gt;；驱动生成完成后应该会产生类似 &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/lib/nvidia-docker/volumes/nvidia_driver/375.66&lt;/code&gt; 的目录结构&lt;/p&gt;

&lt;h3 id=&quot;三kubernetes-配置&quot;&gt;三、Kubernetes 配置&lt;/h3&gt;

&lt;p&gt;当所有基础环境就绪后，最后需要开启 Kubernetes 对 GPU 支持；Kubernetes GPU 文档可以参考 &lt;a href=&quot;https://kubernetes.io/docs/tasks/manage-gpus/scheduling-gpus&quot;&gt;这里&lt;/a&gt;，实际主要就是在 kubelet 启动时增加 &lt;code class=&quot;highlighter-rouge&quot;&gt;--feature-gates=&quot;Accelerators=true&quot;&lt;/code&gt; 参数，如下所示&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ws3.sinaimg.cn/large/006tKfTcly1fl4zj170jxj31is0z8ahj.jpg&quot; alt=&quot;Accelerators&quot; /&gt;&lt;/p&gt;

&lt;p&gt;所有节点全部修改完成后重启 kubelet 即可，&lt;strong&gt;如果一台机器上有不同型号的显卡，同时希望 Pod 能区别使用不同的 GPU 则可以按照 &lt;a href=&quot;https://kubernetes.io/docs/tasks/manage-gpus/scheduling-gpus/#api&quot;&gt;官方文档&lt;/a&gt; 增加相应设置&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;四deployment-设置&quot;&gt;四、Deployment 设置&lt;/h3&gt;

&lt;p&gt;Deployment 部署采用一个 Tensorflow 镜像作为示例，部署配置如下&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apiVersion: apps/v1beta1
kind: Deployment
metadata:
  name: tensorflow
  labels:
    name: tensorflow
spec:
  replicas: 1
  template:
    metadata:
      labels:
        name: tensorflow
    spec:
      containers:
        - name: tensorflow
          image: tensorflow/tensorflow:1.4.0-rc0-gpu
          imagePullPolicy: IfNotPresent
          &lt;span class=&quot;nb&quot;&gt;command&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bash&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;-c&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;sleep 999999&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
          ports:
            - name: tensorflow
              containerPort: 8888
          resources: 
            limits: 
              alpha.kubernetes.io/nvidia-gpu: 1
          volumeMounts:
            - mountPath: /usr/local/nvidia
              name: nvidia-driver
            - mountPath: /dev/nvidia0
              name: nvidia0
            - mountPath: /dev/nvidia-uvm
              name: nvidia-uvm
            - mountPath: /dev/nvidia-uvm-tools
              name: nvidia-uvm-tools
            - mountPath: /dev/nvidiactl
              name: nvidiactl
      volumes:
        - name: nvidia-driver
          hostPath:
            path: /var/lib/nvidia-docker/volumes/nvidia_driver/375.66
        - name: nvidia0
          hostPath:
            path: /dev/nvidia0
        - name: nvidia-uvm
          hostPath:
            path: /dev/nvidia-uvm
        - name: nvidia-uvm-tools
          hostPath:
            path: /dev/nvidia-uvm-tools
        - name: nvidiactl
          hostPath:
            path: /dev/nvidiactl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Deployment 中运行的 Pod 需要挂载对应的宿主机设备文件以及驱动文件才能正确的调用宿主机 GPU，所以一定要确保前几步生成的相关驱动文件等没问题；如果有多个 nvidia 显卡的话可能需要挂载多个 nvidia 设备&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Pod 运行成功后可执行以下代码测试 GPU 调用&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;tensorflow&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;constant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Hello, TensorFlow!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sess&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;constant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;constant&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;成功后截图如下&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://ws2.sinaimg.cn/large/006tKfTcly1fl501nwxhyj31kw0ti7nd.jpg&quot; alt=&quot;Tensorflow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;转载请注明出处，本文采用 &lt;a href=&quot;http://creativecommons.org/licenses/by-nc-nd/4.0/&quot;&gt;CC4.0&lt;/a&gt; 协议授权&lt;/p&gt;</content><author><name>漠然</name></author><summary type="html">本文主要记录下 Kubernetes 下运行深度学习框架如 Tensorflow、Caffe2 等一些坑，纯总结性文档</summary></entry><entry><title type="html">Kubernetes 1.8 kube-proxy 开启 ipvs</title><link href="https://mritd.me/2017/10/10/kube-proxy-use-ipvs-on-kubernetes-1.8/" rel="alternate" type="text/html" title="Kubernetes 1.8 kube-proxy 开启 ipvs" /><published>2017-10-10T17:19:04+08:00</published><updated>2017-10-10T17:19:04+08:00</updated><id>https://mritd.me/2017/10/10/kube-proxy-use-ipvs-on-kubernetes-1.8</id><content type="html" xml:base="https://mritd.me/2017/10/10/kube-proxy-use-ipvs-on-kubernetes-1.8/">&lt;blockquote&gt;
  &lt;p&gt;Kubernetes 1.8 发布已经好几天，1.8 对于 kube-proxy 组件增加了 ipvs 支持，以下记录一下 kube-proxy ipvs 开启教程&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;一环境准备&quot;&gt;一、环境准备&lt;/h3&gt;

&lt;p&gt;目前测试为 5 台虚拟机，CentOS 系统，etcd、kubernetes 全部采用 rpm 安装，使用 systemd 来做管理，网络组件采用 calico，Master 实现了 HA；基本环境如下&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;IP&lt;/th&gt;
      &lt;th&gt;组件&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;10.10.1.5&lt;/td&gt;
      &lt;td&gt;Master、Node、etcd&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;10.10.1.6&lt;/td&gt;
      &lt;td&gt;Master、Node、etcd&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;10.10.1.7&lt;/td&gt;
      &lt;td&gt;Master、Node、etcd&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;10.10.1.8&lt;/td&gt;
      &lt;td&gt;Node&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;10.10.1.9&lt;/td&gt;
      &lt;td&gt;Node&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;二注意事项&quot;&gt;二、注意事项&lt;/h3&gt;

&lt;p&gt;之所以把这个单独写一个标题是因为坑有点多，为了避免下面出现问题，先说一下注意事项:&lt;/p&gt;

&lt;h4 id=&quot;21selinux&quot;&gt;2.1、SELinux&lt;/h4&gt;

&lt;p&gt;如果对 SELinux 玩的不溜的朋友，我建议先关闭  SELinux，关闭方法如下&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 编辑 /etc/selinux/config 文件；确保 SELINUX=disabled&lt;/span&gt;
docker1.node ➜  ~ &lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /etc/selinux/config

&lt;span class=&quot;c&quot;&gt;# This file controls the state of SELinux on the system.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# SELINUX= can take one of these three values:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#     enforcing - SELinux security policy is enforced.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#     permissive - SELinux prints warnings instead of enforcing.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#     disabled - No SELinux policy is loaded.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;SELINUX&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;disabled
&lt;span class=&quot;c&quot;&gt;# SELINUXTYPE= can take one of three two values:&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#     targeted - Targeted processes are protected,&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#     minimum - Modification of targeted policy. Only selected processes are protected.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#     mls - Multi Level Security protection.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;SELINUXTYPE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;targeted
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;然后重启机器并验证&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker1.node ➜  ~ sestatus
SELinux status:                 disabled
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;22firewall&quot;&gt;2.2、Firewall&lt;/h4&gt;

&lt;p&gt;搭建时尽量关闭防火墙，如果你玩的很溜，那么请在测试没问题后再开启防火墙&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl stop firewalld
systemctl disable firewalld
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;23内核参数调整&quot;&gt;2.3、内核参数调整&lt;/h4&gt;

&lt;p&gt;确保内核已经开启如下参数，或者说确保 &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/sysctl.conf&lt;/code&gt; 有如下配置&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker1.node ➜  ~ &lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /etc/sysctl.conf
&lt;span class=&quot;c&quot;&gt;# sysctl settings are defined through files in&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# /usr/lib/sysctl.d/, /run/sysctl.d/, and /etc/sysctl.d/.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Vendors settings live in /usr/lib/sysctl.d/.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# To override a whole file, create a new file with the same in&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# /etc/sysctl.d/ and put new settings there. To override&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# only specific settings, add a file with a lexically later&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# name in /etc/sysctl.d/ and put new settings there.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# For more information, see sysctl.conf(5) and sysctl.d(5).&lt;/span&gt;
net.ipv4.ip_forward&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1
net.bridge.bridge-nf-call-iptables&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1
net.bridge.bridge-nf-call-ip6tables&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后执行 &lt;code class=&quot;highlighter-rouge&quot;&gt;sysctl -p&lt;/code&gt; 使之生效&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker1.node ➜  ~ sysctl &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt;
net.ipv4.ip_forward &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1
net.bridge.bridge-nf-call-iptables &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1
net.bridge.bridge-nf-call-ip6tables &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;24内核模块加载&quot;&gt;2.4、内核模块加载&lt;/h4&gt;

&lt;p&gt;由于 ipvs 已经加入到内核主干，所以需要内核模块支持，请确保内核已经加载了相应模块；如不确定，执行以下脚本，以确保内核加载相应模块，&lt;strong&gt;否则会出现 &lt;code class=&quot;highlighter-rouge&quot;&gt;failed to load kernel modules: [ip_vs_rr ip_vs_sh ip_vs_wrr]&lt;/code&gt; 错误&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /etc/sysconfig/modules/ipvs.modules &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
#!/bin/bash
ipvs_modules=&quot;ip_vs ip_vs_lc ip_vs_wlc ip_vs_rr ip_vs_wrr ip_vs_lblc ip_vs_lblcr ip_vs_dh ip_vs_sh ip_vs_fo ip_vs_nq ip_vs_sed ip_vs_ftp nf_conntrack_ipv4&quot;
for kernel_module in \&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ipvs_modules&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;; do
    /sbin/modinfo -F filename \&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kernel_module&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt; &amp;gt; /dev/null 2&amp;gt;&amp;amp;1
    if [ &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$?&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt; -eq 0 ]; then
        /sbin/modprobe \&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;kernel_module&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
    fi
done
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF
&lt;/span&gt;chmod 755 /etc/sysconfig/modules/ipvs.modules &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; bash /etc/sysconfig/modules/ipvs.modules &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; lsmod | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;ip_vs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;执行后应该如下图所示，&lt;strong&gt;如果 &lt;code class=&quot;highlighter-rouge&quot;&gt;lsmod | grep ip_vs&lt;/code&gt; 并未出现 &lt;code class=&quot;highlighter-rouge&quot;&gt;ip_vs_rr&lt;/code&gt; 等模块；那么请更换内核(一般不会，2.6 以后 ipvs 好像已经就合并进主干了)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/49wbb.jpg&quot; alt=&quot;Load kernel modules&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;三开启-ipvs-支持&quot;&gt;三、开启 ipvs 支持&lt;/h3&gt;

&lt;h4 id=&quot;31修改配置&quot;&gt;3.1、修改配置&lt;/h4&gt;

&lt;p&gt;修改 &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/kubernetes/proxy&lt;/code&gt; 配置如下&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;###&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# kubernetes proxy config&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# default config should be adequate&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Add your own!&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;KUBE_PROXY_ARGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--bind-address=10.10.1.8 &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
                 --hostname-override=docker4.node &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
                 --masquerade-all &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
                 --feature-gates=SupportIPVSProxyMode=true &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
                 --proxy-mode=ipvs &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
                 --ipvs-min-sync-period=5s &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
                 --ipvs-sync-period=5s &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
                 --ipvs-scheduler=rr &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
                 --kubeconfig=/etc/kubernetes/kube-proxy.kubeconfig &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
                 --cluster-cidr=10.254.0.0/16&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;启用 ipvs 后与 1.7 版本的配置差异如下：&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;增加 &lt;code class=&quot;highlighter-rouge&quot;&gt;--feature-gates=SupportIPVSProxyMode=true&lt;/code&gt; 选项，用于告诉 kube-proxy 开启 ipvs 支持，因为目前 ipvs 并未稳定&lt;/li&gt;
  &lt;li&gt;增加 &lt;code class=&quot;highlighter-rouge&quot;&gt;ipvs-min-sync-period&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;--ipvs-sync-period&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;--ipvs-scheduler&lt;/code&gt; 三个参数用于调整 ipvs，具体参数值请自行查阅 ipvs 文档&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;增加 &lt;code class=&quot;highlighter-rouge&quot;&gt;--masquerade-all&lt;/code&gt; 选项，以确保反向流量通过&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;重点说一下 &lt;code class=&quot;highlighter-rouge&quot;&gt;--masquerade-all&lt;/code&gt; 选项: kube-proxy ipvs 是基于 NAT 实现的，当创建一个 service 后，kubernetes 会在每个节点上创建一个网卡，同时帮你将 Service IP(VIP) 绑定上，此时相当于每个 Node 都是一个 ds，而其他任何 Node 上的 Pod，甚至是宿主机服务(比如 kube-apiserver 的 6443)都可能成为 rs；按照正常的 lvs nat 模型，所有 rs 应该将 ds 设置成为默认网关，以便数据包在返回时能被 ds 正确修改；在 kubernetes 将 vip 设置到每个 Node 后，默认路由显然不可行，所以要设置 &lt;code class=&quot;highlighter-rouge&quot;&gt;--masquerade-all&lt;/code&gt; 选项，以便反向数据包能通过&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;以上描述可能并不精准，具体请看 &lt;a href=&quot;https://docs.google.com/document/d/1YEBWR4EWeCEWwxufXzRM0e82l_lYYzIXQiSayGaVQ8M/edit?usp=sharing&quot;&gt;Google 文档&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;32测试-ipvs&quot;&gt;3.2、测试 ipvs&lt;/h4&gt;

&lt;p&gt;修改完成后，重启 kube-proxy 使其生效&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl daemon-reload
systemctl restart kube-proxy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;重启后日志中应该能看到如下输出，不应该有其他提示 ipvs 的错误信息出现&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/o05rq.jpg&quot; alt=&quot;kube-proxy ipvs log&quot; /&gt;&lt;/p&gt;

&lt;p&gt;同时使用 ipvsadm 命令应该能看到相应的 service 的 ipvs 规则(ipvsadm 自己安装一下)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/d1ilk.jpg&quot; alt=&quot;ipvs role&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后进入 Pod 测试&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/42pjm.jpg&quot; alt=&quot;test ipvs1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;最后说一点: ipvs 尚未稳定，请慎用；而且 &lt;code class=&quot;highlighter-rouge&quot;&gt;--masquerade-all&lt;/code&gt; 选项与 Calico 安全策略控制不兼容，请酌情考虑使用(Calico 在做网络策略限制的时候要求不能开启此选项)&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;转载请注明出处，本文采用 &lt;a href=&quot;http://creativecommons.org/licenses/by-nc-nd/4.0/&quot;&gt;CC4.0&lt;/a&gt; 协议授权&lt;/p&gt;</content><author><name>漠然</name></author><summary type="html">Kubernetes 1.8 发布已经好几天，1.8 对于 kube-proxy 组件增加了 ipvs 支持，以下记录一下 kube-proxy ipvs 开启教程</summary></entry><entry><title type="html">Kubernetes 1.8 集群搭建</title><link href="https://mritd.me/2017/10/09/set-up-kubernetes-1.8-ha-cluster/" rel="alternate" type="text/html" title="Kubernetes 1.8 集群搭建" /><published>2017-10-09T22:48:03+08:00</published><updated>2017-10-09T22:48:03+08:00</updated><id>https://mritd.me/2017/10/09/set-up-kubernetes-1.8-ha-cluster</id><content type="html" xml:base="https://mritd.me/2017/10/09/set-up-kubernetes-1.8-ha-cluster/">&lt;blockquote&gt;
  &lt;p&gt;目前 Kubernetes 1.8.0 已经发布，1.8.0增加了很多新特性，比如 kube-proxy 组建的 ipvs 模式等，同时 RBAC 授权也做了一些调整，国庆没事干，所以试了一下；以下记录了 Kubernetes 1.8.0 的搭建过程&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;一环境准备&quot;&gt;一、环境准备&lt;/h3&gt;

&lt;p&gt;目前测试为 5 台虚拟机，etcd、kubernetes 全部采用 rpm 安装，使用 systemd 来做管理，网络组件采用 calico，Master 实现了 HA；基本环境如下&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;IP&lt;/th&gt;
      &lt;th&gt;组件&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;10.10.1.5&lt;/td&gt;
      &lt;td&gt;Master、Node、etcd&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;10.10.1.6&lt;/td&gt;
      &lt;td&gt;Master、Node、etcd&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;10.10.1.7&lt;/td&gt;
      &lt;td&gt;Master、Node、etcd&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;10.10.1.8&lt;/td&gt;
      &lt;td&gt;Node&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;10.10.1.9&lt;/td&gt;
      &lt;td&gt;Node&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;strong&gt;本文尽量以实际操作为主，因为写过一篇 &lt;a href=&quot;https://mritd.me/2017/07/21/set-up-kubernetes-ha-cluster-by-binary/&quot;&gt;Kubernetes 1.7 搭建文档&lt;/a&gt;，所以以下细节部分不在详细阐述，不懂得可以参考上一篇文章；本文所有安装工具均已打包上传到了 &lt;a href=&quot;https://pan.baidu.com/s/1nvwZCfv&quot;&gt;百度云&lt;/a&gt; 密码: &lt;code class=&quot;highlighter-rouge&quot;&gt;4zaz&lt;/code&gt;，可直接下载重复搭建过程，搭建前请自行 load 好 images 目录下的相关 docker 镜像&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;二搭建-etcd-集群&quot;&gt;二、搭建 Etcd 集群&lt;/h3&gt;

&lt;h4 id=&quot;21生成-etcd-证书&quot;&gt;2.1、生成 Etcd 证书&lt;/h4&gt;

&lt;p&gt;同样证书工具仍使用的是 &lt;a href=&quot;https://pkg.cfssl.org/&quot;&gt;cfssl&lt;/a&gt;，百度云的压缩包里已经包含了，下面直接上配置(&lt;strong&gt;注意，所有证书生成只需要在任意一台主机上生成一遍即可，我这里在 Master 上操作的&lt;/strong&gt;)&lt;/p&gt;

&lt;h5 id=&quot;etcd-csrjson&quot;&gt;etcd-csr.json&lt;/h5&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;key&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;algo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;rsa&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;size&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2048&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;names&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;O&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;etcd&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;OU&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;etcd Security&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;L&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Beijing&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ST&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Beijing&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;C&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;CN&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;CN&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;etcd&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hosts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;127.0.0.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;localhost&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;10.10.1.5&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;10.10.1.6&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;10.10.1.7&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;10.10.1.8&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;10.10.1.9&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;etcd-gencertjson&quot;&gt;etcd-gencert.json&lt;/h5&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;signing&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;default&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;usages&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;signing&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;key encipherment&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;server auth&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
          &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;client auth&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;expiry&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;87600h&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;etcd-root-ca-csrjson&quot;&gt;etcd-root-ca-csr.json&lt;/h5&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;key&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;algo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;rsa&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;size&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4096&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;names&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;O&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;etcd&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;OU&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;etcd Security&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;L&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Beijing&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ST&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Beijing&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;C&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;CN&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;CN&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;etcd-root-ca&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;最后生成证书&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cfssl gencert &lt;span class=&quot;nt&quot;&gt;--initca&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true &lt;/span&gt;etcd-root-ca-csr.json | cfssljson &lt;span class=&quot;nt&quot;&gt;--bare&lt;/span&gt; etcd-root-ca
cfssl gencert &lt;span class=&quot;nt&quot;&gt;--ca&lt;/span&gt; etcd-root-ca.pem &lt;span class=&quot;nt&quot;&gt;--ca-key&lt;/span&gt; etcd-root-ca-key.pem &lt;span class=&quot;nt&quot;&gt;--config&lt;/span&gt; etcd-gencert.json etcd-csr.json | cfssljson &lt;span class=&quot;nt&quot;&gt;--bare&lt;/span&gt; etcd
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;证书生成后截图如下&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/6mn6y.jpg&quot; alt=&quot;Gen Etcd Cert&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;22搭建集群&quot;&gt;2.2、搭建集群&lt;/h4&gt;

&lt;p&gt;首先分发证书及 rpm 包&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 分发 rpm&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;IP &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;seq 5 7&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do
    &lt;/span&gt;scp etcd-3.2.7-1.fc28.x86_64.rpm root@10.10.1.&lt;span class=&quot;nv&quot;&gt;$IP&lt;/span&gt;:~
    ssh root@10.10.1.&lt;span class=&quot;nv&quot;&gt;$IP&lt;/span&gt; rpm &lt;span class=&quot;nt&quot;&gt;-ivh&lt;/span&gt; etcd-3.2.7-1.fc28.x86_64.rpm
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 分发证书&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;IP &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;seq 5 7&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;do
    &lt;/span&gt;ssh root@10.10.1.&lt;span class=&quot;nv&quot;&gt;$IP&lt;/span&gt; mkdir /etc/etcd/ssl
    scp &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.pem root@10.10.1.&lt;span class=&quot;nv&quot;&gt;$IP&lt;/span&gt;:/etc/etcd/ssl
    ssh root@10.10.1.&lt;span class=&quot;nv&quot;&gt;$IP&lt;/span&gt; chown &lt;span class=&quot;nt&quot;&gt;-R&lt;/span&gt; etcd:etcd /etc/etcd/ssl
    ssh root@10.10.1.&lt;span class=&quot;nv&quot;&gt;$IP&lt;/span&gt; chmod &lt;span class=&quot;nt&quot;&gt;-R&lt;/span&gt; 644 /etc/etcd/ssl/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;
    ssh root@10.10.1.&lt;span class=&quot;nv&quot;&gt;$IP&lt;/span&gt; chmod 755 /etc/etcd/ssl
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 修改 etcd 数据目录权限组&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;IP &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;seq 5 7&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;do
    &lt;/span&gt;ssh root@10.10.1.&lt;span class=&quot;nv&quot;&gt;$IP&lt;/span&gt; chown &lt;span class=&quot;nt&quot;&gt;-R&lt;/span&gt; etcd:etcd /var/lib/etcd
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;然后修改配置如下(其他两个节点类似，只需要改监听地址和 Etcd Name 即可)&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker1.node ➜  ~ &lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /etc/etcd/etcd.conf

&lt;span class=&quot;c&quot;&gt;# [member]&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ETCD_NAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;etcd1
&lt;span class=&quot;nv&quot;&gt;ETCD_DATA_DIR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/var/lib/etcd/etcd1.etcd&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ETCD_WAL_DIR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/var/lib/etcd/wal&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ETCD_SNAPSHOT_COUNT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;100&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ETCD_HEARTBEAT_INTERVAL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;100&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ETCD_ELECTION_TIMEOUT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1000&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ETCD_LISTEN_PEER_URLS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://10.10.1.5:2380&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ETCD_LISTEN_CLIENT_URLS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://10.10.1.5:2379,http://127.0.0.1:2379&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ETCD_MAX_SNAPSHOTS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;5&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ETCD_MAX_WALS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;5&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#ETCD_CORS=&quot;&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# [cluster]&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ETCD_INITIAL_ADVERTISE_PEER_URLS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://10.10.1.5:2380&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# if you use different ETCD_NAME (e.g. test), set ETCD_INITIAL_CLUSTER value for this name, i.e. &quot;test=http://...&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ETCD_INITIAL_CLUSTER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;etcd1=https://10.10.1.5:2380,etcd2=https://10.10.1.6:2380,etcd3=https://10.10.1.7:2380&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ETCD_INITIAL_CLUSTER_STATE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;new&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ETCD_INITIAL_CLUSTER_TOKEN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;etcd-cluster&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ETCD_ADVERTISE_CLIENT_URLS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://10.10.1.5:2379&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#ETCD_DISCOVERY=&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#ETCD_DISCOVERY_SRV=&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#ETCD_DISCOVERY_FALLBACK=&quot;proxy&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#ETCD_DISCOVERY_PROXY=&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#ETCD_STRICT_RECONFIG_CHECK=&quot;false&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#ETCD_AUTO_COMPACTION_RETENTION=&quot;0&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# [proxy]&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#ETCD_PROXY=&quot;off&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#ETCD_PROXY_FAILURE_WAIT=&quot;5000&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#ETCD_PROXY_REFRESH_INTERVAL=&quot;30000&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#ETCD_PROXY_DIAL_TIMEOUT=&quot;1000&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#ETCD_PROXY_WRITE_TIMEOUT=&quot;5000&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#ETCD_PROXY_READ_TIMEOUT=&quot;0&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# [security]&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ETCD_CERT_FILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/etc/etcd/ssl/etcd.pem&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ETCD_KEY_FILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/etc/etcd/ssl/etcd-key.pem&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ETCD_CLIENT_CERT_AUTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;true&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ETCD_TRUSTED_CA_FILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/etc/etcd/ssl/etcd-root-ca.pem&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ETCD_AUTO_TLS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;true&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ETCD_PEER_CERT_FILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/etc/etcd/ssl/etcd.pem&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ETCD_PEER_KEY_FILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/etc/etcd/ssl/etcd-key.pem&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ETCD_PEER_CLIENT_CERT_AUTH&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;true&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ETCD_PEER_TRUSTED_CA_FILE&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/etc/etcd/ssl/etcd-root-ca.pem&quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;ETCD_PEER_AUTO_TLS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;true&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# [logging]&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#ETCD_DEBUG=&quot;false&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# examples for -log-package-levels etcdserver=WARNING,security=DEBUG&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#ETCD_LOG_PACKAGE_LEVELS=&quot;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最后启动集群并测试如下&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl daemon-reload
systemctl start etcd
systemctl &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;etcd

&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ETCDCTL_API&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;3
etcdctl &lt;span class=&quot;nt&quot;&gt;--cacert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/etc/etcd/ssl/etcd-root-ca.pem &lt;span class=&quot;nt&quot;&gt;--cert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/etc/etcd/ssl/etcd.pem &lt;span class=&quot;nt&quot;&gt;--key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/etc/etcd/ssl/etcd-key.pem &lt;span class=&quot;nt&quot;&gt;--endpoints&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;https://10.10.1.5:2379,https://10.10.1.6:2379,https://10.10.1.7:2379 endpoint health
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/ecrgr.jpg&quot; alt=&quot;check etcd&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;三搭建-master-节点&quot;&gt;三、搭建 Master 节点&lt;/h3&gt;

&lt;h4 id=&quot;31生成-kubernetes-证书&quot;&gt;3.1、生成 Kubernetes 证书&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;生成证书配置文件需要借助 kubectl，所以先要安装一下 kubernetes-client 包&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rpm &lt;span class=&quot;nt&quot;&gt;-ivh&lt;/span&gt; kubernetes-client-1.8.0-1.el7.centos.x86_64.rpm
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;生成证书配置如下&lt;/p&gt;

&lt;h5 id=&quot;admin-csrjson&quot;&gt;admin-csr.json&lt;/h5&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;CN&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;admin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hosts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;key&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;algo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;rsa&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;size&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2048&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;names&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;C&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;CN&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ST&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;BeiJing&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;L&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;BeiJing&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;O&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;system:masters&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;OU&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;System&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;k8s-gencertjson&quot;&gt;k8s-gencert.json&lt;/h5&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;signing&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;default&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;expiry&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;87600h&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;profiles&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;kubernetes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;usages&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;signing&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;key encipherment&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;server auth&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;client auth&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;expiry&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;87600h&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;k8s-root-ca-csrjson&quot;&gt;k8s-root-ca-csr.json&lt;/h5&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;CN&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;kubernetes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;key&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;algo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;rsa&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;size&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4096&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;names&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;C&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;CN&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ST&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;BeiJing&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;L&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;BeiJing&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;O&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;k8s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;OU&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;System&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;kube-proxy-csrjson&quot;&gt;kube-proxy-csr.json&lt;/h5&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;CN&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;system:kube-proxy&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hosts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;key&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;algo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;rsa&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;size&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2048&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;names&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;C&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;CN&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ST&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;BeiJing&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;L&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;BeiJing&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;O&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;k8s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;OU&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;System&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;kubernetes-csrjson&quot;&gt;kubernetes-csr.json&lt;/h5&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;CN&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;kubernetes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hosts&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;127.0.0.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;10.254.0.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;10.10.1.5&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;10.10.1.6&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;10.10.1.7&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;10.10.1.8&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;10.10.1.9&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;localhost&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;kubernetes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;kubernetes.default&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;kubernetes.default.svc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;kubernetes.default.svc.cluster&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;kubernetes.default.svc.cluster.local&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;key&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;algo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;rsa&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;size&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2048&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;names&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;C&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;CN&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ST&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;BeiJing&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;L&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;BeiJing&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;O&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;k8s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;OU&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;System&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最后生成证书及配置文件&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 生成证书&lt;/span&gt;
cfssl gencert &lt;span class=&quot;nt&quot;&gt;--initca&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true &lt;/span&gt;k8s-root-ca-csr.json | cfssljson &lt;span class=&quot;nt&quot;&gt;--bare&lt;/span&gt; k8s-root-ca

&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;targetName &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;kubernetes admin kube-proxy&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do
    &lt;/span&gt;cfssl gencert &lt;span class=&quot;nt&quot;&gt;--ca&lt;/span&gt; k8s-root-ca.pem &lt;span class=&quot;nt&quot;&gt;--ca-key&lt;/span&gt; k8s-root-ca-key.pem &lt;span class=&quot;nt&quot;&gt;--config&lt;/span&gt; k8s-gencert.json &lt;span class=&quot;nt&quot;&gt;--profile&lt;/span&gt; kubernetes &lt;span class=&quot;nv&quot;&gt;$targetName&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-csr&lt;/span&gt;.json | cfssljson &lt;span class=&quot;nt&quot;&gt;--bare&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$targetName&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 生成配置&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;KUBE_APISERVER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://127.0.0.1:6443&quot;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BOOTSTRAP_TOKEN&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;head &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; 16 /dev/urandom | od &lt;span class=&quot;nt&quot;&gt;-An&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; x | tr &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;' '&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Tokne: &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BOOTSTRAP_TOKEN&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;

&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; token.csv &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BOOTSTRAP_TOKEN&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;,kubelet-bootstrap,10001,&quot;system:kubelet-bootstrap&quot;
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF

&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Create kubelet bootstrapping kubeconfig...&quot;&lt;/span&gt;
kubectl config set-cluster kubernetes &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--certificate-authority&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;k8s-root-ca.pem &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--embed-certs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;KUBE_APISERVER&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--kubeconfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;bootstrap.kubeconfig
kubectl config set-credentials kubelet-bootstrap &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--token&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;BOOTSTRAP_TOKEN&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--kubeconfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;bootstrap.kubeconfig
kubectl config set-context default &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--cluster&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;kubernetes &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;kubelet-bootstrap &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--kubeconfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;bootstrap.kubeconfig
kubectl config use-context default &lt;span class=&quot;nt&quot;&gt;--kubeconfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;bootstrap.kubeconfig

&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Create kube-proxy kubeconfig...&quot;&lt;/span&gt;
kubectl config set-cluster kubernetes &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--certificate-authority&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;k8s-root-ca.pem &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--embed-certs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;KUBE_APISERVER&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--kubeconfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;kube-proxy.kubeconfig
kubectl config set-credentials kube-proxy &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--client-certificate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;kube-proxy.pem &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--client-key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;kube-proxy-key.pem &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--embed-certs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--kubeconfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;kube-proxy.kubeconfig
kubectl config set-context default &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--cluster&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;kubernetes &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;kube-proxy &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--kubeconfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;kube-proxy.kubeconfig
kubectl config use-context default &lt;span class=&quot;nt&quot;&gt;--kubeconfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;kube-proxy.kubeconfig

&lt;span class=&quot;c&quot;&gt;# 生成高级审计配置&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; audit-policy.yaml &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
# Log all requests at the Metadata level.
apiVersion: audit.k8s.io/v1beta1
kind: Policy
rules:
- level: Metadata
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;32分发-rpm-及证书&quot;&gt;3.2、分发 rpm 及证书&lt;/h4&gt;

&lt;p&gt;创建好证书以后就要进行分发，同时由于 Master 也作为 Node 使用，所以以下命令中在 Master 上也安装了 kubelet、kube-proxy 组件&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 分发并安装 rpm&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;IP &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;seq 5 7&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do
    &lt;/span&gt;scp kubernetes&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.rpm root@10.10.1.&lt;span class=&quot;nv&quot;&gt;$IP&lt;/span&gt;:~&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; 
    ssh root@10.10.1.&lt;span class=&quot;nv&quot;&gt;$IP&lt;/span&gt; yum install &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; kubernetes&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.rpm
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 分发证书&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;IP &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;seq 5 7&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;do
    &lt;/span&gt;ssh root@10.10.1.&lt;span class=&quot;nv&quot;&gt;$IP&lt;/span&gt; mkdir /etc/kubernetes/ssl
    scp &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.pem root@10.10.1.&lt;span class=&quot;nv&quot;&gt;$IP&lt;/span&gt;:/etc/kubernetes/ssl
    scp &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.kubeconfig token.csv audit-policy.yaml root@10.10.1.&lt;span class=&quot;nv&quot;&gt;$IP&lt;/span&gt;:/etc/kubernetes
    ssh root@10.10.1.&lt;span class=&quot;nv&quot;&gt;$IP&lt;/span&gt; chown &lt;span class=&quot;nt&quot;&gt;-R&lt;/span&gt; kube:kube /etc/kubernetes/ssl
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 设置 log 目录权限&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;IP &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;seq 5 7&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;do
    &lt;/span&gt;ssh root@10.10.1.&lt;span class=&quot;nv&quot;&gt;$IP&lt;/span&gt; mkdir &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; /var/log/kube-audit /usr/libexec/kubernetes
    ssh root@10.10.1.&lt;span class=&quot;nv&quot;&gt;$IP&lt;/span&gt; chown &lt;span class=&quot;nt&quot;&gt;-R&lt;/span&gt; kube:kube /var/log/kube-audit /usr/libexec/kubernetes
    ssh root@10.10.1.&lt;span class=&quot;nv&quot;&gt;$IP&lt;/span&gt; chmod &lt;span class=&quot;nt&quot;&gt;-R&lt;/span&gt; 755 /var/log/kube-audit /usr/libexec/kubernetes
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;33-搭建-master-节点&quot;&gt;3.3、 搭建 Master 节点&lt;/h4&gt;

&lt;p&gt;证书与 rpm 都安装完成后，只需要修改配置(配置位于 &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/kubernetes&lt;/code&gt; 目录)后启动相关组件即可&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;config 通用配置&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;###&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# kubernetes system config&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# The following values are used to configure various aspects of all&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# kubernetes services, including&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#   kube-apiserver.service&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#   kube-controller-manager.service&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#   kube-scheduler.service&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#   kubelet.service&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#   kube-proxy.service&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# logging to stderr means we get it in the systemd journal&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;KUBE_LOGTOSTDERR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--logtostderr=true&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# journal message level, 0 is debug&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;KUBE_LOG_LEVEL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--v=2&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Should this cluster be allowed to run privileged docker containers&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;KUBE_ALLOW_PRIV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--allow-privileged=true&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# How the controller-manager, scheduler, and proxy find the apiserver&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;KUBE_MASTER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--master=http://127.0.0.1:8080&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;apiserver-配置&quot;&gt;apiserver 配置&lt;/h5&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;###&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# kubernetes system config&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# The following values are used to configure the kube-apiserver&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# The address on the local server to listen to.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;KUBE_API_ADDRESS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--advertise-address=10.10.1.5 --insecure-bind-address=127.0.0.1 --bind-address=10.10.1.5&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# The port on the local server to listen on.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;KUBE_API_PORT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--insecure-port=8080 --secure-port=6443&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Port minions listen on&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# KUBELET_PORT=&quot;--kubelet-port=10250&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Comma separated list of nodes in the etcd cluster&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;KUBE_ETCD_SERVERS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--etcd-servers=https://10.10.1.5:2379,https://10.10.1.6:2379,https://10.10.1.7:2379&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Address range to use for services&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;KUBE_SERVICE_ADDRESSES&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--service-cluster-ip-range=10.254.0.0/16&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# default admission control policies&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;KUBE_ADMISSION_CONTROL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--admission-control=NamespaceLifecycle,LimitRanger,SecurityContextDeny,ServiceAccount,ResourceQuota,NodeRestriction&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Add your own!&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;KUBE_API_ARGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--authorization-mode=RBAC,Node &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
               --anonymous-auth=false &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
               --kubelet-https=true &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
               --enable-bootstrap-token-auth &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
               --token-auth-file=/etc/kubernetes/token.csv &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
               --service-node-port-range=30000-50000 &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
               --tls-cert-file=/etc/kubernetes/ssl/kubernetes.pem &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
               --tls-private-key-file=/etc/kubernetes/ssl/kubernetes-key.pem &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
               --client-ca-file=/etc/kubernetes/ssl/k8s-root-ca.pem &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
               --service-account-key-file=/etc/kubernetes/ssl/k8s-root-ca.pem &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
               --etcd-quorum-read=true &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
               --storage-backend=etcd3 &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
               --etcd-cafile=/etc/etcd/ssl/etcd-root-ca.pem &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
               --etcd-certfile=/etc/etcd/ssl/etcd.pem &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
               --etcd-keyfile=/etc/etcd/ssl/etcd-key.pem &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
               --enable-swagger-ui=true &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
               --apiserver-count=3 &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
               --audit-policy-file=/etc/kubernetes/audit-policy.yaml &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
               --audit-log-maxage=30 &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
               --audit-log-maxbackup=3 &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
               --audit-log-maxsize=100 &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
               --audit-log-path=/var/log/kube-audit/audit.log &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
               --event-ttl=1h&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;注意：API SERVER 对比 1.7 配置出现几项变动:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;移除了 &lt;code class=&quot;highlighter-rouge&quot;&gt;--runtime-config=rbac.authorization.k8s.io/v1beta1&lt;/code&gt; 配置，因为 RBAC 已经稳定，被纳入了 v1 api，不再需要指定开启&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--authorization-mode&lt;/code&gt; 授权模型增加了 &lt;code class=&quot;highlighter-rouge&quot;&gt;Node&lt;/code&gt; 参数，因为 1.8 后默认 &lt;code class=&quot;highlighter-rouge&quot;&gt;system:node&lt;/code&gt; role 不会自动授予 &lt;code class=&quot;highlighter-rouge&quot;&gt;system:nodes&lt;/code&gt; 组，具体请参看 &lt;a href=&quot;https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG.md#before-upgrading&quot;&gt;CHANGELOG&lt;/a&gt;(before-upgrading 段最后一条说明)&lt;/li&gt;
  &lt;li&gt;由于以上原因，&lt;code class=&quot;highlighter-rouge&quot;&gt;--admission-control&lt;/code&gt; 同时增加了 &lt;code class=&quot;highlighter-rouge&quot;&gt;NodeRestriction&lt;/code&gt; 参数，关于关于节点授权器请参考 &lt;a href=&quot;https://kubernetes.io/docs/admin/authorization/node/&quot;&gt;Using Node Authorization&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;增加 &lt;code class=&quot;highlighter-rouge&quot;&gt;--audit-policy-file&lt;/code&gt; 参数用于指定高级审计配置，具体可参考 &lt;a href=&quot;https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG.md#before-upgrading&quot;&gt;CHANGELOG&lt;/a&gt;(before-upgrading 第四条)、&lt;a href=&quot;https://kubernetes.io/docs/tasks/debug-application-cluster/audit/#advanced-audit&quot;&gt;Advanced audit&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;移除 &lt;code class=&quot;highlighter-rouge&quot;&gt;--experimental-bootstrap-token-auth&lt;/code&gt; 参数，更换为 &lt;code class=&quot;highlighter-rouge&quot;&gt;--enable-bootstrap-token-auth&lt;/code&gt;，详情参考 &lt;a href=&quot;https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG.md#auth&quot;&gt;CHANGELOG&lt;/a&gt;(Auth 第二条)&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;controller-manager-配置&quot;&gt;controller-manager 配置&lt;/h5&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;###&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# The following values are used to configure the kubernetes controller-manager&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# defaults from config and apiserver should be adequate&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Add your own!&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;KUBE_CONTROLLER_MANAGER_ARGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--address=0.0.0.0 &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
                              --service-cluster-ip-range=10.254.0.0/16 &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
                              --cluster-name=kubernetes &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
                              --cluster-signing-cert-file=/etc/kubernetes/ssl/k8s-root-ca.pem &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
                              --cluster-signing-key-file=/etc/kubernetes/ssl/k8s-root-ca-key.pem &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
                              --experimental-cluster-signing-duration=87600h0m0s &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
                              --service-account-private-key-file=/etc/kubernetes/ssl/k8s-root-ca-key.pem &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
                              --root-ca-file=/etc/kubernetes/ssl/k8s-root-ca.pem &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
                              --leader-elect=true &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
                              --node-monitor-grace-period=40s &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
                              --node-monitor-period=5s &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
                              --pod-eviction-timeout=5m0s&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;scheduler-配置&quot;&gt;scheduler 配置&lt;/h5&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;###&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# kubernetes scheduler config&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# default config should be adequate&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Add your own!&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;KUBE_SCHEDULER_ARGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--leader-elect=true --address=0.0.0.0&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最后启动 Master 相关组件并验证&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl daemon-reload
systemctl start kube-apiserver
systemctl start kube-controller-manager
systemctl start kube-scheduler
systemctl &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;kube-apiserver
systemctl &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;kube-controller-manager
systemctl &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;kube-scheduler
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/klnwa.jpg&quot; alt=&quot;Master Success&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;四搭建-node-节点&quot;&gt;四、搭建 Node 节点&lt;/h3&gt;

&lt;h4 id=&quot;41分发-rpm-及证书&quot;&gt;4.1、分发 rpm 及证书&lt;/h4&gt;

&lt;p&gt;对于 Node 节点，只需要安装 &lt;code class=&quot;highlighter-rouge&quot;&gt;kubernetes-node&lt;/code&gt; 即可，同时为了方便使用，这里也安装了 &lt;code class=&quot;highlighter-rouge&quot;&gt;kubernetes-client&lt;/code&gt;，如下&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;IP &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;seq 8 9&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;do
    &lt;/span&gt;scp kubernetes-node-1.8.0-1.el7.centos.x86_64.rpm kubernetes-client-1.8.0-1.el7.centos.x86_64.rpm root@10.10.1.&lt;span class=&quot;nv&quot;&gt;$IP&lt;/span&gt;:~
    ssh root@10.10.1.&lt;span class=&quot;nv&quot;&gt;$IP&lt;/span&gt; yum install &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; kubernetes-node-1.8.0-1.el7.centos.x86_64.rpm kubernetes-client-1.8.0-1.el7.centos.x86_64.rpm
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;同时还要分发相关证书；这里将 Etcd 证书已进行了分发，是因为 &lt;strong&gt;虽然 Node 节点上没有 Etcd，但是如果部署网络组件，如 calico、flannel 等时，网络组件需要联通 Etcd 就会用到 Etcd 的相关证书。&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 分发 Kubernetes 证书&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;IP &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;seq 8 9&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;do
    &lt;/span&gt;ssh root@10.10.1.&lt;span class=&quot;nv&quot;&gt;$IP&lt;/span&gt; mkdir /etc/kubernetes/ssl
    scp &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.pem root@10.10.1.&lt;span class=&quot;nv&quot;&gt;$IP&lt;/span&gt;:/etc/kubernetes/ssl
    scp &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.kubeconfig token.csv audit-policy.yaml root@10.10.1.&lt;span class=&quot;nv&quot;&gt;$IP&lt;/span&gt;:/etc/kubernetes
    ssh root@10.10.1.&lt;span class=&quot;nv&quot;&gt;$IP&lt;/span&gt; chown &lt;span class=&quot;nt&quot;&gt;-R&lt;/span&gt; kube:kube /etc/kubernetes/ssl
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# 分发 Etcd 证书&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;IP &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;seq 8 9&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;do
    &lt;/span&gt;ssh root@10.10.1.&lt;span class=&quot;nv&quot;&gt;$IP&lt;/span&gt; mkdir &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; /etc/etcd/ssl
    scp &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;.pem root@10.10.1.&lt;span class=&quot;nv&quot;&gt;$IP&lt;/span&gt;:/etc/etcd/ssl
    ssh root@10.10.1.&lt;span class=&quot;nv&quot;&gt;$IP&lt;/span&gt; chmod &lt;span class=&quot;nt&quot;&gt;-R&lt;/span&gt; 644 /etc/etcd/ssl/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;
    ssh root@10.10.1.&lt;span class=&quot;nv&quot;&gt;$IP&lt;/span&gt; chmod 755 /etc/etcd/ssl
&lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;42修改-node-配置&quot;&gt;4.2、修改 Node 配置&lt;/h4&gt;

&lt;p&gt;Node 上只需要修改 kubelet 和 kube-proxy 的配置即可&lt;/p&gt;

&lt;h5 id=&quot;config-通用配置&quot;&gt;config 通用配置&lt;/h5&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;###&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# kubernetes system config&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# The following values are used to configure various aspects of all&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# kubernetes services, including&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#   kube-apiserver.service&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#   kube-controller-manager.service&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#   kube-scheduler.service&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#   kubelet.service&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#   kube-proxy.service&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# logging to stderr means we get it in the systemd journal&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;KUBE_LOGTOSTDERR&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--logtostderr=true&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# journal message level, 0 is debug&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;KUBE_LOG_LEVEL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--v=2&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Should this cluster be allowed to run privileged docker containers&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;KUBE_ALLOW_PRIV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--allow-privileged=true&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# How the controller-manager, scheduler, and proxy find the apiserver&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# KUBE_MASTER=&quot;--master=http://127.0.0.1:8080&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;kubelet-配置&quot;&gt;kubelet 配置&lt;/h5&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;###&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# kubernetes kubelet (minion) config&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# The address for the info server to serve on (set to 0.0.0.0 or &quot;&quot; for all interfaces)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;KUBELET_ADDRESS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--address=10.10.1.8&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# The port for the info server to serve on&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# KUBELET_PORT=&quot;--port=10250&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# You may leave this blank to use the actual hostname&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;KUBELET_HOSTNAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--hostname-override=docker4.node&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# location of the api-server&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# KUBELET_API_SERVER=&quot;&quot;&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Add your own!&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;KUBELET_ARGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--cgroup-driver=cgroupfs &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
              --cluster-dns=10.254.0.2 &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
              --resolv-conf=/etc/resolv.conf &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
              --experimental-bootstrap-kubeconfig=/etc/kubernetes/bootstrap.kubeconfig &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
              --kubeconfig=/etc/kubernetes/kubelet.kubeconfig &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
              --fail-swap-on=false &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
              --cert-dir=/etc/kubernetes/ssl &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
              --cluster-domain=cluster.local. &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
              --hairpin-mode=promiscuous-bridge &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
              --serialize-image-pulls=false &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
              --pod-infra-container-image=gcr.io/google_containers/pause-amd64:3.0&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;注意: kubelet 配置与 1.7 版本有一定改动&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;增加 &lt;code class=&quot;highlighter-rouge&quot;&gt;--fail-swap-on=false&lt;/code&gt; 选项，否则可能导致在开启 swap 分区的机器上无法启动 kubelet，详细可参考 &lt;a href=&quot;https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG.md#before-upgrading&quot;&gt;CHANGELOG&lt;/a&gt;(before-upgrading 第一条)&lt;/li&gt;
  &lt;li&gt;移除 &lt;code class=&quot;highlighter-rouge&quot;&gt;--require-kubeconfig&lt;/code&gt; 选项，已经过时废弃&lt;/li&gt;
&lt;/ul&gt;

&lt;h5 id=&quot;proxy-配置&quot;&gt;proxy 配置&lt;/h5&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;###&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# kubernetes proxy config&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# default config should be adequate&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Add your own!&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;KUBE_PROXY_ARGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--bind-address=10.10.1.8 &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
                 --hostname-override=docker4.node &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
                 --kubeconfig=/etc/kubernetes/kube-proxy.kubeconfig &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
                 --cluster-cidr=10.254.0.0/16&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;kube-proxy 配置与 1.7 并无改变，最新 1.8 的 ipvs 模式将单独写一篇文章，这里不做介绍&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;43创建-nginx-代理&quot;&gt;4.3、创建 Nginx 代理&lt;/h4&gt;

&lt;p&gt;由于 HA 方案基于 Nginx 反代实现，所以每个 Node 要启动一个 Nginx 负载均衡 Master，具体参考 &lt;a href=&quot;https://mritd.me/2017/07/21/set-up-kubernetes-ha-cluster-by-binary/#41ha-master-%E7%AE%80%E8%BF%B0&quot;&gt;HA Master 简述&lt;/a&gt;&lt;/p&gt;

&lt;h5 id=&quot;nginxconf&quot;&gt;nginx.conf&lt;/h5&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 创建配置目录&lt;/span&gt;
mkdir &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; /etc/nginx

&lt;span class=&quot;c&quot;&gt;# 写入代理配置&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt; &amp;gt;&amp;gt; /etc/nginx/nginx.conf
error_log stderr notice;

worker_processes auto;
events {
  multi_accept on;
  use epoll;
  worker_connections 1024;
}

stream {
    upstream kube_apiserver {
        least_conn;
        server 10.10.1.5:6443;
        server 10.10.1.6:6443;
        server 10.10.1.7:6443;
    }

    server {
        listen        0.0.0.0:6443;
        proxy_pass    kube_apiserver;
        proxy_timeout 10m;
        proxy_connect_timeout 1s;
    }
}
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF

&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# 更新权限&lt;/span&gt;
chmod +r /etc/nginx/nginx.conf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h5 id=&quot;nginx-proxyservice&quot;&gt;nginx-proxy.service&lt;/h5&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt; &amp;gt;&amp;gt; /etc/systemd/system/nginx-proxy.service
[Unit]
Description=kubernetes apiserver docker wrapper
Wants=docker.socket
After=docker.service

[Service]
User=root
PermissionsStartOnly=true
ExecStart=/usr/bin/docker run -p 127.0.0.1:6443:6443 \\
                              -v /etc/nginx:/etc/nginx \\
                              --name nginx-proxy \\
                              --net=host \\
                              --restart=on-failure:5 \\
                              --memory=512M \\
                              nginx:1.13.5-alpine
ExecStartPre=-/usr/bin/docker rm -f nginx-proxy
ExecStop=/usr/bin/docker stop nginx-proxy
Restart=always
RestartSec=15s
TimeoutStartSec=30s

[Install]
WantedBy=multi-user.target
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;最后启动 Nginx 代理即可&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl daemon-reload
systemctl start nginx-proxy
systemctl &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;nginx-proxy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;44添加-node&quot;&gt;4.4、添加 Node&lt;/h4&gt;

&lt;p&gt;一切准备就绪后就可以添加 Node 了，首先由于我们采用了 &lt;a href=&quot;https://kubernetes.io/docs/admin/kubelet-tls-bootstrapping/&quot;&gt;TLS Bootstrapping&lt;/a&gt;，所以需要先创建一个 ClusterRoleBinding&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 在任意 master 执行即可&lt;/span&gt;
kubectl create clusterrolebinding kubelet-bootstrap &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--clusterrole&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;system:node-bootstrapper &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;--user&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;kubelet-bootstrap
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后启动 kubelet&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl daemon-reload
systemctl start kubelet
systemctl &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;kubelet
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;由于采用了 TLS Bootstrapping，所以 kubelet 启动后不会立即加入集群，而是进行证书申请，从日志中可以看到如下输出&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;10月 06 19:53:23 docker4.node kubelet[3797]: I1006 19:53:23.917261    3797 bootstrap.go:57] Using bootstrap kubeconfig to generate TLS client cert, key and kubeconfig file
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;此时只需要在 master 允许其证书申请即可&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;kubectl get csr | &lt;span class=&quot;nb&quot;&gt;grep &lt;/span&gt;Pending | awk &lt;span class=&quot;s1&quot;&gt;'{print $1}'&lt;/span&gt; | xargs kubectl certificate approve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;此时可以看到 Node 已经加入了&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker1.node ➜  ~ kubectl get node
NAME           STATUS    ROLES     AGE       VERSION
docker4.node   Ready     &amp;lt;none&amp;gt;    14m       v1.8.0
docker5.node   Ready     &amp;lt;none&amp;gt;    3m        v1.8.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最后再启动 kube-proxy 即可&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl start kube-proxy
systemctl &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;kube-proxy
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;再次提醒: 如果 kubelet 启动出现了类似 &lt;code class=&quot;highlighter-rouge&quot;&gt;system:node:xxxx&lt;/code&gt; 用户没有权限访问 API 的 RBAC 错误，那么一定是 API Server 授权控制器、准入控制配置有问题，请仔细阅读上面的文档进行更改&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&quot;45master-作为-node&quot;&gt;4.5、Master 作为 Node&lt;/h4&gt;

&lt;p&gt;如果想讲 Master 也作为 Node 的话，请在 Master 上安装 kubernete-node rpm 包，配置与上面基本一致；&lt;strong&gt;区别于 Master 上不需要启动 nginx 做负载均衡，同时 &lt;code class=&quot;highlighter-rouge&quot;&gt;bootstrap.kubeconfig&lt;/code&gt;、&lt;code class=&quot;highlighter-rouge&quot;&gt;kube-proxy.kubeconfig&lt;/code&gt; 中的 API Server 地址改成当前 Master IP 即可。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;最终成功后如下图所示&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/c4dde.jpg&quot; alt=&quot;cluster success&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;五部署-calico&quot;&gt;五、部署 Calico&lt;/h3&gt;

&lt;h4 id=&quot;51修改-calico-配置&quot;&gt;5.1、修改 Calico 配置&lt;/h4&gt;

&lt;p&gt;Calico 部署仍然采用 “混搭” 方式，即 Systemd 控制 calico node，cni 等由 kubernetes daemonset 安装，具体请参考 &lt;a href=&quot;https://mritd.me/2017/07/31/calico-yml-bug/&quot;&gt;Calico 部署踩坑记录&lt;/a&gt;，以下直接上代码&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 获取 calico.yaml&lt;/span&gt;
wget https://docs.projectcalico.org/v2.6/getting-started/kubernetes/installation/hosted/calico.yaml

&lt;span class=&quot;c&quot;&gt;# 替换 Etcd 地址&lt;/span&gt;
sed &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s@.*etcd_endpoints:.*@\ \ etcd_endpoints:\ \&quot;https://10.10.1.5:2379,https://10.10.1.6:2379,https://10.10.1.7:2379\&quot;@gi'&lt;/span&gt; calico.yaml

&lt;span class=&quot;c&quot;&gt;# 替换 Etcd 证书&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ETCD_CERT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /etc/etcd/ssl/etcd.pem | base64 | tr &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'\n'&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ETCD_KEY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /etc/etcd/ssl/etcd-key.pem | base64 | tr &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'\n'&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ETCD_CA&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; /etc/etcd/ssl/etcd-root-ca.pem | base64 | tr &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'\n'&lt;/span&gt;&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;

sed &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;s@.*etcd-cert:.*@&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\ \ &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;etcd-cert:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ETCD_CERT&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;@gi&quot;&lt;/span&gt; calico.yaml
sed &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;s@.*etcd-key:.*@&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\ \ &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;etcd-key:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ETCD_KEY&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;@gi&quot;&lt;/span&gt; calico.yaml
sed &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;s@.*etcd-ca:.*@&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\ \ &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;etcd-ca:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\ &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;ETCD_CA&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;@gi&quot;&lt;/span&gt; calico.yaml

sed &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s@.*etcd_ca:.*@\ \ etcd_ca:\ &quot;/calico-secrets/etcd-ca&quot;@gi'&lt;/span&gt; calico.yaml
sed &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s@.*etcd_cert:.*@\ \ etcd_cert:\ &quot;/calico-secrets/etcd-cert&quot;@gi'&lt;/span&gt; calico.yaml
sed &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s@.*etcd_key:.*@\ \ etcd_key:\ &quot;/calico-secrets/etcd-key&quot;@gi'&lt;/span&gt; calico.yaml

&lt;span class=&quot;c&quot;&gt;# 注释掉 calico-node 部分(由 Systemd 接管)&lt;/span&gt;
sed &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'103,189s@.*@#&amp;amp;@gi'&lt;/span&gt; calico.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;52创建-systemd-文件&quot;&gt;5.2、创建 Systemd 文件&lt;/h4&gt;

&lt;p&gt;上一步注释了 &lt;code class=&quot;highlighter-rouge&quot;&gt;calico.yaml&lt;/code&gt; 中 Calico Node 相关内容，为了防止自动获取 IP 出现问题，将其移动到 Systemd，Systemd service 配置如下，&lt;strong&gt;每个节点都要安装 calico-node 的 Service&lt;/strong&gt;，其他节点请自行修改 ip(被问我为啥是两个反引号 &lt;code class=&quot;highlighter-rouge&quot;&gt;\\&lt;/code&gt;，自己试就知道了)&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /usr/lib/systemd/system/calico-node.service &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
[Unit]
Description=calico node
After=docker.service
Requires=docker.service

[Service]
User=root
PermissionsStartOnly=true
ExecStart=/usr/bin/docker run   --net=host --privileged --name=calico-node \\
                                -e ETCD_ENDPOINTS=https://10.10.1.5:2379,https://10.10.1.6:2379,https://10.10.1.7:2379 \\
                                -e ETCD_CA_CERT_FILE=/etc/etcd/ssl/etcd-root-ca.pem \\
                                -e ETCD_CERT_FILE=/etc/etcd/ssl/etcd.pem \\
                                -e ETCD_KEY_FILE=/etc/etcd/ssl/etcd-key.pem \\
                                -e NODENAME=docker1.node \\
                                -e IP=10.10.1.5 \\
                                -e IP6= \\
                                -e AS= \\
                                -e CALICO_IPV4POOL_CIDR=10.20.0.0/16 \\
                                -e CALICO_IPV4POOL_IPIP=always \\
                                -e CALICO_LIBNETWORK_ENABLED=true \\
                                -e CALICO_NETWORKING_BACKEND=bird \\
                                -e CALICO_DISABLE_FILE_LOGGING=true \\
                                -e FELIX_IPV6SUPPORT=false \\
                                -e FELIX_DEFAULTENDPOINTTOHOSTACTION=ACCEPT \\
                                -e FELIX_LOGSEVERITYSCREEN=info \\
                                -v /etc/etcd/ssl/etcd-root-ca.pem:/etc/etcd/ssl/etcd-root-ca.pem \\
                                -v /etc/etcd/ssl/etcd.pem:/etc/etcd/ssl/etcd.pem \\
                                -v /etc/etcd/ssl/etcd-key.pem:/etc/etcd/ssl/etcd-key.pem \\
                                -v /var/run/calico:/var/run/calico \\
                                -v /lib/modules:/lib/modules \\
                                -v /run/docker/plugins:/run/docker/plugins \\
                                -v /var/run/docker.sock:/var/run/docker.sock \\
                                -v /var/log/calico:/var/log/calico \\
                                quay.io/calico/node:v2.6.1
ExecStop=/usr/bin/docker rm -f calico-node
Restart=always
RestartSec=10

[Install]
WantedBy=multi-user.target
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;53修改-kubelet-配置&quot;&gt;5.3、修改 kubelet 配置&lt;/h4&gt;

&lt;p&gt;根据官方文档要求 &lt;code class=&quot;highlighter-rouge&quot;&gt;kubelet&lt;/code&gt; 配置必须增加 &lt;code class=&quot;highlighter-rouge&quot;&gt;--network-plugin=cni&lt;/code&gt; 选项，所以需要修改 kubelet 配置&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;###&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# kubernetes kubelet (minion) config&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# The address for the info server to serve on (set to 0.0.0.0 or &quot;&quot; for all interfaces)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;KUBELET_ADDRESS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--address=10.10.1.5&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# The port for the info server to serve on&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# KUBELET_PORT=&quot;--port=10250&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# You may leave this blank to use the actual hostname&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;KUBELET_HOSTNAME&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--hostname-override=docker1.node&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# location of the api-server&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# KUBELET_API_SERVER=&quot;&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Add your own!&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;KUBELET_ARGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;--cgroup-driver=cgroupfs &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
              --network-plugin=cni &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
              --cluster-dns=10.254.0.2 &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
              --resolv-conf=/etc/resolv.conf &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
              --experimental-bootstrap-kubeconfig=/etc/kubernetes/bootstrap.kubeconfig &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
              --kubeconfig=/etc/kubernetes/kubelet.kubeconfig &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
              --fail-swap-on=false &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
              --cert-dir=/etc/kubernetes/ssl &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
              --cluster-domain=cluster.local. &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
              --hairpin-mode=promiscuous-bridge &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
              --serialize-image-pulls=false &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;
              --pod-infra-container-image=gcr.io/google_containers/pause-amd64:3.0&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然后重启即可&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl daemon-reload
systemctl restart kubelet
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;此时执行 &lt;code class=&quot;highlighter-rouge&quot;&gt;kubectl get node&lt;/code&gt; 会看到 Node 为 &lt;code class=&quot;highlighter-rouge&quot;&gt;NotReady&lt;/code&gt; 状态，属于正常情况&lt;/p&gt;

&lt;h4 id=&quot;54创建-calico-daemonset&quot;&gt;5.4、创建 Calico Daemonset&lt;/h4&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 先创建 RBAC&lt;/span&gt;
kubectl apply &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; https://docs.projectcalico.org/v2.6/getting-started/kubernetes/installation/rbac.yaml

&lt;span class=&quot;c&quot;&gt;# 再创建 Calico Daemonset&lt;/span&gt;
kubectl create &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; calico.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;55创建-calico-node&quot;&gt;5.5、创建 Calico Node&lt;/h4&gt;

&lt;p&gt;Calico Node 采用 Systemd 方式启动，在每个节点配置好 Systemd service后，&lt;strong&gt;每个节点修改对应的 &lt;code class=&quot;highlighter-rouge&quot;&gt;calico-node.service&lt;/code&gt; 中的 IP 和节点名称，然后启动即可&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl daemon-reload
systemctl restart calico-node
sleep 5
systemctl restart kubelet
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;此时检查 Node 应该都处于 Ready 状态&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/agxp3.jpg&quot; alt=&quot;Node Ready&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;最后测试一下跨主机通讯&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 创建 deployment&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt; &amp;gt;&amp;gt; demo.deploy.yml
apiVersion: apps/v1beta2
kind: Deployment
metadata:
  name: demo-deployment
spec:
  replicas: 5
  selector:
    matchLabels:
      app: demo
  template:
    metadata:
      labels:
        app: demo
    spec:
      containers:
      - name: demo
        image: mritd/demo
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 80
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF
&lt;/span&gt;kubectl create &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; demo.deploy.yml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;进入其中一个 Pod，ping 另一个 Pod 的 IP 测试即可&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/00krx.jpg&quot; alt=&quot;Test Calico&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;六部署-dns&quot;&gt;六、部署 DNS&lt;/h3&gt;

&lt;h4 id=&quot;61部署集群-dns&quot;&gt;6.1、部署集群 DNS&lt;/h4&gt;

&lt;p&gt;DNS 组件部署非常简单，直接创建相应的 deployment 等即可；但是有一个事得说一嘴，Kubernets 一直在推那个 &lt;code class=&quot;highlighter-rouge&quot;&gt;Addon Manager&lt;/code&gt; 的工具来管理 DNS 啥的，文档说的条条是道，就是不希望我们手动搞这些东西，防止意外修改云云… 但问题是关于那个 &lt;code class=&quot;highlighter-rouge&quot;&gt;Addon Manager&lt;/code&gt; 咋用一句没提，虽然说里面就一个小脚本，看看也能懂；但是我还是选择手动 😌… 还有这个 DNS 配置文件好像又挪地方了，以前在 &lt;code class=&quot;highlighter-rouge&quot;&gt;contrib&lt;/code&gt; 项目下的…&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 获取文件&lt;/span&gt;
wget https://raw.githubusercontent.com/kubernetes/kubernetes/master/cluster/addons/dns/kube-dns.yaml.sed
mv kube-dns.yaml.sed kube-dns.yaml

&lt;span class=&quot;c&quot;&gt;# 修改配置&lt;/span&gt;
sed &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s/$DNS_DOMAIN/cluster.local/gi'&lt;/span&gt; kube-dns.yaml
sed &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'s/$DNS_SERVER_IP/10.254.0.2/gi'&lt;/span&gt; kube-dns.yaml

&lt;span class=&quot;c&quot;&gt;# 创建&lt;/span&gt;
kubectl create &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; kube-dns.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;创建好以后如下所示&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/vg95n.jpg&quot; alt=&quot;DNS&quot; /&gt;&lt;/p&gt;

&lt;p&gt;然后创建两组 Pod 和 Service，进入 Pod 中 curl 另一个 Service 名称看看是否能解析；同时还要测试一下外网能否解析&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/x185c.jpg&quot; alt=&quot;Test DNS1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;测试外网&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/3k9gz.jpg&quot; alt=&quot;Test DNS2&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;62部署-dns-自动扩容部署&quot;&gt;6.2、部署 DNS 自动扩容部署&lt;/h4&gt;

&lt;p&gt;这个同样下载 yaml，然后创建一下即可，不需要修改任何配置&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget https://raw.githubusercontent.com/kubernetes/kubernetes/master/cluster/addons/dns-horizontal-autoscaler/dns-horizontal-autoscaler.yaml
kubectl create &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; dns-horizontal-autoscaler.yaml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;部署完成后如下&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/mid1u.jpg&quot; alt=&quot;DNS autoscaler&quot; /&gt;&lt;/p&gt;

&lt;p&gt;自动扩容这里不做测试了，虚拟机吃不消了，详情自己参考 &lt;a href=&quot;https://kubernetes.io/docs/tasks/administer-cluster/dns-horizontal-autoscaling/&quot;&gt;Autoscale the DNS Service in a Cluster&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;kube-proxy ipvs 下一篇写，坑有点多，虽然搞定了，但是一篇写有点囫囵吞枣，后来想一想还是分开吧&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;转载请注明出处，本文采用 &lt;a href=&quot;http://creativecommons.org/licenses/by-nc-nd/4.0/&quot;&gt;CC4.0&lt;/a&gt; 协议授权&lt;/p&gt;</content><author><name>漠然</name></author><summary type="html">目前 Kubernetes 1.8.0 已经发布，1.8.0增加了很多新特性，比如 kube-proxy 组建的 ipvs 模式等，同时 RBAC 授权也做了一些调整，国庆没事干，所以试了一下；以下记录了 Kubernetes 1.8.0 的搭建过程</summary></entry><entry><title type="html">Alpine 3.6 OpenJDK 8 Bug</title><link href="https://mritd.me/2017/09/27/alpine-3.6-openjdk-8-bug/" rel="alternate" type="text/html" title="Alpine 3.6 OpenJDK 8 Bug" /><published>2017-09-27T20:43:12+08:00</published><updated>2017-09-27T20:43:12+08:00</updated><id>https://mritd.me/2017/09/27/alpine-3.6-openjdk-8-bug</id><content type="html" xml:base="https://mritd.me/2017/09/27/alpine-3.6-openjdk-8-bug/">&lt;blockquote&gt;
  &lt;p&gt;最近切换项目基础镜像踩到一个大坑，由于 alpine 基础镜像和 OpenJDK8 Bug 导致鼓捣了2天才解决，故记录一下这个问题&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;一问题环境&quot;&gt;一、问题环境&lt;/h3&gt;

&lt;p&gt;出现问题的基本环境如下&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;OpneJDK 8u131&lt;/li&gt;
  &lt;li&gt;Alpine 3.6&lt;/li&gt;
  &lt;li&gt;Kaptcha (Java 验证码库)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;二问题描述&quot;&gt;二、问题描述&lt;/h3&gt;

&lt;p&gt;出现问题表象为 &lt;strong&gt;Spring Boot 项目启动后，访问注册页(有验证码)时，验证码不显示，后台报错信息大意为缺失字体库，安装字体后会报错说 &lt;code class=&quot;highlighter-rouge&quot;&gt;libfontmanager.so: AWTFontDefaultChar: symbol not found&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;三解决方案&quot;&gt;三、解决方案&lt;/h3&gt;

&lt;p&gt;当出现字体找不到这种错误时，原因是 &lt;strong&gt;Alpine 太过精简，导致里面没有字体，只需要安装字体即可&lt;/strong&gt;，在 Dockerfile 中添加如下命令即可:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;apk add &lt;span class=&quot;nt&quot;&gt;--update&lt;/span&gt; font-adobe-100dpi ttf-dejavu fontconfig
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;当安装字体后，可能会出现如下错误:&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Caused by: java.lang.UnsatisfiedLinkError: /usr/lib/jvm/java-1.8-openjdk/jre/lib/amd64/libfontmanager.so: Error relocating /usr/lib/jvm/java-1.8-openjdk/jre/lib/amd64/libfontmanager.so: AWTFontDefaultChar: symbol not found
    at java.lang.ClassLoader&lt;span class=&quot;nv&quot;&gt;$NativeLibrary&lt;/span&gt;.load&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Native Method&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    at java.lang.ClassLoader.loadLibrary0&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;ClassLoader.java:1941&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    at java.lang.ClassLoader.loadLibrary&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;ClassLoader.java:1845&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    at java.lang.Runtime.loadLibrary0&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Runtime.java:870&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    at java.lang.System.loadLibrary&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;System.java:1122&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    at sun.font.FontManagerNativeLibrary&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;.run&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;FontManagerNativeLibrary.java:61&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    at java.security.AccessController.doPrivileged&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Native Method&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    at sun.font.FontManagerNativeLibrary.&amp;lt;clinit&amp;gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;FontManagerNativeLibrary.java:32&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    at sun.font.SunFontManager&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;.run&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;SunFontManager.java:339&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    at java.security.AccessController.doPrivileged&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Native Method&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    at sun.font.SunFontManager.&amp;lt;clinit&amp;gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;SunFontManager.java:335&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    at java.lang.Class.forName0&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Native Method&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    at java.lang.Class.forName&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Class.java:348&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    at sun.font.FontManagerFactory&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;.run&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;FontManagerFactory.java:82&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    at java.security.AccessController.doPrivileged&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Native Method&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    at sun.font.FontManagerFactory.getInstance&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;FontManagerFactory.java:74&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    at java.awt.Font.getFont2D&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Font.java:491&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    at java.awt.Font.getFamily&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Font.java:1220&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    at java.awt.Font.getFamily_NoClientCode&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Font.java:1194&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    at java.awt.Font.getFamily&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Font.java:1186&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    at java.awt.Font.toString&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;Font.java:1683&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    at hudson.util.ChartUtil.&amp;lt;clinit&amp;gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;ChartUtil.java:260&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    at hudson.WebAppMain.contextInitialized&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;WebAppMain.java:194&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    ... 23 more
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Google 半天，最后找到了 &lt;a href=&quot;https://bugs.alpinelinux.org/issues/7372&quot;&gt;Alpine 官方 Bug 列表&lt;/a&gt;，在最后面做了回复，其中大意是: &lt;strong&gt;Alpine 3.6 版本的 Docker 镜像中安装的是 OpenJDK 8u131，这个版本有 BUG，并且在 3.6.3 的 OpenJDK 8.141.15 版本做了修复&lt;/strong&gt;；从上面可知我们解决方案有两个:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;降级到 Alpine 3.5，其内的 OpneJDK 是 8u121 版本，没有这个 Bug&lt;/li&gt;
  &lt;li&gt;升级到 Alpine Edge，其内部 OpenJDK 版本为 8.144.01，已经修复了这个 Bug&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;当然我选择浪一波，做了升级，最终基础镜像的 Dockerfile 如下&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FROM alpine:edge

LABEL &lt;span class=&quot;nv&quot;&gt;maintainer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;mritd &amp;lt;mritd1234@gmail.com&amp;gt;&quot;&lt;/span&gt;

ENV JAVA_HOME /usr/lib/jvm/java-1.8-openjdk
ENV PATH &lt;span class=&quot;nv&quot;&gt;$PATH&lt;/span&gt;:/usr/lib/jvm/java-1.8-openjdk/jre/bin:/usr/lib/jvm/java-1.8-openjdk/bin
ENV JAVA_VERSION 8u144
ENV JAVA_ALPINE_VERSION 8.144.01-r0

RUN apk add &lt;span class=&quot;nt&quot;&gt;--update&lt;/span&gt; bash curl &lt;span class=&quot;nb&quot;&gt;tar &lt;/span&gt;wget ca-certificates unzip &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;openjdk8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;JAVA_ALPINE_VERSION&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt; font-adobe-100dpi ttf-dejavu fontconfig &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; rm &lt;span class=&quot;nt&quot;&gt;-rf&lt;/span&gt; /var/cache/apk/&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;

CMD &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bash&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;转载请注明出处，本文采用 &lt;a href=&quot;http://creativecommons.org/licenses/by-nc-nd/4.0/&quot;&gt;CC4.0&lt;/a&gt; 协议授权&lt;/p&gt;</content><author><name>漠然</name></author><summary type="html">最近切换项目基础镜像踩到一个大坑，由于 alpine 基础镜像和 OpenJDK8 Bug 导致鼓捣了2天才解决，故记录一下这个问题</summary></entry><entry><title type="html">Consul 集群搭建</title><link href="https://mritd.me/2017/09/21/set-up-ha-consul-cluster/" rel="alternate" type="text/html" title="Consul 集群搭建" /><published>2017-09-21T22:50:28+08:00</published><updated>2017-09-21T22:50:28+08:00</updated><id>https://mritd.me/2017/09/21/set-up-ha-consul-cluster</id><content type="html" xml:base="https://mritd.me/2017/09/21/set-up-ha-consul-cluster/">&lt;blockquote&gt;
  &lt;p&gt;不知道 Consul 用的人多还是少，最近有人问怎么搭建 Consul 集群，这里顺手记录一下吧&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;一简介&quot;&gt;一、简介&lt;/h3&gt;

&lt;p&gt;Consul 与 Etcd 一样，都属于分布式一致性数据库，其主要特性就是在分布式系统中出现意外情况如节点宕机的情况下保证数据的一致性；相对于 Etcd 来说，Consul 提供了更加实用的其他功能特性，如 DNS、健康检查、服务发现、多数据中心等，同时还有 web ui 界面，体验相对于更加友好&lt;/p&gt;

&lt;h3 id=&quot;二环境准备&quot;&gt;二、环境准备&lt;/h3&gt;

&lt;p&gt;同 Etcd 一样，Consul 最少也需要 3 台机器，这里测试实用 5 台机器进行部署集群，具体环境如下&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;节点&lt;/th&gt;
      &lt;th&gt;IP&lt;/th&gt;
      &lt;th&gt;Version&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;server&lt;/td&gt;
      &lt;td&gt;192.168.1.11&lt;/td&gt;
      &lt;td&gt;v0.9.3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;server&lt;/td&gt;
      &lt;td&gt;192.168.1.12&lt;/td&gt;
      &lt;td&gt;v0.9.3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;server&lt;/td&gt;
      &lt;td&gt;192.168.1.13&lt;/td&gt;
      &lt;td&gt;v0.9.3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;client&lt;/td&gt;
      &lt;td&gt;192.168.1.14&lt;/td&gt;
      &lt;td&gt;v0.9.3&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;client&lt;/td&gt;
      &lt;td&gt;192.168.1.15&lt;/td&gt;
      &lt;td&gt;v0.9.3&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;其中 consul 采用 rpm 包的形式进行安装，这里并没有使用 docker 方式启动是因为个人习惯重要的数据存储服务交给 systemd管理；因为 docker 存在 docker daemon 的原因，如果用 docker 启动这种存储核心数据的组件，一但 daemon 出现问题那么所有容器都将出现问题；所以个人还是比较习惯将 etcd 和 consul 以二进制装在宿主机，由 systemd 直接管理。&lt;/p&gt;

&lt;h3 id=&quot;三部署集群&quot;&gt;三、部署集群&lt;/h3&gt;

&lt;h4 id=&quot;31consul-集群模式&quot;&gt;3.1、Consul 集群模式&lt;/h4&gt;

&lt;p&gt;Consul 集群与 Etcd 略有区别，&lt;strong&gt;Consul 在启动后分为两种模式:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Server 模式: 一个 Server 是一个有一组扩展功能的代理，这些功能包括参与 Raft 选举，维护集群状态，响应 RPC 查询，与其他数据中心交互 WAN gossip 和转发查询给 leader 或者远程数据中心。&lt;/li&gt;
  &lt;li&gt;Client 模式: 一个 Client 是一个转发所有 RPC 到 Server 的代理。这个 Client 是相对无状态的；Client 唯一执行的后台活动是加入 LAN gossip 池，这有一个最低的资源开销并且仅消耗少量的网络带宽。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;其集群后如下所示:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/n4mdw.jpg&quot; alt=&quot;Consul Cluster&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;32集群搭建&quot;&gt;3.2、集群搭建&lt;/h4&gt;

&lt;p&gt;Consul 集群搭建时一般提供两种模式:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;手动模式: 启动第一个节点后，此时此节点处于 bootstrap 模式，其节点手动执行加入&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;自动模式: 启动第一个节点后，在其他节点配置好尝试加入的目标节点，然后等待其自动加入(不需要人为命令加入)&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这里采用自动加入模式，搭建过程如下:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;首先获取 Consul 的 rpm 包，鉴于官方并未提供 rpm 安装包，所以我自己造了一个轮子，打包脚本见 &lt;a href=&quot;https://github.com/mritd/consul-rpm&quot;&gt;Github&lt;/a&gt;，以下直接从我的 yum 源中安装&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# 安装 yum 源&lt;/span&gt;
tee /etc/yum.repos.d/mritd.repo &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;EOF&lt;/span&gt;&lt;span class=&quot;sh&quot;&gt;
[mritdrepo]
name=Mritd Repository
baseurl=https://yumrepo.b0.upaiyun.com/centos/7/x86_64
enabled=1
gpgcheck=1
gpgkey=https://mritd.b0.upaiyun.com/keys/rpm.public.key
&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;EOF

&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# 安装 Consul，请不要在大规模部署时使用此 yum 源，CDN 流量不多请手下留情，&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# 如需大规模部署 请使用 yumdonwloader 工具下载 rpm 后手动分发安装&lt;/span&gt;
yum install &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; consul
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;5 台机器安装好后修改其中三台为 Server 模式并启动&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vim /etc/consul/consul.json

&lt;span class=&quot;c&quot;&gt;# 配置如下&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;datacenter&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;dc1&quot;&lt;/span&gt;,                // 数据中心名称
    &lt;span class=&quot;s2&quot;&gt;&quot;data_dir&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;/var/lib/consul&quot;&lt;/span&gt;,      // Server 节点数据目录
    &lt;span class=&quot;s2&quot;&gt;&quot;log_level&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;INFO&quot;&lt;/span&gt;,                // 日志级别
    &lt;span class=&quot;s2&quot;&gt;&quot;node_name&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;docker1.node&quot;&lt;/span&gt;,        // 当前节点名称
    &lt;span class=&quot;s2&quot;&gt;&quot;server&quot;&lt;/span&gt;: &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;,                     // 是否为 Server 模式，false 为 Client 模式
    &lt;span class=&quot;s2&quot;&gt;&quot;ui&quot;&lt;/span&gt;: &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;,                         // 是否开启 UI 访问
    &lt;span class=&quot;s2&quot;&gt;&quot;bootstrap_expect&quot;&lt;/span&gt;: 1,              // 启动时期望的就绪节点，1 代表启动为 bootstrap 模式，等待其他节点加入
    &lt;span class=&quot;s2&quot;&gt;&quot;bind_addr&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;192.168.1.11&quot;&lt;/span&gt;,        // 绑定的 IP
    &lt;span class=&quot;s2&quot;&gt;&quot;client_addr&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;192.168.1.11&quot;&lt;/span&gt;,      // 同时作为 Client 接受请求的绑定 IP
    &lt;span class=&quot;s2&quot;&gt;&quot;retry_join&quot;&lt;/span&gt;: &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;192.168.1.12&quot;&lt;/span&gt;,&lt;span class=&quot;s2&quot;&gt;&quot;192.168.1.13&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;,  // 尝试加入的其他节点
    &lt;span class=&quot;s2&quot;&gt;&quot;retry_interval&quot;&lt;/span&gt;: &lt;span class=&quot;s2&quot;&gt;&quot;3s&quot;&lt;/span&gt;,             // 每次尝试间隔
    &lt;span class=&quot;s2&quot;&gt;&quot;raft_protocol&quot;&lt;/span&gt;: 3,                 // Raft 协议版本
    &lt;span class=&quot;s2&quot;&gt;&quot;enable_debug&quot;&lt;/span&gt;: &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;,              // 是否开启 Debug 模式
    &lt;span class=&quot;s2&quot;&gt;&quot;rejoin_after_leave&quot;&lt;/span&gt;: &lt;span class=&quot;nb&quot;&gt;true&lt;/span&gt;,         // 允许重新加入集群
    &lt;span class=&quot;s2&quot;&gt;&quot;enable_syslog&quot;&lt;/span&gt;: &lt;span class=&quot;nb&quot;&gt;false&lt;/span&gt;              // 是否开启 syslog
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;另外两个节点与以上配置大致相同，差别在于其他两个 Server 节点 &lt;code class=&quot;highlighter-rouge&quot;&gt;bootstrap_expect&lt;/code&gt; 值为 2，即期望启动时已经有两个节点就绪；然后依次启动三个 Server 节点即可&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-sh highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemctl start consul
systemctl &lt;span class=&quot;nb&quot;&gt;enable &lt;/span&gt;consul
systemctl status consul
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;此时可访问任意一台 Server 节点的 UI 界面，地址为 &lt;code class=&quot;highlighter-rouge&quot;&gt;http://serverIP:8500&lt;/code&gt;，截图如下&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/t9cxf.jpg&quot; alt=&quot;Server Success&quot; /&gt;&lt;/p&gt;

&lt;p&gt;接下来修改其他两个节点配置，使其作为 Client 加入到集群即可，&lt;strong&gt;注意的是当处于 Client 模式时，&lt;code class=&quot;highlighter-rouge&quot;&gt;bootstrap_expect&lt;/code&gt; 必须为 0，即关闭状态；具体配置如下&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;datacenter&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;dc1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;data_dir&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/var/lib/consul&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;log_level&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;INFO&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;node_name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;docker4.node&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;server&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ui&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bootstrap_expect&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;bind_addr&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;192.168.1.14&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;client_addr&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;192.168.1.14&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;retry_join&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;192.168.1.11&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;192.168.1.12&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;192.168.1.13&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;retry_interval&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;3s&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;raft_protocol&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;enable_debug&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;rejoin_after_leave&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;enable_syslog&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;另外一个 Client 配置与以上相同，最终集群成功后如下所示&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/j1zrc.jpg&quot; alt=&quot;Cluster ok&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://mritd.b0.upaiyun.com/markdown/kq4cz.jpg&quot; alt=&quot;Command Line&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;四其他说明&quot;&gt;四、其他说明&lt;/h3&gt;

&lt;p&gt;关于 Consul 的其他各种参数说明，中文版可参考 &lt;a href=&quot;http://www.10tiao.com/html/357/201705/2247485185/1.html&quot;&gt;Consul集群部署&lt;/a&gt;；这个文章对大体上讲的基本很全了，但是随着版本变化，有些参数还是需要参考一下 &lt;a href=&quot;https://www.consul.io/docs/agent/options.html&quot;&gt;官方配置文档&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;转载请注明出处，本文采用 &lt;a href=&quot;http://creativecommons.org/licenses/by-nc-nd/4.0/&quot;&gt;CC4.0&lt;/a&gt; 协议授权&lt;/p&gt;</content><author><name>漠然</name></author><summary type="html">不知道 Consul 用的人多还是少，最近有人问怎么搭建 Consul 集群，这里顺手记录一下吧</summary></entry></feed>